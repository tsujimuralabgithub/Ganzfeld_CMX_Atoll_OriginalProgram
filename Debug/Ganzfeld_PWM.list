
Ganzfeld_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab90  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000294  0800ad20  0800ad20  0001ad20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800afb4  0800afb4  0001afb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800afbc  0800afbc  0001afbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800afc0  0800afc0  0001afc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000023c  20000000  0800afc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002023c  2**0
                  CONTENTS
  8 .bss          0001db4c  2000023c  2000023c  0002023c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2001dd88  2001dd88  0002023c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001b016  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004ad5  00000000  00000000  0003b282  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001910  00000000  00000000  0003fd58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 000016a8  00000000  00000000  00041668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00028986  00000000  00000000  00042d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002396f  00000000  00000000  0006b696  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000cb4fd  00000000  00000000  0008f005  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0015a502  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000723c  00000000  00000000  0015a554  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .stab         000000cc  00000000  00000000  00161790  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      000001b9  00000000  00000000  0016185c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000023c 	.word	0x2000023c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ad08 	.word	0x0800ad08

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000240 	.word	0x20000240
 80001cc:	0800ad08 	.word	0x0800ad08

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000598:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <HAL_Init+0x40>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a0d      	ldr	r2, [pc, #52]	; (80005d4 <HAL_Init+0x40>)
 800059e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005a4:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <HAL_Init+0x40>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a0a      	ldr	r2, [pc, #40]	; (80005d4 <HAL_Init+0x40>)
 80005aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005b0:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <HAL_Init+0x40>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a07      	ldr	r2, [pc, #28]	; (80005d4 <HAL_Init+0x40>)
 80005b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005bc:	2003      	movs	r0, #3
 80005be:	f000 f94b 	bl	8000858 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005c2:	2000      	movs	r0, #0
 80005c4:	f000 f808 	bl	80005d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005c8:	f007 fbce 	bl	8007d68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005cc:	2300      	movs	r3, #0
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40023c00 	.word	0x40023c00

080005d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <HAL_InitTick+0x54>)
 80005e2:	681a      	ldr	r2, [r3, #0]
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <HAL_InitTick+0x58>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	4619      	mov	r1, r3
 80005ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80005f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 f963 	bl	80008c2 <HAL_SYSTICK_Config>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000602:	2301      	movs	r3, #1
 8000604:	e00e      	b.n	8000624 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	2b0f      	cmp	r3, #15
 800060a:	d80a      	bhi.n	8000622 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800060c:	2200      	movs	r2, #0
 800060e:	6879      	ldr	r1, [r7, #4]
 8000610:	f04f 30ff 	mov.w	r0, #4294967295
 8000614:	f000 f92b 	bl	800086e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000618:	4a06      	ldr	r2, [pc, #24]	; (8000634 <HAL_InitTick+0x5c>)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800061e:	2300      	movs	r3, #0
 8000620:	e000      	b.n	8000624 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000622:	2301      	movs	r3, #1
}
 8000624:	4618      	mov	r0, r3
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	20000118 	.word	0x20000118
 8000630:	20000004 	.word	0x20000004
 8000634:	20000000 	.word	0x20000000

08000638 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <HAL_IncTick+0x20>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	461a      	mov	r2, r3
 8000642:	4b06      	ldr	r3, [pc, #24]	; (800065c <HAL_IncTick+0x24>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4413      	add	r3, r2
 8000648:	4a04      	ldr	r2, [pc, #16]	; (800065c <HAL_IncTick+0x24>)
 800064a:	6013      	str	r3, [r2, #0]
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	20000004 	.word	0x20000004
 800065c:	20000258 	.word	0x20000258

08000660 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  return uwTick;
 8000664:	4b03      	ldr	r3, [pc, #12]	; (8000674 <HAL_GetTick+0x14>)
 8000666:	681b      	ldr	r3, [r3, #0]
}
 8000668:	4618      	mov	r0, r3
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	20000258 	.word	0x20000258

08000678 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000680:	f7ff ffee 	bl	8000660 <HAL_GetTick>
 8000684:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000690:	d005      	beq.n	800069e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000692:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <HAL_Delay+0x44>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	461a      	mov	r2, r3
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	4413      	add	r3, r2
 800069c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800069e:	bf00      	nop
 80006a0:	f7ff ffde 	bl	8000660 <HAL_GetTick>
 80006a4:	4602      	mov	r2, r0
 80006a6:	68bb      	ldr	r3, [r7, #8]
 80006a8:	1ad3      	subs	r3, r2, r3
 80006aa:	68fa      	ldr	r2, [r7, #12]
 80006ac:	429a      	cmp	r2, r3
 80006ae:	d8f7      	bhi.n	80006a0 <HAL_Delay+0x28>
  {
  }
}
 80006b0:	bf00      	nop
 80006b2:	bf00      	nop
 80006b4:	3710      	adds	r7, #16
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000004 	.word	0x20000004

080006c0 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b085      	sub	sp, #20
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f003 0307 	and.w	r3, r3, #7
 80006ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <NVIC_SetPriorityGrouping+0x44>)
 80006d2:	68db      	ldr	r3, [r3, #12]
 80006d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006d6:	68ba      	ldr	r2, [r7, #8]
 80006d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006dc:	4013      	ands	r3, r2
 80006de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006f2:	4a04      	ldr	r2, [pc, #16]	; (8000704 <NVIC_SetPriorityGrouping+0x44>)
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	60d3      	str	r3, [r2, #12]
}
 80006f8:	bf00      	nop
 80006fa:	3714      	adds	r7, #20
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr
 8000704:	e000ed00 	.word	0xe000ed00

08000708 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800070c:	4b04      	ldr	r3, [pc, #16]	; (8000720 <NVIC_GetPriorityGrouping+0x18>)
 800070e:	68db      	ldr	r3, [r3, #12]
 8000710:	0a1b      	lsrs	r3, r3, #8
 8000712:	f003 0307 	and.w	r3, r3, #7
}
 8000716:	4618      	mov	r0, r3
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr
 8000720:	e000ed00 	.word	0xe000ed00

08000724 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	f003 021f 	and.w	r2, r3, #31
 8000734:	4907      	ldr	r1, [pc, #28]	; (8000754 <NVIC_EnableIRQ+0x30>)
 8000736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073a:	095b      	lsrs	r3, r3, #5
 800073c:	2001      	movs	r0, #1
 800073e:	fa00 f202 	lsl.w	r2, r0, r2
 8000742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000746:	bf00      	nop
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	e000e100 	.word	0xe000e100

08000758 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	6039      	str	r1, [r7, #0]
 8000762:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000768:	2b00      	cmp	r3, #0
 800076a:	da0b      	bge.n	8000784 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	b2da      	uxtb	r2, r3
 8000770:	490c      	ldr	r1, [pc, #48]	; (80007a4 <NVIC_SetPriority+0x4c>)
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	f003 030f 	and.w	r3, r3, #15
 8000778:	3b04      	subs	r3, #4
 800077a:	0112      	lsls	r2, r2, #4
 800077c:	b2d2      	uxtb	r2, r2
 800077e:	440b      	add	r3, r1
 8000780:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000782:	e009      	b.n	8000798 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	b2da      	uxtb	r2, r3
 8000788:	4907      	ldr	r1, [pc, #28]	; (80007a8 <NVIC_SetPriority+0x50>)
 800078a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078e:	0112      	lsls	r2, r2, #4
 8000790:	b2d2      	uxtb	r2, r2
 8000792:	440b      	add	r3, r1
 8000794:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000798:	bf00      	nop
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr
 80007a4:	e000ed00 	.word	0xe000ed00
 80007a8:	e000e100 	.word	0xe000e100

080007ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b089      	sub	sp, #36	; 0x24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	f003 0307 	and.w	r3, r3, #7
 80007be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	f1c3 0307 	rsb	r3, r3, #7
 80007c6:	2b04      	cmp	r3, #4
 80007c8:	bf28      	it	cs
 80007ca:	2304      	movcs	r3, #4
 80007cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	3304      	adds	r3, #4
 80007d2:	2b06      	cmp	r3, #6
 80007d4:	d902      	bls.n	80007dc <NVIC_EncodePriority+0x30>
 80007d6:	69fb      	ldr	r3, [r7, #28]
 80007d8:	3b03      	subs	r3, #3
 80007da:	e000      	b.n	80007de <NVIC_EncodePriority+0x32>
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e0:	f04f 32ff 	mov.w	r2, #4294967295
 80007e4:	69bb      	ldr	r3, [r7, #24]
 80007e6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ea:	43da      	mvns	r2, r3
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	401a      	ands	r2, r3
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007f4:	f04f 31ff 	mov.w	r1, #4294967295
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	fa01 f303 	lsl.w	r3, r1, r3
 80007fe:	43d9      	mvns	r1, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000804:	4313      	orrs	r3, r2
         );
}
 8000806:	4618      	mov	r0, r3
 8000808:	3724      	adds	r7, #36	; 0x24
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
	...

08000814 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	3b01      	subs	r3, #1
 8000820:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000824:	d301      	bcc.n	800082a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000826:	2301      	movs	r3, #1
 8000828:	e00f      	b.n	800084a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800082a:	4a0a      	ldr	r2, [pc, #40]	; (8000854 <SysTick_Config+0x40>)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	3b01      	subs	r3, #1
 8000830:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000832:	210f      	movs	r1, #15
 8000834:	f04f 30ff 	mov.w	r0, #4294967295
 8000838:	f7ff ff8e 	bl	8000758 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800083c:	4b05      	ldr	r3, [pc, #20]	; (8000854 <SysTick_Config+0x40>)
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000842:	4b04      	ldr	r3, [pc, #16]	; (8000854 <SysTick_Config+0x40>)
 8000844:	2207      	movs	r2, #7
 8000846:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000848:	2300      	movs	r3, #0
}
 800084a:	4618      	mov	r0, r3
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	e000e010 	.word	0xe000e010

08000858 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000860:	6878      	ldr	r0, [r7, #4]
 8000862:	f7ff ff2d 	bl	80006c0 <NVIC_SetPriorityGrouping>
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800086e:	b580      	push	{r7, lr}
 8000870:	b086      	sub	sp, #24
 8000872:	af00      	add	r7, sp, #0
 8000874:	4603      	mov	r3, r0
 8000876:	60b9      	str	r1, [r7, #8]
 8000878:	607a      	str	r2, [r7, #4]
 800087a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000880:	f7ff ff42 	bl	8000708 <NVIC_GetPriorityGrouping>
 8000884:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000886:	687a      	ldr	r2, [r7, #4]
 8000888:	68b9      	ldr	r1, [r7, #8]
 800088a:	6978      	ldr	r0, [r7, #20]
 800088c:	f7ff ff8e 	bl	80007ac <NVIC_EncodePriority>
 8000890:	4602      	mov	r2, r0
 8000892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000896:	4611      	mov	r1, r2
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff ff5d 	bl	8000758 <NVIC_SetPriority>
}
 800089e:	bf00      	nop
 80008a0:	3718      	adds	r7, #24
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b082      	sub	sp, #8
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	4603      	mov	r3, r0
 80008ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff ff35 	bl	8000724 <NVIC_EnableIRQ>
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b082      	sub	sp, #8
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ca:	6878      	ldr	r0, [r7, #4]
 80008cc:	f7ff ffa2 	bl	8000814 <SysTick_Config>
 80008d0:	4603      	mov	r3, r0
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2b04      	cmp	r3, #4
 80008e8:	d106      	bne.n	80008f8 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80008ea:	4b09      	ldr	r3, [pc, #36]	; (8000910 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4a08      	ldr	r2, [pc, #32]	; (8000910 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80008f0:	f043 0304 	orr.w	r3, r3, #4
 80008f4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80008f6:	e005      	b.n	8000904 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80008f8:	4b05      	ldr	r3, [pc, #20]	; (8000910 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a04      	ldr	r2, [pc, #16]	; (8000910 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80008fe:	f023 0304 	bic.w	r3, r3, #4
 8000902:	6013      	str	r3, [r2, #0]
}
 8000904:	bf00      	nop
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	e000e010 	.word	0xe000e010

08000914 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000918:	f000 f802 	bl	8000920 <HAL_SYSTICK_Callback>
}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}

08000920 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
	...

08000930 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000930:	b480      	push	{r7}
 8000932:	b089      	sub	sp, #36	; 0x24
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800093a:	2300      	movs	r3, #0
 800093c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000942:	2300      	movs	r3, #0
 8000944:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000946:	2300      	movs	r3, #0
 8000948:	61fb      	str	r3, [r7, #28]
 800094a:	e16b      	b.n	8000c24 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800094c:	2201      	movs	r2, #1
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	fa02 f303 	lsl.w	r3, r2, r3
 8000954:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	697a      	ldr	r2, [r7, #20]
 800095c:	4013      	ands	r3, r2
 800095e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000960:	693a      	ldr	r2, [r7, #16]
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	429a      	cmp	r2, r3
 8000966:	f040 815a 	bne.w	8000c1e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	2b02      	cmp	r3, #2
 8000970:	d003      	beq.n	800097a <HAL_GPIO_Init+0x4a>
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	2b12      	cmp	r3, #18
 8000978:	d123      	bne.n	80009c2 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800097a:	69fb      	ldr	r3, [r7, #28]
 800097c:	08da      	lsrs	r2, r3, #3
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	3208      	adds	r2, #8
 8000982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000986:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000988:	69fb      	ldr	r3, [r7, #28]
 800098a:	f003 0307 	and.w	r3, r3, #7
 800098e:	009b      	lsls	r3, r3, #2
 8000990:	220f      	movs	r2, #15
 8000992:	fa02 f303 	lsl.w	r3, r2, r3
 8000996:	43db      	mvns	r3, r3
 8000998:	69ba      	ldr	r2, [r7, #24]
 800099a:	4013      	ands	r3, r2
 800099c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	691a      	ldr	r2, [r3, #16]
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	f003 0307 	and.w	r3, r3, #7
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	fa02 f303 	lsl.w	r3, r2, r3
 80009ae:	69ba      	ldr	r2, [r7, #24]
 80009b0:	4313      	orrs	r3, r2
 80009b2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	08da      	lsrs	r2, r3, #3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3208      	adds	r2, #8
 80009bc:	69b9      	ldr	r1, [r7, #24]
 80009be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	2203      	movs	r2, #3
 80009ce:	fa02 f303 	lsl.w	r3, r2, r3
 80009d2:	43db      	mvns	r3, r3
 80009d4:	69ba      	ldr	r2, [r7, #24]
 80009d6:	4013      	ands	r3, r2
 80009d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	f003 0203 	and.w	r2, r3, #3
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ea:	69ba      	ldr	r2, [r7, #24]
 80009ec:	4313      	orrs	r3, r2
 80009ee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	69ba      	ldr	r2, [r7, #24]
 80009f4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d00b      	beq.n	8000a16 <HAL_GPIO_Init+0xe6>
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	2b02      	cmp	r3, #2
 8000a04:	d007      	beq.n	8000a16 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a0a:	2b11      	cmp	r3, #17
 8000a0c:	d003      	beq.n	8000a16 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	2b12      	cmp	r3, #18
 8000a14:	d130      	bne.n	8000a78 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	689b      	ldr	r3, [r3, #8]
 8000a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a1c:	69fb      	ldr	r3, [r7, #28]
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	2203      	movs	r2, #3
 8000a22:	fa02 f303 	lsl.w	r3, r2, r3
 8000a26:	43db      	mvns	r3, r3
 8000a28:	69ba      	ldr	r2, [r7, #24]
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	68da      	ldr	r2, [r3, #12]
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3a:	69ba      	ldr	r2, [r7, #24]
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	69ba      	ldr	r2, [r7, #24]
 8000a44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	fa02 f303 	lsl.w	r3, r2, r3
 8000a54:	43db      	mvns	r3, r3
 8000a56:	69ba      	ldr	r2, [r7, #24]
 8000a58:	4013      	ands	r3, r2
 8000a5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	091b      	lsrs	r3, r3, #4
 8000a62:	f003 0201 	and.w	r2, r3, #1
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6c:	69ba      	ldr	r2, [r7, #24]
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	69ba      	ldr	r2, [r7, #24]
 8000a76:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a7e:	69fb      	ldr	r3, [r7, #28]
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	2203      	movs	r2, #3
 8000a84:	fa02 f303 	lsl.w	r3, r2, r3
 8000a88:	43db      	mvns	r3, r3
 8000a8a:	69ba      	ldr	r2, [r7, #24]
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	689a      	ldr	r2, [r3, #8]
 8000a94:	69fb      	ldr	r3, [r7, #28]
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9c:	69ba      	ldr	r2, [r7, #24]
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	69ba      	ldr	r2, [r7, #24]
 8000aa6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	f000 80b4 	beq.w	8000c1e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	4b60      	ldr	r3, [pc, #384]	; (8000c3c <HAL_GPIO_Init+0x30c>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abe:	4a5f      	ldr	r2, [pc, #380]	; (8000c3c <HAL_GPIO_Init+0x30c>)
 8000ac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ac6:	4b5d      	ldr	r3, [pc, #372]	; (8000c3c <HAL_GPIO_Init+0x30c>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ad2:	4a5b      	ldr	r2, [pc, #364]	; (8000c40 <HAL_GPIO_Init+0x310>)
 8000ad4:	69fb      	ldr	r3, [r7, #28]
 8000ad6:	089b      	lsrs	r3, r3, #2
 8000ad8:	3302      	adds	r3, #2
 8000ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ae0:	69fb      	ldr	r3, [r7, #28]
 8000ae2:	f003 0303 	and.w	r3, r3, #3
 8000ae6:	009b      	lsls	r3, r3, #2
 8000ae8:	220f      	movs	r2, #15
 8000aea:	fa02 f303 	lsl.w	r3, r2, r3
 8000aee:	43db      	mvns	r3, r3
 8000af0:	69ba      	ldr	r2, [r7, #24]
 8000af2:	4013      	ands	r3, r2
 8000af4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4a52      	ldr	r2, [pc, #328]	; (8000c44 <HAL_GPIO_Init+0x314>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d02b      	beq.n	8000b56 <HAL_GPIO_Init+0x226>
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4a51      	ldr	r2, [pc, #324]	; (8000c48 <HAL_GPIO_Init+0x318>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d025      	beq.n	8000b52 <HAL_GPIO_Init+0x222>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4a50      	ldr	r2, [pc, #320]	; (8000c4c <HAL_GPIO_Init+0x31c>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d01f      	beq.n	8000b4e <HAL_GPIO_Init+0x21e>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4a4f      	ldr	r2, [pc, #316]	; (8000c50 <HAL_GPIO_Init+0x320>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d019      	beq.n	8000b4a <HAL_GPIO_Init+0x21a>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4a4e      	ldr	r2, [pc, #312]	; (8000c54 <HAL_GPIO_Init+0x324>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d013      	beq.n	8000b46 <HAL_GPIO_Init+0x216>
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4a4d      	ldr	r2, [pc, #308]	; (8000c58 <HAL_GPIO_Init+0x328>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d00d      	beq.n	8000b42 <HAL_GPIO_Init+0x212>
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4a4c      	ldr	r2, [pc, #304]	; (8000c5c <HAL_GPIO_Init+0x32c>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d007      	beq.n	8000b3e <HAL_GPIO_Init+0x20e>
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4a4b      	ldr	r2, [pc, #300]	; (8000c60 <HAL_GPIO_Init+0x330>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d101      	bne.n	8000b3a <HAL_GPIO_Init+0x20a>
 8000b36:	2307      	movs	r3, #7
 8000b38:	e00e      	b.n	8000b58 <HAL_GPIO_Init+0x228>
 8000b3a:	2308      	movs	r3, #8
 8000b3c:	e00c      	b.n	8000b58 <HAL_GPIO_Init+0x228>
 8000b3e:	2306      	movs	r3, #6
 8000b40:	e00a      	b.n	8000b58 <HAL_GPIO_Init+0x228>
 8000b42:	2305      	movs	r3, #5
 8000b44:	e008      	b.n	8000b58 <HAL_GPIO_Init+0x228>
 8000b46:	2304      	movs	r3, #4
 8000b48:	e006      	b.n	8000b58 <HAL_GPIO_Init+0x228>
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	e004      	b.n	8000b58 <HAL_GPIO_Init+0x228>
 8000b4e:	2302      	movs	r3, #2
 8000b50:	e002      	b.n	8000b58 <HAL_GPIO_Init+0x228>
 8000b52:	2301      	movs	r3, #1
 8000b54:	e000      	b.n	8000b58 <HAL_GPIO_Init+0x228>
 8000b56:	2300      	movs	r3, #0
 8000b58:	69fa      	ldr	r2, [r7, #28]
 8000b5a:	f002 0203 	and.w	r2, r2, #3
 8000b5e:	0092      	lsls	r2, r2, #2
 8000b60:	4093      	lsls	r3, r2
 8000b62:	69ba      	ldr	r2, [r7, #24]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b68:	4935      	ldr	r1, [pc, #212]	; (8000c40 <HAL_GPIO_Init+0x310>)
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	089b      	lsrs	r3, r3, #2
 8000b6e:	3302      	adds	r3, #2
 8000b70:	69ba      	ldr	r2, [r7, #24]
 8000b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b76:	4b3b      	ldr	r3, [pc, #236]	; (8000c64 <HAL_GPIO_Init+0x334>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	43db      	mvns	r3, r3
 8000b80:	69ba      	ldr	r2, [r7, #24]
 8000b82:	4013      	ands	r3, r2
 8000b84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d003      	beq.n	8000b9a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000b92:	69ba      	ldr	r2, [r7, #24]
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	4313      	orrs	r3, r2
 8000b98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b9a:	4a32      	ldr	r2, [pc, #200]	; (8000c64 <HAL_GPIO_Init+0x334>)
 8000b9c:	69bb      	ldr	r3, [r7, #24]
 8000b9e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ba0:	4b30      	ldr	r3, [pc, #192]	; (8000c64 <HAL_GPIO_Init+0x334>)
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	43db      	mvns	r3, r3
 8000baa:	69ba      	ldr	r2, [r7, #24]
 8000bac:	4013      	ands	r3, r2
 8000bae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d003      	beq.n	8000bc4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000bbc:	69ba      	ldr	r2, [r7, #24]
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000bc4:	4a27      	ldr	r2, [pc, #156]	; (8000c64 <HAL_GPIO_Init+0x334>)
 8000bc6:	69bb      	ldr	r3, [r7, #24]
 8000bc8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bca:	4b26      	ldr	r3, [pc, #152]	; (8000c64 <HAL_GPIO_Init+0x334>)
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	43db      	mvns	r3, r3
 8000bd4:	69ba      	ldr	r2, [r7, #24]
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d003      	beq.n	8000bee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000be6:	69ba      	ldr	r2, [r7, #24]
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000bee:	4a1d      	ldr	r2, [pc, #116]	; (8000c64 <HAL_GPIO_Init+0x334>)
 8000bf0:	69bb      	ldr	r3, [r7, #24]
 8000bf2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bf4:	4b1b      	ldr	r3, [pc, #108]	; (8000c64 <HAL_GPIO_Init+0x334>)
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bfa:	693b      	ldr	r3, [r7, #16]
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	69ba      	ldr	r2, [r7, #24]
 8000c00:	4013      	ands	r3, r2
 8000c02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d003      	beq.n	8000c18 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000c10:	69ba      	ldr	r2, [r7, #24]
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000c18:	4a12      	ldr	r2, [pc, #72]	; (8000c64 <HAL_GPIO_Init+0x334>)
 8000c1a:	69bb      	ldr	r3, [r7, #24]
 8000c1c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	3301      	adds	r3, #1
 8000c22:	61fb      	str	r3, [r7, #28]
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	2b0f      	cmp	r3, #15
 8000c28:	f67f ae90 	bls.w	800094c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000c2c:	bf00      	nop
 8000c2e:	bf00      	nop
 8000c30:	3724      	adds	r7, #36	; 0x24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40013800 	.word	0x40013800
 8000c44:	40020000 	.word	0x40020000
 8000c48:	40020400 	.word	0x40020400
 8000c4c:	40020800 	.word	0x40020800
 8000c50:	40020c00 	.word	0x40020c00
 8000c54:	40021000 	.word	0x40021000
 8000c58:	40021400 	.word	0x40021400
 8000c5c:	40021800 	.word	0x40021800
 8000c60:	40021c00 	.word	0x40021c00
 8000c64:	40013c00 	.word	0x40013c00

08000c68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	460b      	mov	r3, r1
 8000c72:	807b      	strh	r3, [r7, #2]
 8000c74:	4613      	mov	r3, r2
 8000c76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c78:	787b      	ldrb	r3, [r7, #1]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d003      	beq.n	8000c86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c7e:	887a      	ldrh	r2, [r7, #2]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000c84:	e003      	b.n	8000c8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c86:	887b      	ldrh	r3, [r7, #2]
 8000c88:	041a      	lsls	r2, r3, #16
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	619a      	str	r2, [r3, #24]
}
 8000c8e:	bf00      	nop
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
	...

08000c9c <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d101      	bne.n	8000cb6 <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e0c9      	b.n	8000e4a <HAL_I2C_Init+0x1ae>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d106      	bne.n	8000cd0 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f007 f89e 	bl	8007e0c <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2224      	movs	r2, #36	; 0x24
 8000cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f022 0201 	bic.w	r2, r2, #1
 8000ce6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000ce8:	f002 fa76 	bl	80031d8 <HAL_RCC_GetPCLK1Freq>
 8000cec:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	4a58      	ldr	r2, [pc, #352]	; (8000e54 <HAL_I2C_Init+0x1b8>)
 8000cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf6:	0c9b      	lsrs	r3, r3, #18
 8000cf8:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	4a54      	ldr	r2, [pc, #336]	; (8000e58 <HAL_I2C_Init+0x1bc>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d802      	bhi.n	8000d12 <HAL_I2C_Init+0x76>
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	e009      	b.n	8000d26 <HAL_I2C_Init+0x8a>
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000d18:	fb02 f303 	mul.w	r3, r2, r3
 8000d1c:	4a4f      	ldr	r2, [pc, #316]	; (8000e5c <HAL_I2C_Init+0x1c0>)
 8000d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d22:	099b      	lsrs	r3, r3, #6
 8000d24:	3301      	adds	r3, #1
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	6812      	ldr	r2, [r2, #0]
 8000d2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	4a49      	ldr	r2, [pc, #292]	; (8000e58 <HAL_I2C_Init+0x1bc>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d813      	bhi.n	8000d5e <HAL_I2C_Init+0xc2>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	68ba      	ldr	r2, [r7, #8]
 8000d3e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000d42:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000d46:	4013      	ands	r3, r2
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d006      	beq.n	8000d5a <HAL_I2C_Init+0xbe>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	68ba      	ldr	r2, [r7, #8]
 8000d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d58:	e045      	b.n	8000de6 <HAL_I2C_Init+0x14a>
 8000d5a:	2304      	movs	r3, #4
 8000d5c:	e043      	b.n	8000de6 <HAL_I2C_Init+0x14a>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	689b      	ldr	r3, [r3, #8]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d10f      	bne.n	8000d86 <HAL_I2C_Init+0xea>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	685a      	ldr	r2, [r3, #4]
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	4413      	add	r3, r2
 8000d70:	68ba      	ldr	r2, [r7, #8]
 8000d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	bf0c      	ite	eq
 8000d7e:	2301      	moveq	r3, #1
 8000d80:	2300      	movne	r3, #0
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	e010      	b.n	8000da8 <HAL_I2C_Init+0x10c>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	685a      	ldr	r2, [r3, #4]
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	4413      	add	r3, r2
 8000d90:	009a      	lsls	r2, r3, #2
 8000d92:	4413      	add	r3, r2
 8000d94:	68ba      	ldr	r2, [r7, #8]
 8000d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	bf0c      	ite	eq
 8000da2:	2301      	moveq	r3, #1
 8000da4:	2300      	movne	r3, #0
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <HAL_I2C_Init+0x114>
 8000dac:	2301      	movs	r3, #1
 8000dae:	e01a      	b.n	8000de6 <HAL_I2C_Init+0x14a>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	689b      	ldr	r3, [r3, #8]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d10a      	bne.n	8000dce <HAL_I2C_Init+0x132>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	685a      	ldr	r2, [r3, #4]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	4413      	add	r3, r2
 8000dc2:	68ba      	ldr	r2, [r7, #8]
 8000dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dcc:	e00b      	b.n	8000de6 <HAL_I2C_Init+0x14a>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	685a      	ldr	r2, [r3, #4]
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	4413      	add	r3, r2
 8000dd8:	009a      	lsls	r2, r3, #2
 8000dda:	4413      	add	r3, r2
 8000ddc:	68ba      	ldr	r2, [r7, #8]
 8000dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	6812      	ldr	r2, [r2, #0]
 8000dea:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	69d9      	ldr	r1, [r3, #28]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6a1a      	ldr	r2, [r3, #32]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	430a      	orrs	r2, r1
 8000dfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6919      	ldr	r1, [r3, #16]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	68da      	ldr	r2, [r3, #12]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	430a      	orrs	r2, r1
 8000e0a:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6959      	ldr	r1, [r3, #20]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	699a      	ldr	r2, [r3, #24]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	430a      	orrs	r2, r1
 8000e1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f042 0201 	orr.w	r2, r2, #1
 8000e2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2220      	movs	r2, #32
 8000e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2200      	movs	r2, #0
 8000e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3710      	adds	r7, #16
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	431bde83 	.word	0x431bde83
 8000e58:	000186a0 	.word	0x000186a0
 8000e5c:	10624dd3 	.word	0x10624dd3

08000e60 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b088      	sub	sp, #32
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0U, i2sdiv = 2U, i2sodd = 0U, packetlength = 16U;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	61fb      	str	r3, [r7, #28]
 8000e70:	2300      	movs	r3, #0
 8000e72:	61bb      	str	r3, [r7, #24]
 8000e74:	2310      	movs	r3, #16
 8000e76:	617b      	str	r3, [r7, #20]
  uint32_t tmp = 0U, i2sclk = 0U;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60bb      	str	r3, [r7, #8]

  /* Check the I2S handle allocation */
  if(hi2s == NULL)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d101      	bne.n	8000e8a <HAL_I2S_Init+0x2a>
  {
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e12c      	b.n	80010e4 <HAL_I2S_Init+0x284>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  hi2s->State = HAL_I2S_STATE_BUSY;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2202      	movs	r2, #2
 8000e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Initialize Default I2S IrqHandler ISR */
  hi2s->IrqHandlerISR = I2S_IRQHandler;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a95      	ldr	r2, [pc, #596]	; (80010ec <HAL_I2S_Init+0x28c>)
 8000e96:	635a      	str	r2, [r3, #52]	; 0x34

  /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
  HAL_I2S_MspInit(hi2s);
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f006 ffe9 	bl	8007e70 <HAL_I2S_MspInit>

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ---------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR,(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	69db      	ldr	r3, [r3, #28]
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	6812      	ldr	r2, [r2, #0]
 8000ea8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8000eac:	f023 030f 	bic.w	r3, r3, #15
 8000eb0:	61d3      	str	r3, [r2, #28]
                                     SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                     SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2202      	movs	r2, #2
 8000eb8:	621a      	str	r2, [r3, #32]

  /* Get the I2SCFGR register value */
  tmpreg = hi2s->Instance->I2SCFGR;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	69db      	ldr	r3, [r3, #28]
 8000ec0:	60fb      	str	r3, [r7, #12]

  /* If the default frequency value has to be written, reinitialize i2sdiv and i2sodd */
  /* If the requested audio frequency is not the default, compute the prescaler */
  if(hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	695b      	ldr	r3, [r3, #20]
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d061      	beq.n	8000f8e <HAL_I2S_Init+0x12e>
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    /* Set I2S Packet Length value*/
    if(hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d002      	beq.n	8000ed8 <HAL_I2S_Init+0x78>
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8000ed2:	2320      	movs	r3, #32
 8000ed4:	617b      	str	r3, [r7, #20]
 8000ed6:	e001      	b.n	8000edc <HAL_I2S_Init+0x7c>
    }
    else
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8000ed8:	2310      	movs	r3, #16
 8000eda:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if(hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	2b20      	cmp	r3, #32
 8000ee2:	d802      	bhi.n	8000eea <HAL_I2S_Init+0x8a>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8000eea:	2001      	movs	r0, #1
 8000eec:	f002 fa6a 	bl	80033c4 <HAL_RCCEx_GetPeriphCLKFreq>
 8000ef0:	60b8      	str	r0, [r7, #8]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	691b      	ldr	r3, [r3, #16]
 8000ef6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000efa:	d125      	bne.n	8000f48 <HAL_I2S_Init+0xe8>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d010      	beq.n	8000f26 <HAL_I2S_Init+0xc6>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength*4)) * 10) / hi2s->Init.AudioFreq)) + 5);
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	68ba      	ldr	r2, [r7, #8]
 8000f0a:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f0e:	4613      	mov	r3, r2
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	4413      	add	r3, r2
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	461a      	mov	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	695b      	ldr	r3, [r3, #20]
 8000f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f20:	3305      	adds	r3, #5
 8000f22:	613b      	str	r3, [r7, #16]
 8000f24:	e01f      	b.n	8000f66 <HAL_I2S_Init+0x106>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength*8)) * 10) / hi2s->Init.AudioFreq)) + 5);
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	00db      	lsls	r3, r3, #3
 8000f2a:	68ba      	ldr	r2, [r7, #8]
 8000f2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f30:	4613      	mov	r3, r2
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	4413      	add	r3, r2
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	461a      	mov	r2, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	695b      	ldr	r3, [r3, #20]
 8000f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f42:	3305      	adds	r3, #5
 8000f44:	613b      	str	r3, [r7, #16]
 8000f46:	e00e      	b.n	8000f66 <HAL_I2S_Init+0x106>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) *10 ) / hi2s->Init.AudioFreq)) + 5);
 8000f48:	68ba      	ldr	r2, [r7, #8]
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f50:	4613      	mov	r3, r2
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	4413      	add	r3, r2
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	461a      	mov	r2, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f62:	3305      	adds	r3, #5
 8000f64:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	4a61      	ldr	r2, [pc, #388]	; (80010f0 <HAL_I2S_Init+0x290>)
 8000f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f6e:	08db      	lsrs	r3, r3, #3
 8000f70:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)1U);
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2U);
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	085b      	lsrs	r3, r3, #1
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t) (i2sodd << 8U);
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	021b      	lsls	r3, r3, #8
 8000f8c:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d902      	bls.n	8000f9a <HAL_I2S_Init+0x13a>
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	2bff      	cmp	r3, #255	; 0xff
 8000f98:	d90e      	bls.n	8000fb8 <HAL_I2S_Init+0x158>
  {
    /* Set the default values */
    i2sdiv = 2U;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61bb      	str	r3, [r7, #24]

    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa6:	f043 0210 	orr.w	r2, r3, #16
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	645a      	str	r2, [r3, #68]	; 0x44
    HAL_I2S_ErrorCallback(hi2s);
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f000 f8ba 	bl	8001128 <HAL_I2S_ErrorCallback>
    return  HAL_ERROR;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e095      	b.n	80010e4 <HAL_I2S_Init+0x284>
  }

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	691a      	ldr	r2, [r3, #16]
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	ea42 0103 	orr.w	r1, r2, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	69fa      	ldr	r2, [r7, #28]
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	621a      	str	r2, [r3, #32]

  /* Configure the I2S with the I2S_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(hi2s->Init.Mode | \
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	b29a      	uxth	r2, r3
                       (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	b299      	uxth	r1, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	b298      	uxth	r0, r3
                       (uint16_t)hi2s->Init.CPOL))));
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	699b      	ldr	r3, [r3, #24]
 8000fe2:	b29b      	uxth	r3, r3
                       (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8000fe4:	4303      	orrs	r3, r0
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	430b      	orrs	r3, r1
 8000fea:	b29b      	uxth	r3, r3
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(hi2s->Init.Mode | \
 8000fec:	4313      	orrs	r3, r2
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	60fb      	str	r3, [r7, #12]
  /* Write to SPIx I2SCFGR */
    WRITE_REG(hi2s->Instance->I2SCFGR,tmpreg);
  }
#else
  /* Write to SPIx I2SCFGR */
  WRITE_REG(hi2s->Instance->I2SCFGR, tmpreg);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	68fa      	ldr	r2, [r7, #12]
 8001004:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if(hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6a1b      	ldr	r3, [r3, #32]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d162      	bne.n	80010d4 <HAL_I2S_Init+0x274>
  {
  	/* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a38      	ldr	r2, [pc, #224]	; (80010f4 <HAL_I2S_Init+0x294>)
 8001012:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR,(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a37      	ldr	r2, [pc, #220]	; (80010f8 <HAL_I2S_Init+0x298>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d101      	bne.n	8001022 <HAL_I2S_Init+0x1c2>
 800101e:	4b37      	ldr	r3, [pc, #220]	; (80010fc <HAL_I2S_Init+0x29c>)
 8001020:	e001      	b.n	8001026 <HAL_I2S_Init+0x1c6>
 8001022:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001026:	69db      	ldr	r3, [r3, #28]
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	6812      	ldr	r2, [r2, #0]
 800102c:	4932      	ldr	r1, [pc, #200]	; (80010f8 <HAL_I2S_Init+0x298>)
 800102e:	428a      	cmp	r2, r1
 8001030:	d101      	bne.n	8001036 <HAL_I2S_Init+0x1d6>
 8001032:	4a32      	ldr	r2, [pc, #200]	; (80010fc <HAL_I2S_Init+0x29c>)
 8001034:	e001      	b.n	800103a <HAL_I2S_Init+0x1da>
 8001036:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800103a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800103e:	f023 030f 	bic.w	r3, r3, #15
 8001042:	61d3      	str	r3, [r2, #28]
                                                SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a2b      	ldr	r2, [pc, #172]	; (80010f8 <HAL_I2S_Init+0x298>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d101      	bne.n	8001052 <HAL_I2S_Init+0x1f2>
 800104e:	4b2b      	ldr	r3, [pc, #172]	; (80010fc <HAL_I2S_Init+0x29c>)
 8001050:	e001      	b.n	8001056 <HAL_I2S_Init+0x1f6>
 8001052:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001056:	2202      	movs	r2, #2
 8001058:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a26      	ldr	r2, [pc, #152]	; (80010f8 <HAL_I2S_Init+0x298>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d101      	bne.n	8001068 <HAL_I2S_Init+0x208>
 8001064:	4b25      	ldr	r3, [pc, #148]	; (80010fc <HAL_I2S_Init+0x29c>)
 8001066:	e001      	b.n	800106c <HAL_I2S_Init+0x20c>
 8001068:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	60fb      	str	r3, [r7, #12]

    /* Get the mode to be configured for the extended I2S */
    if((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001078:	d003      	beq.n	8001082 <HAL_I2S_Init+0x222>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d103      	bne.n	800108a <HAL_I2S_Init+0x22a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001082:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001086:	613b      	str	r3, [r7, #16]
 8001088:	e001      	b.n	800108e <HAL_I2S_Init+0x22e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	b299      	uxth	r1, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	b298      	uxth	r0, r3
                         (uint16_t)hi2s->Init.CPOL))));
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	699b      	ldr	r3, [r3, #24]
 80010a2:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80010a4:	4303      	orrs	r3, r0
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	430b      	orrs	r3, r1
 80010aa:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80010ac:	4313      	orrs	r3, r2
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	461a      	mov	r2, r3
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	60fb      	str	r3, [r7, #12]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR,tmpreg);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a0d      	ldr	r2, [pc, #52]	; (80010f8 <HAL_I2S_Init+0x298>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d101      	bne.n	80010cc <HAL_I2S_Init+0x26c>
 80010c8:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <HAL_I2S_Init+0x29c>)
 80010ca:	e001      	b.n	80010d0 <HAL_I2S_Init+0x270>
 80010cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80010d0:	68fa      	ldr	r2, [r7, #12]
 80010d2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2201      	movs	r2, #1
 80010de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80010e2:	2300      	movs	r3, #0
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3720      	adds	r7, #32
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	080011f3 	.word	0x080011f3
 80010f0:	cccccccd 	.word	0xcccccccd
 80010f4:	0800130d 	.word	0x0800130d
 80010f8:	40003800 	.word	0x40003800
 80010fc:	40003400 	.word	0x40003400

08001100 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
 __weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hi2s);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hi2s);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
 __weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hi2s);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001148:	1c99      	adds	r1, r3, #2
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	6251      	str	r1, [r2, #36]	; 0x24
 800114e:	881a      	ldrh	r2, [r3, #0]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800115a:	b29b      	uxth	r3, r3
 800115c:	3b01      	subs	r3, #1
 800115e:	b29a      	uxth	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	855a      	strh	r2, [r3, #42]	; 0x2a

  if(hi2s->TxXferCount == 0U)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001168:	b29b      	uxth	r3, r3
 800116a:	2b00      	cmp	r3, #0
 800116c:	d10f      	bne.n	800118e <I2S_Transmit_IT+0x52>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	6859      	ldr	r1, [r3, #4]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	f64f 735f 	movw	r3, #65375	; 0xff5f
 800117c:	400b      	ands	r3, r1
 800117e:	6053      	str	r3, [r2, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2201      	movs	r2, #1
 8001184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff ffb9 	bl	8001100 <HAL_I2S_TxCpltCallback>
  }
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	68d8      	ldr	r0, [r3, #12]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a8:	1c99      	adds	r1, r3, #2
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	62d1      	str	r1, [r2, #44]	; 0x2c
 80011ae:	b282      	uxth	r2, r0
 80011b0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	3b01      	subs	r3, #1
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	865a      	strh	r2, [r3, #50]	; 0x32

  if(hi2s->RxXferCount == 0U)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d10f      	bne.n	80011ea <I2S_Receive_IT+0x54>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	6859      	ldr	r1, [r3, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	f64f 739f 	movw	r3, #65439	; 0xff9f
 80011d8:	400b      	ands	r3, r1
 80011da:	6053      	str	r3, [r2, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2201      	movs	r2, #1
 80011e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f7ff ff95 	bl	8001114 <HAL_I2S_RxCpltCallback>
  }
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b086      	sub	sp, #24
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	617b      	str	r3, [r7, #20]

  if(hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001208:	b2db      	uxtb	r3, r3
 800120a:	2b04      	cmp	r3, #4
 800120c:	d13b      	bne.n	8001286 <I2S_IRQHandler+0x94>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if(((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	f003 0301 	and.w	r3, r3, #1
 8001214:	2b01      	cmp	r3, #1
 8001216:	d109      	bne.n	800122c <I2S_IRQHandler+0x3a>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001222:	2b40      	cmp	r3, #64	; 0x40
 8001224:	d102      	bne.n	800122c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff ffb5 	bl	8001196 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occured -------------------------------------*/
    if(((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001232:	2b40      	cmp	r3, #64	; 0x40
 8001234:	d127      	bne.n	8001286 <I2S_IRQHandler+0x94>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f003 0320 	and.w	r3, r3, #32
 8001240:	2b20      	cmp	r3, #32
 8001242:	d120      	bne.n	8001286 <I2S_IRQHandler+0x94>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	6859      	ldr	r1, [r3, #4]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	f64f 739f 	movw	r3, #65439	; 0xff9f
 8001252:	400b      	ands	r3, r1
 8001254:	6053      	str	r3, [r2, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	613b      	str	r3, [r7, #16]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2201      	movs	r2, #1
 8001270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001278:	f043 0202 	orr.w	r2, r3, #2
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	645a      	str	r2, [r3, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f7ff ff51 	bl	8001128 <HAL_I2S_ErrorCallback>
      }
    }

    if(hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b03      	cmp	r3, #3
 8001290:	d137      	bne.n	8001302 <I2S_IRQHandler+0x110>
    {
      /* I2S in mode Transmitter -----------------------------------------------*/
    if(((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	f003 0302 	and.w	r3, r3, #2
 8001298:	2b02      	cmp	r3, #2
 800129a:	d109      	bne.n	80012b0 <I2S_IRQHandler+0xbe>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012a6:	2b80      	cmp	r3, #128	; 0x80
 80012a8:	d102      	bne.n	80012b0 <I2S_IRQHandler+0xbe>
      {
        I2S_Transmit_IT(hi2s);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff ff46 	bl	800113c <I2S_Transmit_IT>
      }

      /* I2S Underrun error interrupt occurred --------------------------------*/
    if(((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	f003 0308 	and.w	r3, r3, #8
 80012b6:	2b08      	cmp	r3, #8
 80012b8:	d123      	bne.n	8001302 <I2S_IRQHandler+0x110>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f003 0320 	and.w	r3, r3, #32
 80012c4:	2b20      	cmp	r3, #32
 80012c6:	d11c      	bne.n	8001302 <I2S_IRQHandler+0x110>
      {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	6859      	ldr	r1, [r3, #4]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	f64f 735f 	movw	r3, #65375	; 0xff5f
 80012d6:	400b      	ands	r3, r1
 80012d8:	6053      	str	r3, [r2, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2201      	movs	r2, #1
 80012ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f4:	f043 0204 	orr.w	r2, r3, #4
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	645a      	str	r2, [r3, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff ff13 	bl	8001128 <HAL_I2S_ErrorCallback>
    }
  }
}
 8001302:	bf00      	nop
 8001304:	3718      	adds	r7, #24
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
	...

0800130c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr    = hi2s->Instance->SR ;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextsr = I2SxEXT(hi2s->Instance)->SR;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a8c      	ldr	r2, [pc, #560]	; (8001554 <HAL_I2SEx_FullDuplex_IRQHandler+0x248>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d101      	bne.n	800132a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001326:	4b8c      	ldr	r3, [pc, #560]	; (8001558 <HAL_I2SEx_FullDuplex_IRQHandler+0x24c>)
 8001328:	e001      	b.n	800132e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800132a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	69db      	ldr	r3, [r3, #28]
 8001338:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800133c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001340:	d007      	beq.n	8001352 <HAL_I2SEx_FullDuplex_IRQHandler+0x46>
      || ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	69db      	ldr	r3, [r3, #28]
 8001348:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800134c:	2b00      	cmp	r3, #0
 800134e:	f040 80b3 	bne.w	80014b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ac>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if(((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	2b02      	cmp	r3, #2
 800135a:	d10a      	bne.n	8001372 <HAL_I2SEx_FullDuplex_IRQHandler+0x66>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001366:	2b80      	cmp	r3, #128	; 0x80
 8001368:	d103      	bne.n	8001372 <HAL_I2SEx_FullDuplex_IRQHandler+0x66>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_FullDuplexTx_IT(hi2s, I2S_USE_I2S);
 800136a:	2100      	movs	r1, #0
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f000 f95b 	bl	8001628 <I2SEx_FullDuplexTx_IT>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if(((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	2b01      	cmp	r3, #1
 800137a:	d111      	bne.n	80013a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x94>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a74      	ldr	r2, [pc, #464]	; (8001554 <HAL_I2SEx_FullDuplex_IRQHandler+0x248>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d101      	bne.n	800138a <HAL_I2SEx_FullDuplex_IRQHandler+0x7e>
 8001386:	4b74      	ldr	r3, [pc, #464]	; (8001558 <HAL_I2SEx_FullDuplex_IRQHandler+0x24c>)
 8001388:	e001      	b.n	800138e <HAL_I2SEx_FullDuplex_IRQHandler+0x82>
 800138a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001394:	2b40      	cmp	r3, #64	; 0x40
 8001396:	d103      	bne.n	80013a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x94>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_FullDuplexRx_IT(hi2s, I2S_USE_I2SEXT);
 8001398:	2101      	movs	r1, #1
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f000 f9c0 	bl	8001720 <I2SEx_FullDuplexRx_IT>
    }

    /* I2Sext Overrun error interrupt occured --------------------------------*/
    if(((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013a6:	2b40      	cmp	r3, #64	; 0x40
 80013a8:	d144      	bne.n	8001434 <HAL_I2SEx_FullDuplex_IRQHandler+0x128>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a69      	ldr	r2, [pc, #420]	; (8001554 <HAL_I2SEx_FullDuplex_IRQHandler+0x248>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d101      	bne.n	80013b8 <HAL_I2SEx_FullDuplex_IRQHandler+0xac>
 80013b4:	4b68      	ldr	r3, [pc, #416]	; (8001558 <HAL_I2SEx_FullDuplex_IRQHandler+0x24c>)
 80013b6:	e001      	b.n	80013bc <HAL_I2SEx_FullDuplex_IRQHandler+0xb0>
 80013b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f003 0320 	and.w	r3, r3, #32
 80013c2:	2b20      	cmp	r3, #32
 80013c4:	d136      	bne.n	8001434 <HAL_I2SEx_FullDuplex_IRQHandler+0x128>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a62      	ldr	r2, [pc, #392]	; (8001554 <HAL_I2SEx_FullDuplex_IRQHandler+0x248>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d101      	bne.n	80013d4 <HAL_I2SEx_FullDuplex_IRQHandler+0xc8>
 80013d0:	4b61      	ldr	r3, [pc, #388]	; (8001558 <HAL_I2SEx_FullDuplex_IRQHandler+0x24c>)
 80013d2:	e001      	b.n	80013d8 <HAL_I2SEx_FullDuplex_IRQHandler+0xcc>
 80013d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80013d8:	685a      	ldr	r2, [r3, #4]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	495d      	ldr	r1, [pc, #372]	; (8001554 <HAL_I2SEx_FullDuplex_IRQHandler+0x248>)
 80013e0:	428b      	cmp	r3, r1
 80013e2:	d101      	bne.n	80013e8 <HAL_I2SEx_FullDuplex_IRQHandler+0xdc>
 80013e4:	4b5c      	ldr	r3, [pc, #368]	; (8001558 <HAL_I2SEx_FullDuplex_IRQHandler+0x24c>)
 80013e6:	e001      	b.n	80013ec <HAL_I2SEx_FullDuplex_IRQHandler+0xe0>
 80013e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80013ec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80013f0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	6859      	ldr	r1, [r3, #4]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	f64f 735f 	movw	r3, #65375	; 0xff5f
 8001400:	400b      	ands	r3, r1
 8001402:	6053      	str	r3, [r2, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001404:	2300      	movs	r3, #0
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2201      	movs	r2, #1
 800141e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001426:	f043 0202 	orr.w	r2, r3, #2
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	645a      	str	r2, [r3, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff fe7a 	bl	8001128 <HAL_I2S_ErrorCallback>
    }

    /* I2S Underrun error interrupt occured ----------------------------------*/
    if(((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	f003 0308 	and.w	r3, r3, #8
 800143a:	2b08      	cmp	r3, #8
 800143c:	f040 80e0 	bne.w	8001600 <HAL_I2SEx_FullDuplex_IRQHandler+0x2f4>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f003 0320 	and.w	r3, r3, #32
 800144a:	2b20      	cmp	r3, #32
 800144c:	f040 80d8 	bne.w	8001600 <HAL_I2SEx_FullDuplex_IRQHandler+0x2f4>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6859      	ldr	r1, [r3, #4]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	f64f 735f 	movw	r3, #65375	; 0xff5f
 800145e:	400b      	ands	r3, r1
 8001460:	6053      	str	r3, [r2, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a3b      	ldr	r2, [pc, #236]	; (8001554 <HAL_I2SEx_FullDuplex_IRQHandler+0x248>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d101      	bne.n	8001470 <HAL_I2SEx_FullDuplex_IRQHandler+0x164>
 800146c:	4b3a      	ldr	r3, [pc, #232]	; (8001558 <HAL_I2SEx_FullDuplex_IRQHandler+0x24c>)
 800146e:	e001      	b.n	8001474 <HAL_I2SEx_FullDuplex_IRQHandler+0x168>
 8001470:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001474:	685a      	ldr	r2, [r3, #4]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4936      	ldr	r1, [pc, #216]	; (8001554 <HAL_I2SEx_FullDuplex_IRQHandler+0x248>)
 800147c:	428b      	cmp	r3, r1
 800147e:	d101      	bne.n	8001484 <HAL_I2SEx_FullDuplex_IRQHandler+0x178>
 8001480:	4b35      	ldr	r3, [pc, #212]	; (8001558 <HAL_I2SEx_FullDuplex_IRQHandler+0x24c>)
 8001482:	e001      	b.n	8001488 <HAL_I2SEx_FullDuplex_IRQHandler+0x17c>
 8001484:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001488:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800148c:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800148e:	2300      	movs	r3, #0
 8001490:	60bb      	str	r3, [r7, #8]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	60bb      	str	r3, [r7, #8]
 800149a:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2201      	movs	r2, #1
 80014a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_UDR);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a8:	f043 0204 	orr.w	r2, r3, #4
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	645a      	str	r2, [r3, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7ff fe39 	bl	8001128 <HAL_I2S_ErrorCallback>
    if(((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80014b6:	e0a3      	b.n	8001600 <HAL_I2SEx_FullDuplex_IRQHandler+0x2f4>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if(((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d111      	bne.n	80014e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1da>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a23      	ldr	r2, [pc, #140]	; (8001554 <HAL_I2SEx_FullDuplex_IRQHandler+0x248>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d101      	bne.n	80014d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1c4>
 80014cc:	4b22      	ldr	r3, [pc, #136]	; (8001558 <HAL_I2SEx_FullDuplex_IRQHandler+0x24c>)
 80014ce:	e001      	b.n	80014d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1c8>
 80014d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014da:	2b80      	cmp	r3, #128	; 0x80
 80014dc:	d103      	bne.n	80014e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1da>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_FullDuplexTx_IT(hi2s, I2S_USE_I2SEXT);
 80014de:	2101      	movs	r1, #1
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f000 f8a1 	bl	8001628 <I2SEx_FullDuplexTx_IT>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if(((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d10a      	bne.n	8001506 <HAL_I2SEx_FullDuplex_IRQHandler+0x1fa>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014fa:	2b40      	cmp	r3, #64	; 0x40
 80014fc:	d103      	bne.n	8001506 <HAL_I2SEx_FullDuplex_IRQHandler+0x1fa>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_FullDuplexRx_IT(hi2s, I2S_USE_I2S);
 80014fe:	2100      	movs	r1, #0
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f000 f90d 	bl	8001720 <I2SEx_FullDuplexRx_IT>
    }

    /* I2S Overrun error interrupt occured -------------------------------------*/
    if(((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800150c:	2b40      	cmp	r3, #64	; 0x40
 800150e:	d137      	bne.n	8001580 <HAL_I2SEx_FullDuplex_IRQHandler+0x274>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f003 0320 	and.w	r3, r3, #32
 800151a:	2b20      	cmp	r3, #32
 800151c:	d130      	bne.n	8001580 <HAL_I2SEx_FullDuplex_IRQHandler+0x274>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	6859      	ldr	r1, [r3, #4]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	f64f 739f 	movw	r3, #65439	; 0xff9f
 800152c:	400b      	ands	r3, r1
 800152e:	6053      	str	r3, [r2, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a07      	ldr	r2, [pc, #28]	; (8001554 <HAL_I2SEx_FullDuplex_IRQHandler+0x248>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d101      	bne.n	800153e <HAL_I2SEx_FullDuplex_IRQHandler+0x232>
 800153a:	4b07      	ldr	r3, [pc, #28]	; (8001558 <HAL_I2SEx_FullDuplex_IRQHandler+0x24c>)
 800153c:	e001      	b.n	8001542 <HAL_I2SEx_FullDuplex_IRQHandler+0x236>
 800153e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001542:	685a      	ldr	r2, [r3, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4902      	ldr	r1, [pc, #8]	; (8001554 <HAL_I2SEx_FullDuplex_IRQHandler+0x248>)
 800154a:	428b      	cmp	r3, r1
 800154c:	d106      	bne.n	800155c <HAL_I2SEx_FullDuplex_IRQHandler+0x250>
 800154e:	4b02      	ldr	r3, [pc, #8]	; (8001558 <HAL_I2SEx_FullDuplex_IRQHandler+0x24c>)
 8001550:	e006      	b.n	8001560 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>
 8001552:	bf00      	nop
 8001554:	40003800 	.word	0x40003800
 8001558:	40003400 	.word	0x40003400
 800155c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001560:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001564:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2201      	movs	r2, #1
 800156a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001572:	f043 0202 	orr.w	r2, r3, #2
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	645a      	str	r2, [r3, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7ff fdd4 	bl	8001128 <HAL_I2S_ErrorCallback>
    }

    /* I2Sext Underrun error interrupt occured -------------------------------*/
    if(((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	f003 0308 	and.w	r3, r3, #8
 8001586:	2b08      	cmp	r3, #8
 8001588:	d13b      	bne.n	8001602 <HAL_I2SEx_FullDuplex_IRQHandler+0x2f6>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a1f      	ldr	r2, [pc, #124]	; (800160c <HAL_I2SEx_FullDuplex_IRQHandler+0x300>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d101      	bne.n	8001598 <HAL_I2SEx_FullDuplex_IRQHandler+0x28c>
 8001594:	4b1e      	ldr	r3, [pc, #120]	; (8001610 <HAL_I2SEx_FullDuplex_IRQHandler+0x304>)
 8001596:	e001      	b.n	800159c <HAL_I2SEx_FullDuplex_IRQHandler+0x290>
 8001598:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 0320 	and.w	r3, r3, #32
 80015a2:	2b20      	cmp	r3, #32
 80015a4:	d12d      	bne.n	8001602 <HAL_I2SEx_FullDuplex_IRQHandler+0x2f6>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a18      	ldr	r2, [pc, #96]	; (800160c <HAL_I2SEx_FullDuplex_IRQHandler+0x300>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d101      	bne.n	80015b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a8>
 80015b0:	4b17      	ldr	r3, [pc, #92]	; (8001610 <HAL_I2SEx_FullDuplex_IRQHandler+0x304>)
 80015b2:	e001      	b.n	80015b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2ac>
 80015b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80015b8:	685a      	ldr	r2, [r3, #4]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4913      	ldr	r1, [pc, #76]	; (800160c <HAL_I2SEx_FullDuplex_IRQHandler+0x300>)
 80015c0:	428b      	cmp	r3, r1
 80015c2:	d101      	bne.n	80015c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2bc>
 80015c4:	4b12      	ldr	r3, [pc, #72]	; (8001610 <HAL_I2SEx_FullDuplex_IRQHandler+0x304>)
 80015c6:	e001      	b.n	80015cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2c0>
 80015c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80015cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80015d0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	6859      	ldr	r1, [r3, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	f64f 739f 	movw	r3, #65439	; 0xff9f
 80015e0:	400b      	ands	r3, r1
 80015e2:	6053      	str	r3, [r2, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2201      	movs	r2, #1
 80015e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_UDR);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f0:	f043 0204 	orr.w	r2, r3, #4
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	645a      	str	r2, [r3, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f7ff fd95 	bl	8001128 <HAL_I2S_ErrorCallback>
    }
  }
}
 80015fe:	e000      	b.n	8001602 <HAL_I2SEx_FullDuplex_IRQHandler+0x2f6>
    if(((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001600:	bf00      	nop
}
 8001602:	bf00      	nop
 8001604:	3718      	adds	r7, #24
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40003800 	.word	0x40003800
 8001610:	40003400 	.word	0x40003400

08001614 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief Tx and Rx Transfer completed callback
  * @param hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <I2SEx_FullDuplexTx_IT>:
  * @param hi2s I2S handle
  * @param i2sUsed indicate if I2Sx or I2Sx_ext is concerned
  * @retval None
  */
static void I2SEx_FullDuplexTx_IT(I2S_HandleTypeDef *hi2s, I2S_UseTypeDef i2sUsed)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	460b      	mov	r3, r1
 8001632:	70fb      	strb	r3, [r7, #3]
  if(i2sUsed == I2S_USE_I2S)
 8001634:	78fb      	ldrb	r3, [r7, #3]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d12a      	bne.n	8001690 <I2SEx_FullDuplexTx_IT+0x68>
  {
    /* Write Data on DR register */
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163e:	1c99      	adds	r1, r3, #2
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	6251      	str	r1, [r2, #36]	; 0x24
 8001644:	881a      	ldrh	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	60da      	str	r2, [r3, #12]
    hi2s->TxXferCount--;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001650:	b29b      	uxth	r3, r3
 8001652:	3b01      	subs	r3, #1
 8001654:	b29a      	uxth	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	855a      	strh	r2, [r3, #42]	; 0x2a

    if(hi2s->TxXferCount == 0U)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800165e:	b29b      	uxth	r3, r3
 8001660:	2b00      	cmp	r3, #0
 8001662:	d154      	bne.n	800170e <I2SEx_FullDuplexTx_IT+0xe6>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	6859      	ldr	r1, [r3, #4]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	f64f 735f 	movw	r3, #65375	; 0xff5f
 8001672:	400b      	ands	r3, r1
 8001674:	6053      	str	r3, [r2, #4]

      if(hi2s->RxXferCount == 0U)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800167a:	b29b      	uxth	r3, r3
 800167c:	2b00      	cmp	r3, #0
 800167e:	d146      	bne.n	800170e <I2SEx_FullDuplexTx_IT+0xe6>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2201      	movs	r2, #1
 8001684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f7ff ffc3 	bl	8001614 <HAL_I2SEx_TxRxCpltCallback>
        hi2s->State = HAL_I2S_STATE_READY;
        HAL_I2SEx_TxRxCpltCallback(hi2s);
      }
    }
  }
}
 800168e:	e03e      	b.n	800170e <I2SEx_FullDuplexTx_IT+0xe6>
    I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001694:	1c99      	adds	r1, r3, #2
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	6251      	str	r1, [r2, #36]	; 0x24
 800169a:	8819      	ldrh	r1, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a1d      	ldr	r2, [pc, #116]	; (8001718 <I2SEx_FullDuplexTx_IT+0xf0>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d101      	bne.n	80016aa <I2SEx_FullDuplexTx_IT+0x82>
 80016a6:	4b1d      	ldr	r3, [pc, #116]	; (800171c <I2SEx_FullDuplexTx_IT+0xf4>)
 80016a8:	e001      	b.n	80016ae <I2SEx_FullDuplexTx_IT+0x86>
 80016aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80016ae:	460a      	mov	r2, r1
 80016b0:	60da      	str	r2, [r3, #12]
    hi2s->TxXferCount--;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	3b01      	subs	r3, #1
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	855a      	strh	r2, [r3, #42]	; 0x2a
    if(hi2s->TxXferCount == 0U)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d121      	bne.n	800170e <I2SEx_FullDuplexTx_IT+0xe6>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a12      	ldr	r2, [pc, #72]	; (8001718 <I2SEx_FullDuplexTx_IT+0xf0>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d101      	bne.n	80016d8 <I2SEx_FullDuplexTx_IT+0xb0>
 80016d4:	4b11      	ldr	r3, [pc, #68]	; (800171c <I2SEx_FullDuplexTx_IT+0xf4>)
 80016d6:	e001      	b.n	80016dc <I2SEx_FullDuplexTx_IT+0xb4>
 80016d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80016dc:	685a      	ldr	r2, [r3, #4]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	490d      	ldr	r1, [pc, #52]	; (8001718 <I2SEx_FullDuplexTx_IT+0xf0>)
 80016e4:	428b      	cmp	r3, r1
 80016e6:	d101      	bne.n	80016ec <I2SEx_FullDuplexTx_IT+0xc4>
 80016e8:	4b0c      	ldr	r3, [pc, #48]	; (800171c <I2SEx_FullDuplexTx_IT+0xf4>)
 80016ea:	e001      	b.n	80016f0 <I2SEx_FullDuplexTx_IT+0xc8>
 80016ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80016f0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80016f4:	605a      	str	r2, [r3, #4]
      if(hi2s->RxXferCount == 0U)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d106      	bne.n	800170e <I2SEx_FullDuplexTx_IT+0xe6>
        hi2s->State = HAL_I2S_STATE_READY;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2201      	movs	r2, #1
 8001704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7ff ff83 	bl	8001614 <HAL_I2SEx_TxRxCpltCallback>
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40003800 	.word	0x40003800
 800171c:	40003400 	.word	0x40003400

08001720 <I2SEx_FullDuplexRx_IT>:
  * @param hi2s I2S handle
  * @param i2sUsed indicate if I2Sx or I2Sx_ext is concerned
  * @retval None
  */
static void I2SEx_FullDuplexRx_IT(I2S_HandleTypeDef *hi2s, I2S_UseTypeDef i2sUsed)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	460b      	mov	r3, r1
 800172a:	70fb      	strb	r3, [r7, #3]
  if(i2sUsed == I2S_USE_I2S)
 800172c:	78fb      	ldrb	r3, [r7, #3]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d12b      	bne.n	800178a <I2SEx_FullDuplexRx_IT+0x6a>
  {
    /* Read Data from DR register */
    (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	68d8      	ldr	r0, [r3, #12]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173c:	1c99      	adds	r1, r3, #2
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001742:	b282      	uxth	r2, r0
 8001744:	801a      	strh	r2, [r3, #0]
    hi2s->RxXferCount--;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800174a:	b29b      	uxth	r3, r3
 800174c:	3b01      	subs	r3, #1
 800174e:	b29a      	uxth	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	865a      	strh	r2, [r3, #50]	; 0x32

    if(hi2s->RxXferCount == 0U)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001758:	b29b      	uxth	r3, r3
 800175a:	2b00      	cmp	r3, #0
 800175c:	d154      	bne.n	8001808 <I2SEx_FullDuplexRx_IT+0xe8>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	6859      	ldr	r1, [r3, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	f64f 739f 	movw	r3, #65439	; 0xff9f
 800176c:	400b      	ands	r3, r1
 800176e:	6053      	str	r3, [r2, #4]

      if(hi2s->TxXferCount == 0U)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001774:	b29b      	uxth	r3, r3
 8001776:	2b00      	cmp	r3, #0
 8001778:	d146      	bne.n	8001808 <I2SEx_FullDuplexRx_IT+0xe8>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2201      	movs	r2, #1
 800177e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f7ff ff46 	bl	8001614 <HAL_I2SEx_TxRxCpltCallback>
        hi2s->State = HAL_I2S_STATE_READY;
        HAL_I2SEx_TxRxCpltCallback(hi2s);
      }
    }
  }
}
 8001788:	e03e      	b.n	8001808 <I2SEx_FullDuplexRx_IT+0xe8>
    (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a20      	ldr	r2, [pc, #128]	; (8001810 <I2SEx_FullDuplexRx_IT+0xf0>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d101      	bne.n	8001798 <I2SEx_FullDuplexRx_IT+0x78>
 8001794:	4b1f      	ldr	r3, [pc, #124]	; (8001814 <I2SEx_FullDuplexRx_IT+0xf4>)
 8001796:	e001      	b.n	800179c <I2SEx_FullDuplexRx_IT+0x7c>
 8001798:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800179c:	68d8      	ldr	r0, [r3, #12]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a2:	1c99      	adds	r1, r3, #2
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80017a8:	b282      	uxth	r2, r0
 80017aa:	801a      	strh	r2, [r3, #0]
    hi2s->RxXferCount--;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	3b01      	subs	r3, #1
 80017b4:	b29a      	uxth	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	865a      	strh	r2, [r3, #50]	; 0x32
    if(hi2s->RxXferCount == 0U)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80017be:	b29b      	uxth	r3, r3
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d121      	bne.n	8001808 <I2SEx_FullDuplexRx_IT+0xe8>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a11      	ldr	r2, [pc, #68]	; (8001810 <I2SEx_FullDuplexRx_IT+0xf0>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d101      	bne.n	80017d2 <I2SEx_FullDuplexRx_IT+0xb2>
 80017ce:	4b11      	ldr	r3, [pc, #68]	; (8001814 <I2SEx_FullDuplexRx_IT+0xf4>)
 80017d0:	e001      	b.n	80017d6 <I2SEx_FullDuplexRx_IT+0xb6>
 80017d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80017d6:	685a      	ldr	r2, [r3, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	490c      	ldr	r1, [pc, #48]	; (8001810 <I2SEx_FullDuplexRx_IT+0xf0>)
 80017de:	428b      	cmp	r3, r1
 80017e0:	d101      	bne.n	80017e6 <I2SEx_FullDuplexRx_IT+0xc6>
 80017e2:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <I2SEx_FullDuplexRx_IT+0xf4>)
 80017e4:	e001      	b.n	80017ea <I2SEx_FullDuplexRx_IT+0xca>
 80017e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80017ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80017ee:	605a      	str	r2, [r3, #4]
      if(hi2s->TxXferCount == 0U)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d106      	bne.n	8001808 <I2SEx_FullDuplexRx_IT+0xe8>
        hi2s->State = HAL_I2S_STATE_READY;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2201      	movs	r2, #1
 80017fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f7ff ff06 	bl	8001614 <HAL_I2SEx_TxRxCpltCallback>
}
 8001808:	bf00      	nop
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40003800 	.word	0x40003800
 8001814:	40003400 	.word	0x40003400

08001818 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 8001818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800181a:	b08f      	sub	sp, #60	; 0x3c
 800181c:	af0a      	add	r7, sp, #40	; 0x28
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8001820:	2300      	movs	r3, #0
 8001822:	60fb      	str	r3, [r7, #12]
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d101      	bne.n	800182e <HAL_PCD_Init+0x16>
  {
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e0f7      	b.n	8001a1e <HAL_PCD_Init+0x206>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2203      	movs	r2, #3
 8001832:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f007 fcfc 	bl	8009234 <HAL_PCD_MspInit>

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f002 fe7c 	bl	800453e <USB_DisableGlobalInt>
 
 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	603b      	str	r3, [r7, #0]
 800184c:	687e      	ldr	r6, [r7, #4]
 800184e:	466d      	mov	r5, sp
 8001850:	f106 0410 	add.w	r4, r6, #16
 8001854:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001856:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001858:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800185a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800185c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001860:	e885 0003 	stmia.w	r5, {r0, r1}
 8001864:	1d33      	adds	r3, r6, #4
 8001866:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001868:	6838      	ldr	r0, [r7, #0]
 800186a:	f002 fe06 	bl	800447a <USB_CoreInit>
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2100      	movs	r1, #0
 8001874:	4618      	mov	r0, r3
 8001876:	f002 fe73 	bl	8004560 <USB_SetCurrentMode>
 
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 800187a:	2300      	movs	r3, #0
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	e04c      	b.n	800191a <HAL_PCD_Init+0x102>
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 8001880:	6879      	ldr	r1, [r7, #4]
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	4613      	mov	r3, r2
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	1a9b      	subs	r3, r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	440b      	add	r3, r1
 800188e:	3339      	adds	r3, #57	; 0x39
 8001890:	2201      	movs	r2, #1
 8001892:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].num = i;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	b2d8      	uxtb	r0, r3
 8001898:	6879      	ldr	r1, [r7, #4]
 800189a:	68fa      	ldr	r2, [r7, #12]
 800189c:	4613      	mov	r3, r2
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	1a9b      	subs	r3, r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	440b      	add	r3, r1
 80018a6:	3338      	adds	r3, #56	; 0x38
 80018a8:	4602      	mov	r2, r0
 80018aa:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].tx_fifo_num = i;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	b298      	uxth	r0, r3
 80018b0:	6879      	ldr	r1, [r7, #4]
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	4613      	mov	r3, r2
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	1a9b      	subs	r3, r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	440b      	add	r3, r1
 80018be:	333e      	adds	r3, #62	; 0x3e
 80018c0:	4602      	mov	r2, r0
 80018c2:	801a      	strh	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80018c4:	6879      	ldr	r1, [r7, #4]
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	4613      	mov	r3, r2
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	1a9b      	subs	r3, r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	440b      	add	r3, r1
 80018d2:	333b      	adds	r3, #59	; 0x3b
 80018d4:	2200      	movs	r2, #0
 80018d6:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].maxpacket = 0U;
 80018d8:	6879      	ldr	r1, [r7, #4]
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	4613      	mov	r3, r2
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	1a9b      	subs	r3, r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	440b      	add	r3, r1
 80018e6:	3340      	adds	r3, #64	; 0x40
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_buff = 0U;
 80018ec:	6879      	ldr	r1, [r7, #4]
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	4613      	mov	r3, r2
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	1a9b      	subs	r3, r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	440b      	add	r3, r1
 80018fa:	3344      	adds	r3, #68	; 0x44
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_len = 0U;
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	4613      	mov	r3, r2
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	1a9b      	subs	r3, r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	440b      	add	r3, r1
 800190e:	334c      	adds	r3, #76	; 0x4c
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 for (i = 0U; i < 15U; i++)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	3301      	adds	r3, #1
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2b0e      	cmp	r3, #14
 800191e:	d9af      	bls.n	8001880 <HAL_PCD_Init+0x68>
 }
 
 for (i = 0U; i < 15U; i++)
 8001920:	2300      	movs	r3, #0
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	e05a      	b.n	80019dc <HAL_PCD_Init+0x1c4>
 {
   hpcd->OUT_ep[i].is_in = 0U;
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	68fa      	ldr	r2, [r7, #12]
 800192a:	4613      	mov	r3, r2
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	1a9b      	subs	r3, r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	440b      	add	r3, r1
 8001934:	f203 13f9 	addw	r3, r3, #505	; 0x1f9
 8001938:	2200      	movs	r2, #0
 800193a:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].num = i;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	b2d8      	uxtb	r0, r3
 8001940:	6879      	ldr	r1, [r7, #4]
 8001942:	68fa      	ldr	r2, [r7, #12]
 8001944:	4613      	mov	r3, r2
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	1a9b      	subs	r3, r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	440b      	add	r3, r1
 800194e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001952:	4602      	mov	r2, r0
 8001954:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].tx_fifo_num = i;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	b298      	uxth	r0, r3
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	68fa      	ldr	r2, [r7, #12]
 800195e:	4613      	mov	r3, r2
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	1a9b      	subs	r3, r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	440b      	add	r3, r1
 8001968:	333e      	adds	r3, #62	; 0x3e
 800196a:	4602      	mov	r2, r0
 800196c:	801a      	strh	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800196e:	6879      	ldr	r1, [r7, #4]
 8001970:	68fa      	ldr	r2, [r7, #12]
 8001972:	4613      	mov	r3, r2
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	1a9b      	subs	r3, r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	440b      	add	r3, r1
 800197c:	f203 13fb 	addw	r3, r3, #507	; 0x1fb
 8001980:	2200      	movs	r2, #0
 8001982:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].maxpacket = 0U;
 8001984:	6879      	ldr	r1, [r7, #4]
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	4613      	mov	r3, r2
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	1a9b      	subs	r3, r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	440b      	add	r3, r1
 8001992:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_buff = 0U;
 800199a:	6879      	ldr	r1, [r7, #4]
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	4613      	mov	r3, r2
 80019a0:	00db      	lsls	r3, r3, #3
 80019a2:	1a9b      	subs	r3, r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	440b      	add	r3, r1
 80019a8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_len = 0U;
 80019b0:	6879      	ldr	r1, [r7, #4]
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	4613      	mov	r3, r2
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	1a9b      	subs	r3, r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	440b      	add	r3, r1
 80019be:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	3340      	adds	r3, #64	; 0x40
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	4413      	add	r3, r2
 80019d2:	2200      	movs	r2, #0
 80019d4:	605a      	str	r2, [r3, #4]
 for (i = 0U; i < 15U; i++)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	3301      	adds	r3, #1
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2b0e      	cmp	r3, #14
 80019e0:	d9a1      	bls.n	8001926 <HAL_PCD_Init+0x10e>
 }
 
 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	603b      	str	r3, [r7, #0]
 80019e8:	687e      	ldr	r6, [r7, #4]
 80019ea:	466d      	mov	r5, sp
 80019ec:	f106 0410 	add.w	r4, r6, #16
 80019f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a00:	1d33      	adds	r3, r6, #4
 8001a02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a04:	6838      	ldr	r0, [r7, #0]
 8001a06:	f002 fdd3 	bl	80045b0 <USB_DevInit>
 
 hpcd->State= HAL_PCD_STATE_READY;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 }
#endif /* USB_OTG_GCCFG_BCDEN */
 
 USB_DevDisconnect (hpcd->Instance);  
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f003 fdbd 	bl	8005596 <USB_DevDisconnect>
 return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3714      	adds	r7, #20
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a26 <HAL_PCD_Start>:
  * @brief  Start The USB OTG Device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd); 
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d101      	bne.n	8001a3c <HAL_PCD_Start+0x16>
 8001a38:	2302      	movs	r3, #2
 8001a3a:	e012      	b.n	8001a62 <HAL_PCD_Start+0x3c>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_DevConnect (hpcd->Instance);  
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f003 fd8e 	bl	800556a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f002 fd62 	bl	800451c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd); 
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
	...

08001a6c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08c      	sub	sp, #48	; 0x30
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	623b      	str	r3, [r7, #32]
  uint32_t i = 0U, ep_intr = 0U, epint = 0U, epnum = 0U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a7e:	2300      	movs	r3, #0
 8001a80:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a82:	2300      	movs	r3, #0
 8001a84:	61fb      	str	r3, [r7, #28]
 8001a86:	2300      	movs	r3, #0
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fifoemptymsk = 0U, temp = 0U;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61bb      	str	r3, [r7, #24]
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
  USB_OTG_EPTypeDef *ep;
  uint32_t hclk = 180000000U;
 8001a92:	4b7c      	ldr	r3, [pc, #496]	; (8001c84 <HAL_PCD_IRQHandler+0x218>)
 8001a94:	613b      	str	r3, [r7, #16]
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f003 fe1c 	bl	80056d8 <USB_GetMode>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f040 8460 	bne.w	8002368 <HAL_PCD_IRQHandler+0x8fc>
  {    
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f003 fd88 	bl	80055c2 <USB_ReadInterrupts>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f000 8456 	beq.w	8002366 <HAL_PCD_IRQHandler+0x8fa>
    {
      return;
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f003 fd7f 	bl	80055c2 <USB_ReadInterrupts>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d107      	bne.n	8001ade <HAL_PCD_IRQHandler+0x72>
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	695a      	ldr	r2, [r3, #20]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f002 0202 	and.w	r2, r2, #2
 8001adc:	615a      	str	r2, [r3, #20]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f003 fd6d 	bl	80055c2 <USB_ReadInterrupts>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001aee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001af2:	f040 80b2 	bne.w	8001c5a <HAL_PCD_IRQHandler+0x1ee>
    {
      epnum = 0U;
 8001af6:	2300      	movs	r3, #0
 8001af8:	627b      	str	r3, [r7, #36]	; 0x24
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f003 fd74 	bl	80055ec <USB_ReadDevAllOutEpInterrupt>
 8001b04:	62b8      	str	r0, [r7, #40]	; 0x28
      
      while ( ep_intr )
 8001b06:	e0a4      	b.n	8001c52 <HAL_PCD_IRQHandler+0x1e6>
      {
        if (ep_intr & 0x1U)
 8001b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f000 8099 	beq.w	8001c46 <HAL_PCD_IRQHandler+0x1da>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b1a:	b2d2      	uxtb	r2, r2
 8001b1c:	4611      	mov	r1, r2
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f003 fd94 	bl	800564c <USB_ReadDevOutEPInterrupt>
 8001b24:	61f8      	str	r0, [r7, #28]
          
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d06b      	beq.n	8001c08 <HAL_PCD_IRQHandler+0x19c>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b32:	015a      	lsls	r2, r3, #5
 8001b34:	6a3b      	ldr	r3, [r7, #32]
 8001b36:	4413      	add	r3, r2
 8001b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	2301      	movs	r3, #1
 8001b40:	6093      	str	r3, [r2, #8]
            
            if(hpcd->Init.dma_enable == 1U)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d13c      	bne.n	8001bc4 <HAL_PCD_IRQHandler+0x158>
            {
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ); 
 8001b4a:	6879      	ldr	r1, [r7, #4]
 8001b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b4e:	4613      	mov	r3, r2
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	1a9b      	subs	r3, r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	440b      	add	r3, r1
 8001b58:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b60:	0159      	lsls	r1, r3, #5
 8001b62:	6a3b      	ldr	r3, [r7, #32]
 8001b64:	440b      	add	r3, r1
 8001b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b70:	1ad1      	subs	r1, r2, r3
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b76:	4613      	mov	r3, r2
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	1a9b      	subs	r3, r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	4403      	add	r3, r0
 8001b80:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001b84:	6019      	str	r1, [r3, #0]
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 8001b86:	6879      	ldr	r1, [r7, #4]
 8001b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	1a9b      	subs	r3, r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	440b      	add	r3, r1
 8001b94:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001b98:	6819      	ldr	r1, [r3, #0]
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	1a9b      	subs	r3, r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4403      	add	r3, r0
 8001ba8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4419      	add	r1, r3
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	1a9b      	subs	r3, r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4403      	add	r3, r0
 8001bbe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001bc2:	6019      	str	r1, [r3, #0]
            }
            
            HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	4619      	mov	r1, r3
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f007 fb90 	bl	80092f0 <HAL_PCD_DataOutStageCallback>
            if(hpcd->Init.dma_enable == 1U)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d117      	bne.n	8001c08 <HAL_PCD_IRQHandler+0x19c>
            {
              if((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d114      	bne.n	8001c08 <HAL_PCD_IRQHandler+0x19c>
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001be2:	4613      	mov	r3, r2
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	1a9b      	subs	r3, r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	440b      	add	r3, r1
 8001bec:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d108      	bne.n	8001c08 <HAL_PCD_IRQHandler+0x19c>
              {
                 /* this is ZLP, so prepare EP0 for next setup */
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6818      	ldr	r0, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8001c00:	461a      	mov	r2, r3
 8001c02:	2101      	movs	r1, #1
 8001c04:	f003 fda9 	bl	800575a <USB_EP0_OutStart>
              }              
            }
          }
          
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	f003 0308 	and.w	r3, r3, #8
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d00b      	beq.n	8001c2a <HAL_PCD_IRQHandler+0x1be>
          {
            /* Inform the upper layer that a setup packet is available */
            HAL_PCD_SetupStageCallback(hpcd);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f007 fb5a 	bl	80092cc <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1a:	015a      	lsls	r2, r3, #5
 8001c1c:	6a3b      	ldr	r3, [r7, #32]
 8001c1e:	4413      	add	r3, r2
 8001c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c24:	461a      	mov	r2, r3
 8001c26:	2308      	movs	r3, #8
 8001c28:	6093      	str	r3, [r2, #8]
          }
          
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	f003 0310 	and.w	r3, r3, #16
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d008      	beq.n	8001c46 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c36:	015a      	lsls	r2, r3, #5
 8001c38:	6a3b      	ldr	r3, [r7, #32]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c40:	461a      	mov	r2, r3
 8001c42:	2310      	movs	r3, #16
 8001c44:	6093      	str	r3, [r2, #8]
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
          }
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        }
        epnum++;
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	3301      	adds	r3, #1
 8001c4a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c4e:	085b      	lsrs	r3, r3, #1
 8001c50:	62bb      	str	r3, [r7, #40]	; 0x28
      while ( ep_intr )
 8001c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f47f af57 	bne.w	8001b08 <HAL_PCD_IRQHandler+0x9c>
      }
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f003 fcaf 	bl	80055c2 <USB_ReadInterrupts>
 8001c64:	4603      	mov	r3, r0
 8001c66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c6a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001c6e:	f040 80c4 	bne.w	8001dfa <HAL_PCD_IRQHandler+0x38e>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f003 fcd0 	bl	800561c <USB_ReadDevAllInEpInterrupt>
 8001c7c:	62b8      	str	r0, [r7, #40]	; 0x28
      
      epnum = 0U;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
      
      while ( ep_intr )
 8001c82:	e0b6      	b.n	8001df2 <HAL_PCD_IRQHandler+0x386>
 8001c84:	0aba9500 	.word	0x0aba9500
      {
        if (ep_intr & 0x1U) /* In ITR */
 8001c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f000 80a9 	beq.w	8001de6 <HAL_PCD_IRQHandler+0x37a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c9a:	b2d2      	uxtb	r2, r2
 8001c9c:	4611      	mov	r1, r2
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f003 fcf0 	bl	8005684 <USB_ReadDevInEPInterrupt>
 8001ca4:	61f8      	str	r0, [r7, #28]

           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d059      	beq.n	8001d64 <HAL_PCD_IRQHandler+0x2f8>
          {
            fifoemptymsk = 0x1U << epnum;
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	61bb      	str	r3, [r7, #24]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001cba:	6a3b      	ldr	r3, [r7, #32]
 8001cbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	6a39      	ldr	r1, [r7, #32]
 8001cc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001ccc:	4013      	ands	r3, r2
 8001cce:	634b      	str	r3, [r1, #52]	; 0x34
            
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd2:	015a      	lsls	r2, r3, #5
 8001cd4:	6a3b      	ldr	r3, [r7, #32]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001cdc:	461a      	mov	r2, r3
 8001cde:	2301      	movs	r3, #1
 8001ce0:	6093      	str	r3, [r2, #8]
            
            if (hpcd->Init.dma_enable == 1U)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d11b      	bne.n	8001d22 <HAL_PCD_IRQHandler+0x2b6>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cee:	4613      	mov	r3, r2
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	1a9b      	subs	r3, r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	440b      	add	r3, r1
 8001cf8:	3344      	adds	r3, #68	; 0x44
 8001cfa:	6819      	ldr	r1, [r3, #0]
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d00:	4613      	mov	r3, r2
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	1a9b      	subs	r3, r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	4403      	add	r3, r0
 8001d0a:	3340      	adds	r3, #64	; 0x40
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4419      	add	r1, r3
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d14:	4613      	mov	r3, r2
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	1a9b      	subs	r3, r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4403      	add	r3, r0
 8001d1e:	3344      	adds	r3, #68	; 0x44
 8001d20:	6019      	str	r1, [r3, #0]
            }
                                      
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 8001d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	4619      	mov	r1, r3
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f007 fafc 	bl	8009326 <HAL_PCD_DataInStageCallback>

            if (hpcd->Init.dma_enable == 1U)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d116      	bne.n	8001d64 <HAL_PCD_IRQHandler+0x2f8>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d113      	bne.n	8001d64 <HAL_PCD_IRQHandler+0x2f8>
 8001d3c:	6879      	ldr	r1, [r7, #4]
 8001d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d40:	4613      	mov	r3, r2
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	1a9b      	subs	r3, r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	440b      	add	r3, r1
 8001d4a:	334c      	adds	r3, #76	; 0x4c
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d108      	bne.n	8001d64 <HAL_PCD_IRQHandler+0x2f8>
              {
                /* prepare to rx more setup packets */
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6818      	ldr	r0, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	2101      	movs	r1, #1
 8001d60:	f003 fcfb 	bl	800575a <USB_EP0_OutStart>
              }
            }           
          }
           if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d008      	beq.n	8001d80 <HAL_PCD_IRQHandler+0x314>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d70:	015a      	lsls	r2, r3, #5
 8001d72:	6a3b      	ldr	r3, [r7, #32]
 8001d74:	4413      	add	r3, r2
 8001d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	2308      	movs	r3, #8
 8001d7e:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	f003 0310 	and.w	r3, r3, #16
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d008      	beq.n	8001d9c <HAL_PCD_IRQHandler+0x330>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8c:	015a      	lsls	r2, r3, #5
 8001d8e:	6a3b      	ldr	r3, [r7, #32]
 8001d90:	4413      	add	r3, r2
 8001d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d96:	461a      	mov	r2, r3
 8001d98:	2310      	movs	r3, #16
 8001d9a:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d008      	beq.n	8001db8 <HAL_PCD_IRQHandler+0x34c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da8:	015a      	lsls	r2, r3, #5
 8001daa:	6a3b      	ldr	r3, [r7, #32]
 8001dac:	4413      	add	r3, r2
 8001dae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001db2:	461a      	mov	r2, r3
 8001db4:	2340      	movs	r3, #64	; 0x40
 8001db6:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d008      	beq.n	8001dd4 <HAL_PCD_IRQHandler+0x368>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc4:	015a      	lsls	r2, r3, #5
 8001dc6:	6a3b      	ldr	r3, [r7, #32]
 8001dc8:	4413      	add	r3, r2
 8001dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001dce:	461a      	mov	r2, r3
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	6093      	str	r3, [r2, #8]
          }       
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_PCD_IRQHandler+0x37a>
          {
            PCD_WriteEmptyTxFifo(hpcd , epnum);
 8001dde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 fcea 	bl	80027ba <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de8:	3301      	adds	r3, #1
 8001dea:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dee:	085b      	lsrs	r3, r3, #1
 8001df0:	62bb      	str	r3, [r7, #40]	; 0x28
      while ( ep_intr )
 8001df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f47f af47 	bne.w	8001c88 <HAL_PCD_IRQHandler+0x21c>
      }
    }
    
    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f003 fbdf 	bl	80055c2 <USB_ReadInterrupts>
 8001e04:	4603      	mov	r3, r0
 8001e06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001e0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e0e:	d114      	bne.n	8001e3a <HAL_PCD_IRQHandler+0x3ce>
    {    
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e10:	6a3b      	ldr	r3, [r7, #32]
 8001e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	6a3a      	ldr	r2, [r7, #32]
 8001e1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e1e:	f023 0301 	bic.w	r3, r3, #1
 8001e22:	6053      	str	r3, [r2, #4]
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
      }
      else
#endif /* USB_OTG_GLPMCFG_LPMEN */
      {
        HAL_PCD_ResumeCallback(hpcd);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f007 faf5 	bl	8009414 <HAL_PCD_ResumeCallback>
      }
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	695a      	ldr	r2, [r3, #20]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001e38:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f003 fbbf 	bl	80055c2 <USB_ReadInterrupts>
 8001e44:	4603      	mov	r3, r0
 8001e46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e4e:	d112      	bne.n	8001e76 <HAL_PCD_IRQHandler+0x40a>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001e50:	6a3b      	ldr	r3, [r7, #32]
 8001e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d102      	bne.n	8001e66 <HAL_PCD_IRQHandler+0x3fa>
      {
        
        HAL_PCD_SuspendCallback(hpcd);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f007 fab1 	bl	80093c8 <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	695a      	ldr	r2, [r3, #20]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001e74:	615a      	str	r2, [r3, #20]
      }
    }
#endif /* USB_OTG_GLPMCFG_LPMEN */

    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f003 fba1 	bl	80055c2 <USB_ReadInterrupts>
 8001e80:	4603      	mov	r3, r0
 8001e82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e8a:	f040 808a 	bne.w	8001fa2 <HAL_PCD_IRQHandler+0x536>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8001e8e:	6a3b      	ldr	r3, [r7, #32]
 8001e90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	6a3a      	ldr	r2, [r7, #32]
 8001e98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e9c:	f023 0301 	bic.w	r3, r3, #1
 8001ea0:	6053      	str	r3, [r2, #4]
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2110      	movs	r1, #16
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f002 fcb3 	bl	8004814 <USB_FlushTxFifo>
      
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eae:	2300      	movs	r3, #0
 8001eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001eb2:	e014      	b.n	8001ede <HAL_PCD_IRQHandler+0x472>
      {
        USBx_INEP(i)->DIEPINT = 0xFFU;
 8001eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb6:	015a      	lsls	r2, r3, #5
 8001eb8:	6a3b      	ldr	r3, [r7, #32]
 8001eba:	4413      	add	r3, r2
 8001ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	23ff      	movs	r3, #255	; 0xff
 8001ec4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
 8001ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec8:	015a      	lsls	r2, r3, #5
 8001eca:	6a3b      	ldr	r3, [r7, #32]
 8001ecc:	4413      	add	r3, r2
 8001ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	23ff      	movs	r3, #255	; 0xff
 8001ed6:	6093      	str	r3, [r2, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eda:	3301      	adds	r3, #1
 8001edc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d3e5      	bcc.n	8001eb4 <HAL_PCD_IRQHandler+0x448>
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8001ee8:	6a3b      	ldr	r3, [r7, #32]
 8001eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001eee:	461a      	mov	r2, r3
 8001ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef4:	6193      	str	r3, [r2, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001ef6:	6a3b      	ldr	r3, [r7, #32]
 8001ef8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	6a3a      	ldr	r2, [r7, #32]
 8001f00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f04:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001f08:	61d3      	str	r3, [r2, #28]
      
      if(hpcd->Init.use_dedicated_ep1)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d016      	beq.n	8001f40 <HAL_PCD_IRQHandler+0x4d4>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
 8001f12:	6a3b      	ldr	r3, [r7, #32]
 8001f14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f1c:	6a3a      	ldr	r2, [r7, #32]
 8001f1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f22:	f043 030b 	orr.w	r3, r3, #11
 8001f26:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
 8001f2a:	6a3b      	ldr	r3, [r7, #32]
 8001f2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f32:	6a3a      	ldr	r2, [r7, #32]
 8001f34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f38:	f043 030b 	orr.w	r3, r3, #11
 8001f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f3e:	e013      	b.n	8001f68 <HAL_PCD_IRQHandler+0x4fc>
      else
      {
#ifdef USB_OTG_DOEPINT_OTEPSPR
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM | USB_OTG_DOEPMSK_OTEPSPRM);
#else
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 8001f40:	6a3b      	ldr	r3, [r7, #32]
 8001f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f46:	695b      	ldr	r3, [r3, #20]
 8001f48:	6a3a      	ldr	r2, [r7, #32]
 8001f4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f4e:	f043 030b 	orr.w	r3, r3, #11
 8001f52:	6153      	str	r3, [r2, #20]
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8001f54:	6a3b      	ldr	r3, [r7, #32]
 8001f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	6a3a      	ldr	r2, [r7, #32]
 8001f5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f62:	f043 030b 	orr.w	r3, r3, #11
 8001f66:	6113      	str	r3, [r2, #16]
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001f68:	6a3b      	ldr	r3, [r7, #32]
 8001f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6a3a      	ldr	r2, [r7, #32]
 8001f72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f76:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001f7a:	6013      	str	r3, [r2, #0]
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6818      	ldr	r0, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	b2d9      	uxtb	r1, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	f003 fbe4 	bl	800575a <USB_EP0_OutStart>
        
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	695a      	ldr	r2, [r3, #20]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001fa0:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f003 fb0b 	bl	80055c2 <USB_ReadInterrupts>
 8001fac:	4603      	mov	r3, r0
 8001fae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fb6:	f040 80da 	bne.w	800216e <HAL_PCD_IRQHandler+0x702>
    {
      USB_ActivateSetup(hpcd->Instance);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f003 fb98 	bl	80056f4 <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68da      	ldr	r2, [r3, #12]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8001fd2:	60da      	str	r2, [r3, #12]
      
      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f002 fc7a 	bl	80048d2 <USB_GetDevSpeed>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d10f      	bne.n	8002004 <HAL_PCD_IRQHandler+0x598>
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	60da      	str	r2, [r3, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ff0:	615a      	str	r2, [r3, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68da      	ldr	r2, [r3, #12]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8002000:	60da      	str	r2, [r3, #12]
 8002002:	e0a9      	b.n	8002158 <HAL_PCD_IRQHandler+0x6ec>
      }
      else
      {
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2203      	movs	r2, #3
 8002008:	60da      	str	r2, [r3, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;  
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2240      	movs	r2, #64	; 0x40
 800200e:	615a      	str	r2, [r3, #20]
        used by application. In the low AHB frequency range it is used to stretch enough the USB response 
        time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access 
        latency to the Data FIFO */
        
        /* Get hclk frequency value */
        hclk = HAL_RCC_GetHCLKFreq();
 8002010:	f001 f8d6 	bl	80031c0 <HAL_RCC_GetHCLKFreq>
 8002014:	6138      	str	r0, [r7, #16]
        
        if((hclk >= 14200000U)&&(hclk < 15000000U))
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	4a7b      	ldr	r2, [pc, #492]	; (8002208 <HAL_PCD_IRQHandler+0x79c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d90c      	bls.n	8002038 <HAL_PCD_IRQHandler+0x5cc>
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	4a7a      	ldr	r2, [pc, #488]	; (800220c <HAL_PCD_IRQHandler+0x7a0>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d208      	bcs.n	8002038 <HAL_PCD_IRQHandler+0x5cc>
        {
          /* hclk Clock Range between 14.2-15 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xFU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68da      	ldr	r2, [r3, #12]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
 8002034:	60da      	str	r2, [r3, #12]
 8002036:	e08f      	b.n	8002158 <HAL_PCD_IRQHandler+0x6ec>
        }
        
        else if((hclk >= 15000000U)&&(hclk < 16000000U))
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	4a74      	ldr	r2, [pc, #464]	; (800220c <HAL_PCD_IRQHandler+0x7a0>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d30c      	bcc.n	800205a <HAL_PCD_IRQHandler+0x5ee>
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	4a73      	ldr	r2, [pc, #460]	; (8002210 <HAL_PCD_IRQHandler+0x7a4>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d208      	bcs.n	800205a <HAL_PCD_IRQHandler+0x5ee>
        {
          /* hclk Clock Range between 15-16 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xEU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68da      	ldr	r2, [r3, #12]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8002056:	60da      	str	r2, [r3, #12]
 8002058:	e07e      	b.n	8002158 <HAL_PCD_IRQHandler+0x6ec>
        }
        
        else if((hclk >= 16000000U)&&(hclk < 17200000U))
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4a6c      	ldr	r2, [pc, #432]	; (8002210 <HAL_PCD_IRQHandler+0x7a4>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d30c      	bcc.n	800207c <HAL_PCD_IRQHandler+0x610>
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	4a6b      	ldr	r2, [pc, #428]	; (8002214 <HAL_PCD_IRQHandler+0x7a8>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d208      	bcs.n	800207c <HAL_PCD_IRQHandler+0x610>
        {
          /* hclk Clock Range between 16-17.2 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xDU << 10U) & USB_OTG_GUSBCFG_TRDT);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68da      	ldr	r2, [r3, #12]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 8002078:	60da      	str	r2, [r3, #12]
 800207a:	e06d      	b.n	8002158 <HAL_PCD_IRQHandler+0x6ec>
        }
        
        else if((hclk >= 17200000U)&&(hclk < 18500000U))
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	4a65      	ldr	r2, [pc, #404]	; (8002214 <HAL_PCD_IRQHandler+0x7a8>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d30c      	bcc.n	800209e <HAL_PCD_IRQHandler+0x632>
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	4a64      	ldr	r2, [pc, #400]	; (8002218 <HAL_PCD_IRQHandler+0x7ac>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d808      	bhi.n	800209e <HAL_PCD_IRQHandler+0x632>
        {
          /* hclk Clock Range between 17.2-18.5 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xCU << 10U) & USB_OTG_GUSBCFG_TRDT);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68da      	ldr	r2, [r3, #12]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 800209a:	60da      	str	r2, [r3, #12]
 800209c:	e05c      	b.n	8002158 <HAL_PCD_IRQHandler+0x6ec>
        }
        
        else if((hclk >= 18500000U)&&(hclk < 20000000U))
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	4a5d      	ldr	r2, [pc, #372]	; (8002218 <HAL_PCD_IRQHandler+0x7ac>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d90c      	bls.n	80020c0 <HAL_PCD_IRQHandler+0x654>
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	4a5c      	ldr	r2, [pc, #368]	; (800221c <HAL_PCD_IRQHandler+0x7b0>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d808      	bhi.n	80020c0 <HAL_PCD_IRQHandler+0x654>
        {
          /* hclk Clock Range between 18.5-20 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xBU << 10U) & USB_OTG_GUSBCFG_TRDT);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68da      	ldr	r2, [r3, #12]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 80020bc:	60da      	str	r2, [r3, #12]
 80020be:	e04b      	b.n	8002158 <HAL_PCD_IRQHandler+0x6ec>
        }
        
        else if((hclk >= 20000000U)&&(hclk < 21800000U))
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	4a56      	ldr	r2, [pc, #344]	; (800221c <HAL_PCD_IRQHandler+0x7b0>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d90c      	bls.n	80020e2 <HAL_PCD_IRQHandler+0x676>
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	4a55      	ldr	r2, [pc, #340]	; (8002220 <HAL_PCD_IRQHandler+0x7b4>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d808      	bhi.n	80020e2 <HAL_PCD_IRQHandler+0x676>
        {
          /* hclk Clock Range between 20-21.8 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xAU << 10U) & USB_OTG_GUSBCFG_TRDT);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68da      	ldr	r2, [r3, #12]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 80020de:	60da      	str	r2, [r3, #12]
 80020e0:	e03a      	b.n	8002158 <HAL_PCD_IRQHandler+0x6ec>
        }
        
        else if((hclk >= 21800000U)&&(hclk < 24000000U))
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	4a4e      	ldr	r2, [pc, #312]	; (8002220 <HAL_PCD_IRQHandler+0x7b4>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d90c      	bls.n	8002104 <HAL_PCD_IRQHandler+0x698>
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	4a4d      	ldr	r2, [pc, #308]	; (8002224 <HAL_PCD_IRQHandler+0x7b8>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d208      	bcs.n	8002104 <HAL_PCD_IRQHandler+0x698>
        {
          /* hclk Clock Range between 21.8-24 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9U << 10U) & USB_OTG_GUSBCFG_TRDT);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68da      	ldr	r2, [r3, #12]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8002100:	60da      	str	r2, [r3, #12]
 8002102:	e029      	b.n	8002158 <HAL_PCD_IRQHandler+0x6ec>
        }
        
        else if((hclk >= 24000000U)&&(hclk < 27700000U))
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	4a47      	ldr	r2, [pc, #284]	; (8002224 <HAL_PCD_IRQHandler+0x7b8>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d30c      	bcc.n	8002126 <HAL_PCD_IRQHandler+0x6ba>
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	4a46      	ldr	r2, [pc, #280]	; (8002228 <HAL_PCD_IRQHandler+0x7bc>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d808      	bhi.n	8002126 <HAL_PCD_IRQHandler+0x6ba>
        {
          /* hclk Clock Range between 24-27.7 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68da      	ldr	r2, [r3, #12]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002122:	60da      	str	r2, [r3, #12]
 8002124:	e018      	b.n	8002158 <HAL_PCD_IRQHandler+0x6ec>
        }
        
        else if((hclk >= 27700000U)&&(hclk < 32000000U))
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	4a3f      	ldr	r2, [pc, #252]	; (8002228 <HAL_PCD_IRQHandler+0x7bc>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d90c      	bls.n	8002148 <HAL_PCD_IRQHandler+0x6dc>
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	4a3e      	ldr	r2, [pc, #248]	; (800222c <HAL_PCD_IRQHandler+0x7c0>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d208      	bcs.n	8002148 <HAL_PCD_IRQHandler+0x6dc>
        {
          /* hclk Clock Range between 27.7-32 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68da      	ldr	r2, [r3, #12]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8002144:	60da      	str	r2, [r3, #12]
 8002146:	e007      	b.n	8002158 <HAL_PCD_IRQHandler+0x6ec>
        }
        
        else /* if(hclk >= 32000000) */
        {
          /* hclk Clock Range between 32-180 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68da      	ldr	r2, [r3, #12]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f442 52c0 	orr.w	r2, r2, #6144	; 0x1800
 8002156:	60da      	str	r2, [r3, #12]
        }  
      }
      
      HAL_PCD_ResetCallback(hpcd);
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f007 f90c 	bl	8009376 <HAL_PCD_ResetCallback>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	695a      	ldr	r2, [r3, #20]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800216c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f003 fa25 	bl	80055c2 <USB_ReadInterrupts>
 8002178:	4603      	mov	r3, r0
 800217a:	f003 0310 	and.w	r3, r3, #16
 800217e:	2b10      	cmp	r3, #16
 8002180:	d175      	bne.n	800226e <HAL_PCD_IRQHandler+0x802>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	699a      	ldr	r2, [r3, #24]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f022 0210 	bic.w	r2, r2, #16
 8002190:	619a      	str	r2, [r3, #24]
      
      temp = USBx->GRXSTSP;
 8002192:	6a3b      	ldr	r3, [r7, #32]
 8002194:	6a1b      	ldr	r3, [r3, #32]
 8002196:	617b      	str	r3, [r7, #20]
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	f003 020f 	and.w	r2, r3, #15
 800219e:	4613      	mov	r3, r2
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	1a9b      	subs	r3, r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	4413      	add	r3, r2
 80021ae:	60fb      	str	r3, [r7, #12]
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	0c5b      	lsrs	r3, r3, #17
 80021b4:	f003 030f 	and.w	r3, r3, #15
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d139      	bne.n	8002230 <HAL_PCD_IRQHandler+0x7c4>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80021bc:	697a      	ldr	r2, [r7, #20]
 80021be:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80021c2:	4013      	ands	r3, r2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d04a      	beq.n	800225e <HAL_PCD_IRQHandler+0x7f2>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4U);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	68d9      	ldr	r1, [r3, #12]
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	091b      	lsrs	r3, r3, #4
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	461a      	mov	r2, r3
 80021da:	6a38      	ldr	r0, [r7, #32]
 80021dc:	f003 f8a4 	bl	8005328 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	68da      	ldr	r2, [r3, #12]
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	091b      	lsrs	r3, r3, #4
 80021e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021ec:	441a      	add	r2, r3
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	699a      	ldr	r2, [r3, #24]
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	091b      	lsrs	r3, r3, #4
 80021fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021fe:	441a      	add	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	619a      	str	r2, [r3, #24]
 8002204:	e02b      	b.n	800225e <HAL_PCD_IRQHandler+0x7f2>
 8002206:	bf00      	nop
 8002208:	00d8acbf 	.word	0x00d8acbf
 800220c:	00e4e1c0 	.word	0x00e4e1c0
 8002210:	00f42400 	.word	0x00f42400
 8002214:	01067380 	.word	0x01067380
 8002218:	011a499f 	.word	0x011a499f
 800221c:	01312cff 	.word	0x01312cff
 8002220:	014ca43f 	.word	0x014ca43f
 8002224:	016e3600 	.word	0x016e3600
 8002228:	01a6ab1f 	.word	0x01a6ab1f
 800222c:	01e84800 	.word	0x01e84800
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	0c5b      	lsrs	r3, r3, #17
 8002234:	f003 030f 	and.w	r3, r3, #15
 8002238:	2b06      	cmp	r3, #6
 800223a:	d110      	bne.n	800225e <HAL_PCD_IRQHandler+0x7f2>
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8002242:	2208      	movs	r2, #8
 8002244:	4619      	mov	r1, r3
 8002246:	6a38      	ldr	r0, [r7, #32]
 8002248:	f003 f86e 	bl	8005328 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	699a      	ldr	r2, [r3, #24]
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	091b      	lsrs	r3, r3, #4
 8002254:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002258:	441a      	add	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	619a      	str	r2, [r3, #24]
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	699a      	ldr	r2, [r3, #24]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f042 0210 	orr.w	r2, r2, #16
 800226c:	619a      	str	r2, [r3, #24]
    }
    
    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	f003 f9a5 	bl	80055c2 <USB_ReadInterrupts>
 8002278:	4603      	mov	r3, r0
 800227a:	f003 0308 	and.w	r3, r3, #8
 800227e:	2b08      	cmp	r3, #8
 8002280:	d10a      	bne.n	8002298 <HAL_PCD_IRQHandler+0x82c>
    {
      HAL_PCD_SOFCallback(hpcd);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f007 f869 	bl	800935a <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	695a      	ldr	r2, [r3, #20]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f002 0208 	and.w	r2, r2, #8
 8002296:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4618      	mov	r0, r3
 800229e:	f003 f990 	bl	80055c2 <USB_ReadInterrupts>
 80022a2:	4603      	mov	r3, r0
 80022a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022ac:	d10d      	bne.n	80022ca <HAL_PCD_IRQHandler+0x85e>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	4619      	mov	r1, r3
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f007 f8cd 	bl	8009454 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	695a      	ldr	r2, [r3, #20]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80022c8:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f003 f977 	bl	80055c2 <USB_ReadInterrupts>
 80022d4:	4603      	mov	r3, r0
 80022d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80022de:	d10d      	bne.n	80022fc <HAL_PCD_IRQHandler+0x890>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 80022e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	4619      	mov	r1, r3
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f007 f8a2 	bl	8009430 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	695a      	ldr	r2, [r3, #20]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80022fa:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4618      	mov	r0, r3
 8002302:	f003 f95e 	bl	80055c2 <USB_ReadInterrupts>
 8002306:	4603      	mov	r3, r0
 8002308:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800230c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002310:	d10a      	bne.n	8002328 <HAL_PCD_IRQHandler+0x8bc>
    {
      HAL_PCD_ConnectCallback(hpcd);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f007 f8b0 	bl	8009478 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	695a      	ldr	r2, [r3, #20]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002326:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4618      	mov	r0, r3
 800232e:	f003 f948 	bl	80055c2 <USB_ReadInterrupts>
 8002332:	4603      	mov	r3, r0
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	2b04      	cmp	r3, #4
 800233a:	d115      	bne.n	8002368 <HAL_PCD_IRQHandler+0x8fc>
    {
      temp = hpcd->Instance->GOTGINT;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	617b      	str	r3, [r7, #20]
      
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	f003 0304 	and.w	r3, r3, #4
 800234a:	2b00      	cmp	r3, #0
 800234c:	d002      	beq.n	8002354 <HAL_PCD_IRQHandler+0x8e8>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f007 f8a0 	bl	8009494 <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6859      	ldr	r1, [r3, #4]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	430a      	orrs	r2, r1
 8002362:	605a      	str	r2, [r3, #4]
 8002364:	e000      	b.n	8002368 <HAL_PCD_IRQHandler+0x8fc>
      return;
 8002366:	bf00      	nop
    }
  }
}
 8002368:	3730      	adds	r7, #48	; 0x30
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop

08002370 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	460b      	mov	r3, r1
 800237a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd); 
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8002382:	2b01      	cmp	r3, #1
 8002384:	d101      	bne.n	800238a <HAL_PCD_SetAddress+0x1a>
 8002386:	2302      	movs	r3, #2
 8002388:	e00f      	b.n	80023aa <HAL_PCD_SetAddress+0x3a>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2201      	movs	r2, #1
 800238e:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_SetDevAddress(hpcd->Instance, address);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	78fa      	ldrb	r2, [r7, #3]
 8002398:	4611      	mov	r1, r2
 800239a:	4618      	mov	r0, r3
 800239c:	f003 f8c1 	bl	8005522 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b084      	sub	sp, #16
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
 80023ba:	4608      	mov	r0, r1
 80023bc:	4611      	mov	r1, r2
 80023be:	461a      	mov	r2, r3
 80023c0:	4603      	mov	r3, r0
 80023c2:	70fb      	strb	r3, [r7, #3]
 80023c4:	460b      	mov	r3, r1
 80023c6:	803b      	strh	r3, [r7, #0]
 80023c8:	4613      	mov	r3, r2
 80023ca:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80023cc:	2300      	movs	r3, #0
 80023ce:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 80023d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	da0b      	bge.n	80023f0 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80023d8:	78fb      	ldrb	r3, [r7, #3]
 80023da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80023de:	4613      	mov	r3, r2
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	1a9b      	subs	r3, r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	3338      	adds	r3, #56	; 0x38
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	4413      	add	r3, r2
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	e00b      	b.n	8002408 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80023f0:	78fb      	ldrb	r3, [r7, #3]
 80023f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80023f6:	4613      	mov	r3, r2
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	1a9b      	subs	r3, r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	4413      	add	r3, r2
 8002406:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 8002408:	78fb      	ldrb	r3, [r7, #3]
 800240a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800240e:	b2da      	uxtb	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8002414:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002418:	b2db      	uxtb	r3, r3
 800241a:	09db      	lsrs	r3, r3, #7
 800241c:	b2db      	uxtb	r3, r3
 800241e:	461a      	mov	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 8002424:	883a      	ldrh	r2, [r7, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	78ba      	ldrb	r2, [r7, #2]
 800242e:	70da      	strb	r2, [r3, #3]
  if (ep->is_in)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	785b      	ldrb	r3, [r3, #1]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d004      	beq.n	8002442 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	b29a      	uxth	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK )
 8002442:	78bb      	ldrb	r3, [r7, #2]
 8002444:	2b02      	cmp	r3, #2
 8002446:	d102      	bne.n	800244e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2200      	movs	r2, #0
 800244c:	711a      	strb	r2, [r3, #4]
  }
  
  __HAL_LOCK(hpcd); 
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8002454:	2b01      	cmp	r3, #1
 8002456:	d101      	bne.n	800245c <HAL_PCD_EP_Open+0xaa>
 8002458:	2302      	movs	r3, #2
 800245a:	e00e      	b.n	800247a <HAL_PCD_EP_Open+0xc8>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68f9      	ldr	r1, [r7, #12]
 800246a:	4618      	mov	r0, r3
 800246c:	f002 fa66 	bl	800493c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return ret;
 8002478:	7afb      	ldrb	r3, [r7, #11]
}
 800247a:	4618      	mov	r0, r3
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 8002482:	b580      	push	{r7, lr}
 8002484:	b084      	sub	sp, #16
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
 800248a:	460b      	mov	r3, r1
 800248c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 800248e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002492:	2b00      	cmp	r3, #0
 8002494:	da0b      	bge.n	80024ae <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002496:	78fb      	ldrb	r3, [r7, #3]
 8002498:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800249c:	4613      	mov	r3, r2
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	1a9b      	subs	r3, r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	3338      	adds	r3, #56	; 0x38
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	4413      	add	r3, r2
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	e00b      	b.n	80024c6 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80024ae:	78fb      	ldrb	r3, [r7, #3]
 80024b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80024b4:	4613      	mov	r3, r2
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	1a9b      	subs	r3, r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	4413      	add	r3, r2
 80024c4:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 80024c6:	78fb      	ldrb	r3, [r7, #3]
 80024c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 80024d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	09db      	lsrs	r3, r3, #7
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	461a      	mov	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d101      	bne.n	80024f0 <HAL_PCD_EP_Close+0x6e>
 80024ec:	2302      	movs	r3, #2
 80024ee:	e00e      	b.n	800250e <HAL_PCD_EP_Close+0x8c>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68f9      	ldr	r1, [r7, #12]
 80024fe:	4618      	mov	r0, r3
 8002500:	f002 faa2 	bl	8004a48 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer   
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b086      	sub	sp, #24
 800251a:	af00      	add	r7, sp, #0
 800251c:	60f8      	str	r0, [r7, #12]
 800251e:	607a      	str	r2, [r7, #4]
 8002520:	603b      	str	r3, [r7, #0]
 8002522:	460b      	mov	r3, r1
 8002524:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8002526:	7afb      	ldrb	r3, [r7, #11]
 8002528:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800252c:	4613      	mov	r3, r2
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	1a9b      	subs	r3, r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	4413      	add	r3, r2
 800253c:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	2200      	movs	r2, #0
 800254e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	2200      	movs	r2, #0
 8002554:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 8002556:	7afb      	ldrb	r3, [r7, #11]
 8002558:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800255c:	b2da      	uxtb	r2, r3
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	701a      	strb	r2, [r3, #0]
  
  if (hpcd->Init.dma_enable == 1U)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d102      	bne.n	8002570 <HAL_PCD_EP_Receive+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;  
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	611a      	str	r2, [r3, #16]
  }
  
  if ((ep_addr & 0x7F) == 0)
 8002570:	7afb      	ldrb	r3, [r7, #11]
 8002572:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002576:	2b00      	cmp	r3, #0
 8002578:	d109      	bne.n	800258e <HAL_PCD_EP_Receive+0x78>
  {
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6818      	ldr	r0, [r3, #0]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	b2db      	uxtb	r3, r3
 8002584:	461a      	mov	r2, r3
 8002586:	6979      	ldr	r1, [r7, #20]
 8002588:	f002 fd48 	bl	800501c <USB_EP0StartXfer>
 800258c:	e008      	b.n	80025a0 <HAL_PCD_EP_Receive+0x8a>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6818      	ldr	r0, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	b2db      	uxtb	r3, r3
 8002598:	461a      	mov	r2, r3
 800259a:	6979      	ldr	r1, [r7, #20]
 800259c:	f002 fb10 	bl	8004bc0 <USB_EPStartXfer>
  }
  
  return HAL_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3718      	adds	r7, #24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025aa:	b480      	push	{r7}
 80025ac:	b083      	sub	sp, #12
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
 80025b2:	460b      	mov	r3, r1
 80025b4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 80025b6:	78fb      	ldrb	r3, [r7, #3]
 80025b8:	f003 020f 	and.w	r2, r3, #15
 80025bc:	6879      	ldr	r1, [r7, #4]
 80025be:	4613      	mov	r3, r2
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	1a9b      	subs	r3, r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	440b      	add	r3, r1
 80025c8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	b29b      	uxth	r3, r3
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer   
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	607a      	str	r2, [r7, #4]
 80025e6:	603b      	str	r3, [r7, #0]
 80025e8:	460b      	mov	r3, r1
 80025ea:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80025ec:	7afb      	ldrb	r3, [r7, #11]
 80025ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80025f2:	4613      	mov	r3, r2
 80025f4:	00db      	lsls	r3, r3, #3
 80025f6:	1a9b      	subs	r3, r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	3338      	adds	r3, #56	; 0x38
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	4413      	add	r3, r2
 8002600:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	2200      	movs	r2, #0
 8002612:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	2201      	movs	r2, #1
 8002618:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 800261a:	7afb      	ldrb	r3, [r7, #11]
 800261c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002620:	b2da      	uxtb	r2, r3
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	701a      	strb	r2, [r3, #0]
  
  if (hpcd->Init.dma_enable == 1U)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d102      	bne.n	8002634 <HAL_PCD_EP_Transmit+0x58>
  {
    ep->dma_addr = (uint32_t)pBuf;  
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	611a      	str	r2, [r3, #16]
  }
  
  if ((ep_addr & 0x7F) == 0)
 8002634:	7afb      	ldrb	r3, [r7, #11]
 8002636:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800263a:	2b00      	cmp	r3, #0
 800263c:	d109      	bne.n	8002652 <HAL_PCD_EP_Transmit+0x76>
  {
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6818      	ldr	r0, [r3, #0]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	b2db      	uxtb	r3, r3
 8002648:	461a      	mov	r2, r3
 800264a:	6979      	ldr	r1, [r7, #20]
 800264c:	f002 fce6 	bl	800501c <USB_EP0StartXfer>
 8002650:	e008      	b.n	8002664 <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6818      	ldr	r0, [r3, #0]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	b2db      	uxtb	r3, r3
 800265c:	461a      	mov	r2, r3
 800265e:	6979      	ldr	r1, [r7, #20]
 8002660:	f002 faae 	bl	8004bc0 <USB_EPStartXfer>
  }
  
  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3718      	adds	r7, #24
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b084      	sub	sp, #16
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
 8002676:	460b      	mov	r3, r1
 8002678:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
 800267a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800267e:	2b00      	cmp	r3, #0
 8002680:	da0b      	bge.n	800269a <HAL_PCD_EP_SetStall+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002682:	78fb      	ldrb	r3, [r7, #3]
 8002684:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002688:	4613      	mov	r3, r2
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	1a9b      	subs	r3, r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	3338      	adds	r3, #56	; 0x38
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	4413      	add	r3, r2
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	e009      	b.n	80026ae <HAL_PCD_EP_SetStall+0x40>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800269a:	78fa      	ldrb	r2, [r7, #3]
 800269c:	4613      	mov	r3, r2
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	1a9b      	subs	r3, r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	4413      	add	r3, r2
 80026ac:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 1U;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2201      	movs	r2, #1
 80026b2:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 80026b4:	78fb      	ldrb	r3, [r7, #3]
 80026b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80026c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	09db      	lsrs	r3, r3, #7
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	461a      	mov	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	705a      	strb	r2, [r3, #1]
  
  
  __HAL_LOCK(hpcd); 
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d101      	bne.n	80026de <HAL_PCD_EP_SetStall+0x70>
 80026da:	2302      	movs	r3, #2
 80026dc:	e01e      	b.n	800271c <HAL_PCD_EP_SetStall+0xae>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_EPSetStall(hpcd->Instance , ep);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68f9      	ldr	r1, [r7, #12]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f002 fe42 	bl	8005376 <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 80026f2:	78fb      	ldrb	r3, [r7, #3]
 80026f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10a      	bne.n	8002712 <HAL_PCD_EP_SetStall+0xa4>
  {
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6818      	ldr	r0, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	b2d9      	uxtb	r1, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 800270c:	461a      	mov	r2, r3
 800270e:	f003 f824 	bl	800575a <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd); 
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  
  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	460b      	mov	r3, r1
 800272e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
 8002730:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002734:	2b00      	cmp	r3, #0
 8002736:	da0b      	bge.n	8002750 <HAL_PCD_EP_ClrStall+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002738:	78fb      	ldrb	r3, [r7, #3]
 800273a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800273e:	4613      	mov	r3, r2
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	1a9b      	subs	r3, r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	3338      	adds	r3, #56	; 0x38
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	4413      	add	r3, r2
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	e009      	b.n	8002764 <HAL_PCD_EP_ClrStall+0x40>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002750:	78fa      	ldrb	r2, [r7, #3]
 8002752:	4613      	mov	r3, r2
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	1a9b      	subs	r3, r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	4413      	add	r3, r2
 8002762:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0U;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 800276a:	78fb      	ldrb	r3, [r7, #3]
 800276c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002770:	b2da      	uxtb	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8002776:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800277a:	b2db      	uxtb	r3, r3
 800277c:	09db      	lsrs	r3, r3, #7
 800277e:	b2db      	uxtb	r3, r3
 8002780:	461a      	mov	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 800278c:	2b01      	cmp	r3, #1
 800278e:	d101      	bne.n	8002794 <HAL_PCD_EP_ClrStall+0x70>
 8002790:	2302      	movs	r3, #2
 8002792:	e00e      	b.n	80027b2 <HAL_PCD_EP_ClrStall+0x8e>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_EPClearStall(hpcd->Instance , ep);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68f9      	ldr	r1, [r7, #12]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f002 fe54 	bl	8005450 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    
  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum  endpoint number   
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b08a      	sub	sp, #40	; 0x28
 80027be:	af02      	add	r7, sp, #8
 80027c0:	6078      	str	r0, [r7, #4]
 80027c2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	617b      	str	r3, [r7, #20]
  USB_OTG_EPTypeDef *ep;
  int32_t len = 0U;
 80027ca:	2300      	movs	r3, #0
 80027cc:	61fb      	str	r3, [r7, #28]
  uint32_t len32b;
  uint32_t fifoemptymsk = 0U;
 80027ce:	2300      	movs	r3, #0
 80027d0:	613b      	str	r3, [r7, #16]

  ep = &hpcd->IN_ep[epnum];
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	4613      	mov	r3, r2
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	1a9b      	subs	r3, r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	3338      	adds	r3, #56	; 0x38
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	4413      	add	r3, r2
 80027e2:	60fb      	str	r3, [r7, #12]
  len = ep->xfer_len - ep->xfer_count;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	695a      	ldr	r2, [r3, #20]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	61fb      	str	r3, [r7, #28]
  
  if (len > ep->maxpacket)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d202      	bcs.n	8002800 <PCD_WriteEmptyTxFifo+0x46>
  {
    len = ep->maxpacket;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	61fb      	str	r3, [r7, #28]
  }
  
  
  len32b = (len + 3U) / 4U;
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	3303      	adds	r3, #3
 8002804:	089b      	lsrs	r3, r3, #2
 8002806:	61bb      	str	r3, [r7, #24]
 
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8002808:	e02b      	b.n	8002862 <PCD_WriteEmptyTxFifo+0xa8>
          (ep->xfer_count < ep->xfer_len) &&
            (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	695a      	ldr	r2, [r3, #20]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	61fb      	str	r3, [r7, #28]
    
    if (len > ep->maxpacket)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	429a      	cmp	r2, r3
 800281e:	d202      	bcs.n	8002826 <PCD_WriteEmptyTxFifo+0x6c>
    {
      len = ep->maxpacket;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	3303      	adds	r3, #3
 800282a:	089b      	lsrs	r3, r3, #2
 800282c:	61bb      	str	r3, [r7, #24]
    
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	68d9      	ldr	r1, [r3, #12]
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	b2da      	uxtb	r2, r3
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	b298      	uxth	r0, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	b2db      	uxtb	r3, r3
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	4603      	mov	r3, r0
 8002844:	6978      	ldr	r0, [r7, #20]
 8002846:	f002 fd3a 	bl	80052be <USB_WritePacket>
    
    ep->xfer_buff  += len;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	68da      	ldr	r2, [r3, #12]
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	441a      	add	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	699a      	ldr	r2, [r3, #24]
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	441a      	add	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	619a      	str	r2, [r3, #24]
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	015a      	lsls	r2, r3, #5
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	4413      	add	r3, r2
 800286a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	b29b      	uxth	r3, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	429a      	cmp	r2, r3
 8002876:	d209      	bcs.n	800288c <PCD_WriteEmptyTxFifo+0xd2>
          (ep->xfer_count < ep->xfer_len) &&
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	699a      	ldr	r2, [r3, #24]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	695b      	ldr	r3, [r3, #20]
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8002880:	429a      	cmp	r2, r3
 8002882:	d203      	bcs.n	800288c <PCD_WriteEmptyTxFifo+0xd2>
            (ep->xfer_len != 0U))
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	695b      	ldr	r3, [r3, #20]
          (ep->xfer_count < ep->xfer_len) &&
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1be      	bne.n	800280a <PCD_WriteEmptyTxFifo+0x50>
  }
  
  if(len <= 0U)
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10f      	bne.n	80028b2 <PCD_WriteEmptyTxFifo+0xf8>
  {
    fifoemptymsk = 0x1U << epnum;
 8002892:	2201      	movs	r2, #1
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	613b      	str	r3, [r7, #16]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	43db      	mvns	r3, r3
 80028a8:	6979      	ldr	r1, [r7, #20]
 80028aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80028ae:	4013      	ands	r3, r2
 80028b0:	634b      	str	r3, [r1, #52]	; 0x34
    
  }
  
  return HAL_OK;  
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3720      	adds	r7, #32
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	460b      	mov	r3, r1
 80028c6:	70fb      	strb	r3, [r7, #3]
 80028c8:	4613      	mov	r3, r2
 80028ca:	803b      	strh	r3, [r7, #0]
  uint8_t i = 0;
 80028cc:	2300      	movs	r3, #0
 80028ce:	73fb      	strb	r3, [r7, #15]
  uint32_t Tx_Offset = 0U;
 80028d0:	2300      	movs	r3, #0
 80028d2:	60bb      	str	r3, [r7, #8]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028da:	60bb      	str	r3, [r7, #8]
  
  if(fifo == 0)
 80028dc:	78fb      	ldrb	r3, [r7, #3]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d107      	bne.n	80028f2 <HAL_PCDEx_SetTxFiFo+0x36>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);
 80028e2:	883b      	ldrh	r3, [r7, #0]
 80028e4:	0419      	lsls	r1, r3, #16
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	430a      	orrs	r2, r1
 80028ee:	629a      	str	r2, [r3, #40]	; 0x28
 80028f0:	e028      	b.n	8002944 <HAL_PCDEx_SetTxFiFo+0x88>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f8:	0c1b      	lsrs	r3, r3, #16
 80028fa:	68ba      	ldr	r2, [r7, #8]
 80028fc:	4413      	add	r3, r2
 80028fe:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < (fifo - 1); i++)
 8002900:	2300      	movs	r3, #0
 8002902:	73fb      	strb	r3, [r7, #15]
 8002904:	e00d      	b.n	8002922 <HAL_PCDEx_SetTxFiFo+0x66>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16U);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	7bfb      	ldrb	r3, [r7, #15]
 800290c:	3340      	adds	r3, #64	; 0x40
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4413      	add	r3, r2
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	0c1b      	lsrs	r3, r3, #16
 8002916:	68ba      	ldr	r2, [r7, #8]
 8002918:	4413      	add	r3, r2
 800291a:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < (fifo - 1); i++)
 800291c:	7bfb      	ldrb	r3, [r7, #15]
 800291e:	3301      	adds	r3, #1
 8002920:	73fb      	strb	r3, [r7, #15]
 8002922:	7bfa      	ldrb	r2, [r7, #15]
 8002924:	78fb      	ldrb	r3, [r7, #3]
 8002926:	3b01      	subs	r3, #1
 8002928:	429a      	cmp	r2, r3
 800292a:	dbec      	blt.n	8002906 <HAL_PCDEx_SetTxFiFo+0x4a>
    }
    
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);        
 800292c:	883b      	ldrh	r3, [r7, #0]
 800292e:	0418      	lsls	r0, r3, #16
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6819      	ldr	r1, [r3, #0]
 8002934:	78fb      	ldrb	r3, [r7, #3]
 8002936:	3b01      	subs	r3, #1
 8002938:	68ba      	ldr	r2, [r7, #8]
 800293a:	4302      	orrs	r2, r0
 800293c:	3340      	adds	r3, #64	; 0x40
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	440b      	add	r3, r1
 8002942:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3714      	adds	r7, #20
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
 800295a:	460b      	mov	r3, r1
 800295c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	887a      	ldrh	r2, [r7, #2]
 8002964:	625a      	str	r2, [r3, #36]	; 0x24
  
  return HAL_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e22a      	b.n	8002ddc <HAL_RCC_OscConfig+0x468>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d075      	beq.n	8002a7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002992:	4b88      	ldr	r3, [pc, #544]	; (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 030c 	and.w	r3, r3, #12
 800299a:	2b04      	cmp	r3, #4
 800299c:	d00c      	beq.n	80029b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800299e:	4b85      	ldr	r3, [pc, #532]	; (8002bb4 <HAL_RCC_OscConfig+0x240>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029a6:	2b08      	cmp	r3, #8
 80029a8:	d112      	bne.n	80029d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029aa:	4b82      	ldr	r3, [pc, #520]	; (8002bb4 <HAL_RCC_OscConfig+0x240>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029b6:	d10b      	bne.n	80029d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b8:	4b7e      	ldr	r3, [pc, #504]	; (8002bb4 <HAL_RCC_OscConfig+0x240>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d05b      	beq.n	8002a7c <HAL_RCC_OscConfig+0x108>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d157      	bne.n	8002a7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e205      	b.n	8002ddc <HAL_RCC_OscConfig+0x468>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d8:	d106      	bne.n	80029e8 <HAL_RCC_OscConfig+0x74>
 80029da:	4b76      	ldr	r3, [pc, #472]	; (8002bb4 <HAL_RCC_OscConfig+0x240>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a75      	ldr	r2, [pc, #468]	; (8002bb4 <HAL_RCC_OscConfig+0x240>)
 80029e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	e01d      	b.n	8002a24 <HAL_RCC_OscConfig+0xb0>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029f0:	d10c      	bne.n	8002a0c <HAL_RCC_OscConfig+0x98>
 80029f2:	4b70      	ldr	r3, [pc, #448]	; (8002bb4 <HAL_RCC_OscConfig+0x240>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a6f      	ldr	r2, [pc, #444]	; (8002bb4 <HAL_RCC_OscConfig+0x240>)
 80029f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029fc:	6013      	str	r3, [r2, #0]
 80029fe:	4b6d      	ldr	r3, [pc, #436]	; (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a6c      	ldr	r2, [pc, #432]	; (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a08:	6013      	str	r3, [r2, #0]
 8002a0a:	e00b      	b.n	8002a24 <HAL_RCC_OscConfig+0xb0>
 8002a0c:	4b69      	ldr	r3, [pc, #420]	; (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a68      	ldr	r2, [pc, #416]	; (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002a12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a16:	6013      	str	r3, [r2, #0]
 8002a18:	4b66      	ldr	r3, [pc, #408]	; (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a65      	ldr	r2, [pc, #404]	; (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002a1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d013      	beq.n	8002a54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2c:	f7fd fe18 	bl	8000660 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a34:	f7fd fe14 	bl	8000660 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b64      	cmp	r3, #100	; 0x64
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e1ca      	b.n	8002ddc <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a46:	4b5b      	ldr	r3, [pc, #364]	; (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d0f0      	beq.n	8002a34 <HAL_RCC_OscConfig+0xc0>
 8002a52:	e014      	b.n	8002a7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a54:	f7fd fe04 	bl	8000660 <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a5c:	f7fd fe00 	bl	8000660 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b64      	cmp	r3, #100	; 0x64
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e1b6      	b.n	8002ddc <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a6e:	4b51      	ldr	r3, [pc, #324]	; (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1f0      	bne.n	8002a5c <HAL_RCC_OscConfig+0xe8>
 8002a7a:	e000      	b.n	8002a7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d063      	beq.n	8002b52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a8a:	4b4a      	ldr	r3, [pc, #296]	; (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 030c 	and.w	r3, r3, #12
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00b      	beq.n	8002aae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a96:	4b47      	ldr	r3, [pc, #284]	; (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a9e:	2b08      	cmp	r3, #8
 8002aa0:	d11c      	bne.n	8002adc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aa2:	4b44      	ldr	r3, [pc, #272]	; (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d116      	bne.n	8002adc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aae:	4b41      	ldr	r3, [pc, #260]	; (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d005      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x152>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d001      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e18a      	b.n	8002ddc <HAL_RCC_OscConfig+0x468>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac6:	4b3b      	ldr	r3, [pc, #236]	; (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	4937      	ldr	r1, [pc, #220]	; (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ada:	e03a      	b.n	8002b52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d020      	beq.n	8002b26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ae4:	4b34      	ldr	r3, [pc, #208]	; (8002bb8 <HAL_RCC_OscConfig+0x244>)
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aea:	f7fd fdb9 	bl	8000660 <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af0:	e008      	b.n	8002b04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002af2:	f7fd fdb5 	bl	8000660 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e16b      	b.n	8002ddc <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b04:	4b2b      	ldr	r3, [pc, #172]	; (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d0f0      	beq.n	8002af2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b10:	4b28      	ldr	r3, [pc, #160]	; (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	4925      	ldr	r1, [pc, #148]	; (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	600b      	str	r3, [r1, #0]
 8002b24:	e015      	b.n	8002b52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b26:	4b24      	ldr	r3, [pc, #144]	; (8002bb8 <HAL_RCC_OscConfig+0x244>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2c:	f7fd fd98 	bl	8000660 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b34:	f7fd fd94 	bl	8000660 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e14a      	b.n	8002ddc <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b46:	4b1b      	ldr	r3, [pc, #108]	; (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1f0      	bne.n	8002b34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0308 	and.w	r3, r3, #8
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d036      	beq.n	8002bcc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d016      	beq.n	8002b94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b66:	4b15      	ldr	r3, [pc, #84]	; (8002bbc <HAL_RCC_OscConfig+0x248>)
 8002b68:	2201      	movs	r2, #1
 8002b6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b6c:	f7fd fd78 	bl	8000660 <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b74:	f7fd fd74 	bl	8000660 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e12a      	b.n	8002ddc <HAL_RCC_OscConfig+0x468>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b86:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002b88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0f0      	beq.n	8002b74 <HAL_RCC_OscConfig+0x200>
 8002b92:	e01b      	b.n	8002bcc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b94:	4b09      	ldr	r3, [pc, #36]	; (8002bbc <HAL_RCC_OscConfig+0x248>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b9a:	f7fd fd61 	bl	8000660 <HAL_GetTick>
 8002b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ba0:	e00e      	b.n	8002bc0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ba2:	f7fd fd5d 	bl	8000660 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d907      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e113      	b.n	8002ddc <HAL_RCC_OscConfig+0x468>
 8002bb4:	40023800 	.word	0x40023800
 8002bb8:	42470000 	.word	0x42470000
 8002bbc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bc0:	4b88      	ldr	r3, [pc, #544]	; (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002bc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1ea      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f000 8097 	beq.w	8002d08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bde:	4b81      	ldr	r3, [pc, #516]	; (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10f      	bne.n	8002c0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	60fb      	str	r3, [r7, #12]
 8002bee:	4b7d      	ldr	r3, [pc, #500]	; (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	4a7c      	ldr	r2, [pc, #496]	; (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bfa:	4b7a      	ldr	r3, [pc, #488]	; (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002c06:	2301      	movs	r3, #1
 8002c08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c0a:	4b77      	ldr	r3, [pc, #476]	; (8002de8 <HAL_RCC_OscConfig+0x474>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d118      	bne.n	8002c48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c16:	4b74      	ldr	r3, [pc, #464]	; (8002de8 <HAL_RCC_OscConfig+0x474>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a73      	ldr	r2, [pc, #460]	; (8002de8 <HAL_RCC_OscConfig+0x474>)
 8002c1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c22:	f7fd fd1d 	bl	8000660 <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c28:	e008      	b.n	8002c3c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c2a:	f7fd fd19 	bl	8000660 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e0cf      	b.n	8002ddc <HAL_RCC_OscConfig+0x468>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c3c:	4b6a      	ldr	r3, [pc, #424]	; (8002de8 <HAL_RCC_OscConfig+0x474>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0f0      	beq.n	8002c2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d106      	bne.n	8002c5e <HAL_RCC_OscConfig+0x2ea>
 8002c50:	4b64      	ldr	r3, [pc, #400]	; (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c54:	4a63      	ldr	r2, [pc, #396]	; (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002c56:	f043 0301 	orr.w	r3, r3, #1
 8002c5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c5c:	e01c      	b.n	8002c98 <HAL_RCC_OscConfig+0x324>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	2b05      	cmp	r3, #5
 8002c64:	d10c      	bne.n	8002c80 <HAL_RCC_OscConfig+0x30c>
 8002c66:	4b5f      	ldr	r3, [pc, #380]	; (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6a:	4a5e      	ldr	r2, [pc, #376]	; (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002c6c:	f043 0304 	orr.w	r3, r3, #4
 8002c70:	6713      	str	r3, [r2, #112]	; 0x70
 8002c72:	4b5c      	ldr	r3, [pc, #368]	; (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c76:	4a5b      	ldr	r2, [pc, #364]	; (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002c78:	f043 0301 	orr.w	r3, r3, #1
 8002c7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c7e:	e00b      	b.n	8002c98 <HAL_RCC_OscConfig+0x324>
 8002c80:	4b58      	ldr	r3, [pc, #352]	; (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c84:	4a57      	ldr	r2, [pc, #348]	; (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002c86:	f023 0301 	bic.w	r3, r3, #1
 8002c8a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c8c:	4b55      	ldr	r3, [pc, #340]	; (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c90:	4a54      	ldr	r2, [pc, #336]	; (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002c92:	f023 0304 	bic.w	r3, r3, #4
 8002c96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d015      	beq.n	8002ccc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca0:	f7fd fcde 	bl	8000660 <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca6:	e00a      	b.n	8002cbe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ca8:	f7fd fcda 	bl	8000660 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e08e      	b.n	8002ddc <HAL_RCC_OscConfig+0x468>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cbe:	4b49      	ldr	r3, [pc, #292]	; (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d0ee      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x334>
 8002cca:	e014      	b.n	8002cf6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ccc:	f7fd fcc8 	bl	8000660 <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cd2:	e00a      	b.n	8002cea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cd4:	f7fd fcc4 	bl	8000660 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e078      	b.n	8002ddc <HAL_RCC_OscConfig+0x468>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cea:	4b3e      	ldr	r3, [pc, #248]	; (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1ee      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cf6:	7dfb      	ldrb	r3, [r7, #23]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d105      	bne.n	8002d08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cfc:	4b39      	ldr	r3, [pc, #228]	; (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d00:	4a38      	ldr	r2, [pc, #224]	; (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002d02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d064      	beq.n	8002dda <HAL_RCC_OscConfig+0x466>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d10:	4b34      	ldr	r3, [pc, #208]	; (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 030c 	and.w	r3, r3, #12
 8002d18:	2b08      	cmp	r3, #8
 8002d1a:	d05c      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x462>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d141      	bne.n	8002da8 <HAL_RCC_OscConfig+0x434>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d24:	4b31      	ldr	r3, [pc, #196]	; (8002dec <HAL_RCC_OscConfig+0x478>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2a:	f7fd fc99 	bl	8000660 <HAL_GetTick>
 8002d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d30:	e008      	b.n	8002d44 <HAL_RCC_OscConfig+0x3d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d32:	f7fd fc95 	bl	8000660 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x3d0>
          {
            return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e04b      	b.n	8002ddc <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d44:	4b27      	ldr	r3, [pc, #156]	; (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1f0      	bne.n	8002d32 <HAL_RCC_OscConfig+0x3be>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	69da      	ldr	r2, [r3, #28]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	431a      	orrs	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5e:	019b      	lsls	r3, r3, #6
 8002d60:	431a      	orrs	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d66:	085b      	lsrs	r3, r3, #1
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	041b      	lsls	r3, r3, #16
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d72:	061b      	lsls	r3, r3, #24
 8002d74:	491b      	ldr	r1, [pc, #108]	; (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d7a:	4b1c      	ldr	r3, [pc, #112]	; (8002dec <HAL_RCC_OscConfig+0x478>)
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d80:	f7fd fc6e 	bl	8000660 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d88:	f7fd fc6a 	bl	8000660 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e020      	b.n	8002ddc <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d9a:	4b12      	ldr	r3, [pc, #72]	; (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d0f0      	beq.n	8002d88 <HAL_RCC_OscConfig+0x414>
 8002da6:	e018      	b.n	8002dda <HAL_RCC_OscConfig+0x466>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002da8:	4b10      	ldr	r3, [pc, #64]	; (8002dec <HAL_RCC_OscConfig+0x478>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dae:	f7fd fc57 	bl	8000660 <HAL_GetTick>
 8002db2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002db4:	e008      	b.n	8002dc8 <HAL_RCC_OscConfig+0x454>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002db6:	f7fd fc53 	bl	8000660 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x454>
          {
            return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e009      	b.n	8002ddc <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dc8:	4b06      	ldr	r3, [pc, #24]	; (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1f0      	bne.n	8002db6 <HAL_RCC_OscConfig+0x442>
 8002dd4:	e001      	b.n	8002dda <HAL_RCC_OscConfig+0x466>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e000      	b.n	8002ddc <HAL_RCC_OscConfig+0x468>
    }
  }
  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3718      	adds	r7, #24
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	40023800 	.word	0x40023800
 8002de8:	40007000 	.word	0x40007000
 8002dec:	42470060 	.word	0x42470060

08002df0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e0ca      	b.n	8002f9a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e04:	4b67      	ldr	r3, [pc, #412]	; (8002fa4 <HAL_RCC_ClockConfig+0x1b4>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 030f 	and.w	r3, r3, #15
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d90c      	bls.n	8002e2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e12:	4b64      	ldr	r3, [pc, #400]	; (8002fa4 <HAL_RCC_ClockConfig+0x1b4>)
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	b2d2      	uxtb	r2, r2
 8002e18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e1a:	4b62      	ldr	r3, [pc, #392]	; (8002fa4 <HAL_RCC_ClockConfig+0x1b4>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 030f 	and.w	r3, r3, #15
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d001      	beq.n	8002e2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e0b6      	b.n	8002f9a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d020      	beq.n	8002e7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d005      	beq.n	8002e50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e44:	4b58      	ldr	r3, [pc, #352]	; (8002fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	4a57      	ldr	r2, [pc, #348]	; (8002fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0308 	and.w	r3, r3, #8
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d005      	beq.n	8002e68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e5c:	4b52      	ldr	r3, [pc, #328]	; (8002fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	4a51      	ldr	r2, [pc, #324]	; (8002fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e68:	4b4f      	ldr	r3, [pc, #316]	; (8002fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	494c      	ldr	r1, [pc, #304]	; (8002fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d044      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d107      	bne.n	8002e9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e8e:	4b46      	ldr	r3, [pc, #280]	; (8002fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d119      	bne.n	8002ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e07d      	b.n	8002f9a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d003      	beq.n	8002eae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eaa:	2b03      	cmp	r3, #3
 8002eac:	d107      	bne.n	8002ebe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eae:	4b3e      	ldr	r3, [pc, #248]	; (8002fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d109      	bne.n	8002ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e06d      	b.n	8002f9a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ebe:	4b3a      	ldr	r3, [pc, #232]	; (8002fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e065      	b.n	8002f9a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ece:	4b36      	ldr	r3, [pc, #216]	; (8002fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f023 0203 	bic.w	r2, r3, #3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	4933      	ldr	r1, [pc, #204]	; (8002fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ee0:	f7fd fbbe 	bl	8000660 <HAL_GetTick>
 8002ee4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ee6:	e00a      	b.n	8002efe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ee8:	f7fd fbba 	bl	8000660 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e04d      	b.n	8002f9a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002efe:	4b2a      	ldr	r3, [pc, #168]	; (8002fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f003 020c 	and.w	r2, r3, #12
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d1eb      	bne.n	8002ee8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f10:	4b24      	ldr	r3, [pc, #144]	; (8002fa4 <HAL_RCC_ClockConfig+0x1b4>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 030f 	and.w	r3, r3, #15
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d20c      	bcs.n	8002f38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f1e:	4b21      	ldr	r3, [pc, #132]	; (8002fa4 <HAL_RCC_ClockConfig+0x1b4>)
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	b2d2      	uxtb	r2, r2
 8002f24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f26:	4b1f      	ldr	r3, [pc, #124]	; (8002fa4 <HAL_RCC_ClockConfig+0x1b4>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	683a      	ldr	r2, [r7, #0]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d001      	beq.n	8002f38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e030      	b.n	8002f9a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0304 	and.w	r3, r3, #4
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d008      	beq.n	8002f56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f44:	4b18      	ldr	r3, [pc, #96]	; (8002fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	4915      	ldr	r1, [pc, #84]	; (8002fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0308 	and.w	r3, r3, #8
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d009      	beq.n	8002f76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f62:	4b11      	ldr	r3, [pc, #68]	; (8002fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	490d      	ldr	r1, [pc, #52]	; (8002fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f76:	f000 f81d 	bl	8002fb4 <HAL_RCC_GetSysClockFreq>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	4b0a      	ldr	r3, [pc, #40]	; (8002fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	091b      	lsrs	r3, r3, #4
 8002f82:	f003 030f 	and.w	r3, r3, #15
 8002f86:	4909      	ldr	r1, [pc, #36]	; (8002fac <HAL_RCC_ClockConfig+0x1bc>)
 8002f88:	5ccb      	ldrb	r3, [r1, r3]
 8002f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f8e:	4a08      	ldr	r2, [pc, #32]	; (8002fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8002f92:	2000      	movs	r0, #0
 8002f94:	f7fd fb20 	bl	80005d8 <HAL_InitTick>

  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	40023c00 	.word	0x40023c00
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	0800aec8 	.word	0x0800aec8
 8002fb0:	20000118 	.word	0x20000118

08002fb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fb8:	b094      	sub	sp, #80	; 0x50
 8002fba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	647b      	str	r3, [r7, #68]	; 0x44
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fcc:	4b79      	ldr	r3, [pc, #484]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f003 030c 	and.w	r3, r3, #12
 8002fd4:	2b08      	cmp	r3, #8
 8002fd6:	d00d      	beq.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x40>
 8002fd8:	2b08      	cmp	r3, #8
 8002fda:	f200 80e1 	bhi.w	80031a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d002      	beq.n	8002fe8 <HAL_RCC_GetSysClockFreq+0x34>
 8002fe2:	2b04      	cmp	r3, #4
 8002fe4:	d003      	beq.n	8002fee <HAL_RCC_GetSysClockFreq+0x3a>
 8002fe6:	e0db      	b.n	80031a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fe8:	4b73      	ldr	r3, [pc, #460]	; (80031b8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002fea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002fec:	e0db      	b.n	80031a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fee:	4b73      	ldr	r3, [pc, #460]	; (80031bc <HAL_RCC_GetSysClockFreq+0x208>)
 8002ff0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ff2:	e0d8      	b.n	80031a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ff4:	4b6f      	ldr	r3, [pc, #444]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ffc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ffe:	4b6d      	ldr	r3, [pc, #436]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d063      	beq.n	80030d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800300a:	4b6a      	ldr	r3, [pc, #424]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	099b      	lsrs	r3, r3, #6
 8003010:	2200      	movs	r2, #0
 8003012:	63bb      	str	r3, [r7, #56]	; 0x38
 8003014:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800301c:	633b      	str	r3, [r7, #48]	; 0x30
 800301e:	2300      	movs	r3, #0
 8003020:	637b      	str	r3, [r7, #52]	; 0x34
 8003022:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003026:	4622      	mov	r2, r4
 8003028:	462b      	mov	r3, r5
 800302a:	f04f 0000 	mov.w	r0, #0
 800302e:	f04f 0100 	mov.w	r1, #0
 8003032:	0159      	lsls	r1, r3, #5
 8003034:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003038:	0150      	lsls	r0, r2, #5
 800303a:	4602      	mov	r2, r0
 800303c:	460b      	mov	r3, r1
 800303e:	4621      	mov	r1, r4
 8003040:	1a51      	subs	r1, r2, r1
 8003042:	6139      	str	r1, [r7, #16]
 8003044:	4629      	mov	r1, r5
 8003046:	eb63 0301 	sbc.w	r3, r3, r1
 800304a:	617b      	str	r3, [r7, #20]
 800304c:	f04f 0200 	mov.w	r2, #0
 8003050:	f04f 0300 	mov.w	r3, #0
 8003054:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003058:	4659      	mov	r1, fp
 800305a:	018b      	lsls	r3, r1, #6
 800305c:	4651      	mov	r1, sl
 800305e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003062:	4651      	mov	r1, sl
 8003064:	018a      	lsls	r2, r1, #6
 8003066:	4651      	mov	r1, sl
 8003068:	ebb2 0801 	subs.w	r8, r2, r1
 800306c:	4659      	mov	r1, fp
 800306e:	eb63 0901 	sbc.w	r9, r3, r1
 8003072:	f04f 0200 	mov.w	r2, #0
 8003076:	f04f 0300 	mov.w	r3, #0
 800307a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800307e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003082:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003086:	4690      	mov	r8, r2
 8003088:	4699      	mov	r9, r3
 800308a:	4623      	mov	r3, r4
 800308c:	eb18 0303 	adds.w	r3, r8, r3
 8003090:	60bb      	str	r3, [r7, #8]
 8003092:	462b      	mov	r3, r5
 8003094:	eb49 0303 	adc.w	r3, r9, r3
 8003098:	60fb      	str	r3, [r7, #12]
 800309a:	f04f 0200 	mov.w	r2, #0
 800309e:	f04f 0300 	mov.w	r3, #0
 80030a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80030a6:	4629      	mov	r1, r5
 80030a8:	024b      	lsls	r3, r1, #9
 80030aa:	4621      	mov	r1, r4
 80030ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80030b0:	4621      	mov	r1, r4
 80030b2:	024a      	lsls	r2, r1, #9
 80030b4:	4610      	mov	r0, r2
 80030b6:	4619      	mov	r1, r3
 80030b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030ba:	2200      	movs	r2, #0
 80030bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80030be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030c4:	f7fd f8e4 	bl	8000290 <__aeabi_uldivmod>
 80030c8:	4602      	mov	r2, r0
 80030ca:	460b      	mov	r3, r1
 80030cc:	4613      	mov	r3, r2
 80030ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030d0:	e058      	b.n	8003184 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030d2:	4b38      	ldr	r3, [pc, #224]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	099b      	lsrs	r3, r3, #6
 80030d8:	2200      	movs	r2, #0
 80030da:	4618      	mov	r0, r3
 80030dc:	4611      	mov	r1, r2
 80030de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030e2:	623b      	str	r3, [r7, #32]
 80030e4:	2300      	movs	r3, #0
 80030e6:	627b      	str	r3, [r7, #36]	; 0x24
 80030e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80030ec:	4642      	mov	r2, r8
 80030ee:	464b      	mov	r3, r9
 80030f0:	f04f 0000 	mov.w	r0, #0
 80030f4:	f04f 0100 	mov.w	r1, #0
 80030f8:	0159      	lsls	r1, r3, #5
 80030fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030fe:	0150      	lsls	r0, r2, #5
 8003100:	4602      	mov	r2, r0
 8003102:	460b      	mov	r3, r1
 8003104:	4641      	mov	r1, r8
 8003106:	ebb2 0a01 	subs.w	sl, r2, r1
 800310a:	4649      	mov	r1, r9
 800310c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003110:	f04f 0200 	mov.w	r2, #0
 8003114:	f04f 0300 	mov.w	r3, #0
 8003118:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800311c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003120:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003124:	ebb2 040a 	subs.w	r4, r2, sl
 8003128:	eb63 050b 	sbc.w	r5, r3, fp
 800312c:	f04f 0200 	mov.w	r2, #0
 8003130:	f04f 0300 	mov.w	r3, #0
 8003134:	00eb      	lsls	r3, r5, #3
 8003136:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800313a:	00e2      	lsls	r2, r4, #3
 800313c:	4614      	mov	r4, r2
 800313e:	461d      	mov	r5, r3
 8003140:	4643      	mov	r3, r8
 8003142:	18e3      	adds	r3, r4, r3
 8003144:	603b      	str	r3, [r7, #0]
 8003146:	464b      	mov	r3, r9
 8003148:	eb45 0303 	adc.w	r3, r5, r3
 800314c:	607b      	str	r3, [r7, #4]
 800314e:	f04f 0200 	mov.w	r2, #0
 8003152:	f04f 0300 	mov.w	r3, #0
 8003156:	e9d7 4500 	ldrd	r4, r5, [r7]
 800315a:	4629      	mov	r1, r5
 800315c:	028b      	lsls	r3, r1, #10
 800315e:	4621      	mov	r1, r4
 8003160:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003164:	4621      	mov	r1, r4
 8003166:	028a      	lsls	r2, r1, #10
 8003168:	4610      	mov	r0, r2
 800316a:	4619      	mov	r1, r3
 800316c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800316e:	2200      	movs	r2, #0
 8003170:	61bb      	str	r3, [r7, #24]
 8003172:	61fa      	str	r2, [r7, #28]
 8003174:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003178:	f7fd f88a 	bl	8000290 <__aeabi_uldivmod>
 800317c:	4602      	mov	r2, r0
 800317e:	460b      	mov	r3, r1
 8003180:	4613      	mov	r3, r2
 8003182:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003184:	4b0b      	ldr	r3, [pc, #44]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	0c1b      	lsrs	r3, r3, #16
 800318a:	f003 0303 	and.w	r3, r3, #3
 800318e:	3301      	adds	r3, #1
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003194:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003198:	fbb2 f3f3 	udiv	r3, r2, r3
 800319c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800319e:	e002      	b.n	80031a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031a0:	4b05      	ldr	r3, [pc, #20]	; (80031b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80031a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3750      	adds	r7, #80	; 0x50
 80031ac:	46bd      	mov	sp, r7
 80031ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031b2:	bf00      	nop
 80031b4:	40023800 	.word	0x40023800
 80031b8:	00f42400 	.word	0x00f42400
 80031bc:	007a1200 	.word	0x007a1200

080031c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031c4:	4b03      	ldr	r3, [pc, #12]	; (80031d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80031c6:	681b      	ldr	r3, [r3, #0]
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	20000118 	.word	0x20000118

080031d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031dc:	f7ff fff0 	bl	80031c0 <HAL_RCC_GetHCLKFreq>
 80031e0:	4602      	mov	r2, r0
 80031e2:	4b05      	ldr	r3, [pc, #20]	; (80031f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	0a9b      	lsrs	r3, r3, #10
 80031e8:	f003 0307 	and.w	r3, r3, #7
 80031ec:	4903      	ldr	r1, [pc, #12]	; (80031fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80031ee:	5ccb      	ldrb	r3, [r1, r3]
 80031f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	40023800 	.word	0x40023800
 80031fc:	0800aed8 	.word	0x0800aed8

08003200 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003208:	2300      	movs	r3, #0
 800320a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800320c:	2300      	movs	r3, #0
 800320e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b00      	cmp	r3, #0
 800321a:	d105      	bne.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003224:	2b00      	cmp	r3, #0
 8003226:	d035      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003228:	4b62      	ldr	r3, [pc, #392]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800322a:	2200      	movs	r2, #0
 800322c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800322e:	f7fd fa17 	bl	8000660 <HAL_GetTick>
 8003232:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003234:	e008      	b.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003236:	f7fd fa13 	bl	8000660 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d901      	bls.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e0b0      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003248:	4b5b      	ldr	r3, [pc, #364]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1f0      	bne.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	019a      	lsls	r2, r3, #6
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	071b      	lsls	r3, r3, #28
 8003260:	4955      	ldr	r1, [pc, #340]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003262:	4313      	orrs	r3, r2
 8003264:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003268:	4b52      	ldr	r3, [pc, #328]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800326a:	2201      	movs	r2, #1
 800326c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800326e:	f7fd f9f7 	bl	8000660 <HAL_GetTick>
 8003272:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003274:	e008      	b.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003276:	f7fd f9f3 	bl	8000660 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d901      	bls.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e090      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003288:	4b4b      	ldr	r3, [pc, #300]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d0f0      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 8083 	beq.w	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80032a2:	2300      	movs	r3, #0
 80032a4:	60fb      	str	r3, [r7, #12]
 80032a6:	4b44      	ldr	r3, [pc, #272]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	4a43      	ldr	r2, [pc, #268]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80032ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032b0:	6413      	str	r3, [r2, #64]	; 0x40
 80032b2:	4b41      	ldr	r3, [pc, #260]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ba:	60fb      	str	r3, [r7, #12]
 80032bc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80032be:	4b3f      	ldr	r3, [pc, #252]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a3e      	ldr	r2, [pc, #248]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032c8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80032ca:	f7fd f9c9 	bl	8000660 <HAL_GetTick>
 80032ce:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80032d0:	e008      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80032d2:	f7fd f9c5 	bl	8000660 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d901      	bls.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e062      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80032e4:	4b35      	ldr	r3, [pc, #212]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d0f0      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032f0:	4b31      	ldr	r3, [pc, #196]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80032f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032f8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d02f      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	429a      	cmp	r2, r3
 800330c:	d028      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800330e:	4b2a      	ldr	r3, [pc, #168]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003312:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003316:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003318:	4b29      	ldr	r3, [pc, #164]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800331a:	2201      	movs	r2, #1
 800331c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800331e:	4b28      	ldr	r3, [pc, #160]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003324:	4a24      	ldr	r2, [pc, #144]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800332a:	4b23      	ldr	r3, [pc, #140]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800332c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	d014      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003336:	f7fd f993 	bl	8000660 <HAL_GetTick>
 800333a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800333c:	e00a      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800333e:	f7fd f98f 	bl	8000660 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	f241 3288 	movw	r2, #5000	; 0x1388
 800334c:	4293      	cmp	r3, r2
 800334e:	d901      	bls.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e02a      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003354:	4b18      	ldr	r3, [pc, #96]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d0ee      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003368:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800336c:	d10d      	bne.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800336e:	4b12      	ldr	r3, [pc, #72]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800337e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003382:	490d      	ldr	r1, [pc, #52]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003384:	4313      	orrs	r3, r2
 8003386:	608b      	str	r3, [r1, #8]
 8003388:	e005      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800338a:	4b0b      	ldr	r3, [pc, #44]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	4a0a      	ldr	r2, [pc, #40]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003390:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003394:	6093      	str	r3, [r2, #8]
 8003396:	4b08      	ldr	r3, [pc, #32]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003398:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033a2:	4905      	ldr	r1, [pc, #20]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	42470068 	.word	0x42470068
 80033b8:	40023800 	.word	0x40023800
 80033bc:	40007000 	.word	0x40007000
 80033c0:	42470e40 	.word	0x42470e40

080033c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b087      	sub	sp, #28
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80033d4:	2300      	movs	r3, #0
 80033d6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80033d8:	2300      	movs	r3, #0
 80033da:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d13e      	bne.n	8003460 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80033e2:	4b23      	ldr	r3, [pc, #140]	; (8003470 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033ea:	60fb      	str	r3, [r7, #12]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d005      	beq.n	80033fe <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d12f      	bne.n	8003458 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80033f8:	4b1e      	ldr	r3, [pc, #120]	; (8003474 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80033fa:	617b      	str	r3, [r7, #20]
          break;
 80033fc:	e02f      	b.n	800345e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80033fe:	4b1c      	ldr	r3, [pc, #112]	; (8003470 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003406:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800340a:	d108      	bne.n	800341e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800340c:	4b18      	ldr	r3, [pc, #96]	; (8003470 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003414:	4a18      	ldr	r2, [pc, #96]	; (8003478 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003416:	fbb2 f3f3 	udiv	r3, r2, r3
 800341a:	613b      	str	r3, [r7, #16]
 800341c:	e007      	b.n	800342e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800341e:	4b14      	ldr	r3, [pc, #80]	; (8003470 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003426:	4a15      	ldr	r2, [pc, #84]	; (800347c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003428:	fbb2 f3f3 	udiv	r3, r2, r3
 800342c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800342e:	4b10      	ldr	r3, [pc, #64]	; (8003470 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003430:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003434:	099b      	lsrs	r3, r3, #6
 8003436:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	fb02 f303 	mul.w	r3, r2, r3
 8003440:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003442:	4b0b      	ldr	r3, [pc, #44]	; (8003470 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003444:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003448:	0f1b      	lsrs	r3, r3, #28
 800344a:	f003 0307 	and.w	r3, r3, #7
 800344e:	68ba      	ldr	r2, [r7, #8]
 8003450:	fbb2 f3f3 	udiv	r3, r2, r3
 8003454:	617b      	str	r3, [r7, #20]
          break;
 8003456:	e002      	b.n	800345e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003458:	2300      	movs	r3, #0
 800345a:	617b      	str	r3, [r7, #20]
          break;
 800345c:	bf00      	nop
        }
      }
      break;
 800345e:	bf00      	nop
    }
  }
  return frequency;
 8003460:	697b      	ldr	r3, [r7, #20]
}
 8003462:	4618      	mov	r0, r3
 8003464:	371c      	adds	r7, #28
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	40023800 	.word	0x40023800
 8003474:	00bb8000 	.word	0x00bb8000
 8003478:	007a1200 	.word	0x007a1200
 800347c:	00f42400 	.word	0x00f42400

08003480 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e056      	b.n	8003540 <HAL_SPI_Init+0xc0>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d106      	bne.n	80034b2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f004 fd23 	bl	8007ef8 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2202      	movs	r2, #2
 80034b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034c8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685a      	ldr	r2, [r3, #4]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	431a      	orrs	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	431a      	orrs	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	431a      	orrs	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	431a      	orrs	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034ee:	431a      	orrs	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	69db      	ldr	r3, [r3, #28]
 80034f4:	431a      	orrs	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	ea42 0103 	orr.w	r1, r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	430a      	orrs	r2, r1
 8003508:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	0c1b      	lsrs	r3, r3, #16
 8003510:	f003 0104 	and.w	r1, r3, #4
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	430a      	orrs	r2, r1
 800351e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	69da      	ldr	r2, [r3, #28]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800352e:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3708      	adds	r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <HAL_TIM_Base_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e01d      	b.n	8003596 <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d106      	bne.n	8003574 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f004 fcf4 	bl	8007f5c <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2202      	movs	r2, #2
 8003578:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	3304      	adds	r3, #4
 8003584:	4619      	mov	r1, r3
 8003586:	4610      	mov	r0, r2
 8003588:	f000 fb8a 	bl	8003ca0 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <HAL_TIM_Base_Start>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800359e:	b480      	push	{r7}
 80035a0:	b083      	sub	sp, #12
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2202      	movs	r2, #2
 80035aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f042 0201 	orr.w	r2, r2, #1
 80035bc:	601a      	str	r2, [r3, #0]
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <HAL_TIM_Base_Start_IT>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68da      	ldr	r2, [r3, #12]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f042 0201 	orr.w	r2, r2, #1
 80035ea:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f042 0201 	orr.w	r2, r2, #1
 80035fa:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr

0800360a <HAL_TIM_PWM_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b082      	sub	sp, #8
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d101      	bne.n	800361c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e01d      	b.n	8003658 <HAL_TIM_PWM_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2b00      	cmp	r3, #0
 8003626:	d106      	bne.n	8003636 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f004 fd63 	bl	80080fc <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2202      	movs	r2, #2
 800363a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	3304      	adds	r3, #4
 8003646:	4619      	mov	r1, r3
 8003648:	4610      	mov	r0, r2
 800364a:	f000 fb29 	bl	8003ca0 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}  
 8003658:	4618      	mov	r0, r3
 800365a:	3708      	adds	r7, #8
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2201      	movs	r2, #1
 8003670:	6839      	ldr	r1, [r7, #0]
 8003672:	4618      	mov	r0, r3
 8003674:	f000 fc36 	bl	8003ee4 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a10      	ldr	r2, [pc, #64]	; (80036c0 <HAL_TIM_PWM_Start+0x60>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d004      	beq.n	800368c <HAL_TIM_PWM_Start+0x2c>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a0f      	ldr	r2, [pc, #60]	; (80036c4 <HAL_TIM_PWM_Start+0x64>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d101      	bne.n	8003690 <HAL_TIM_PWM_Start+0x30>
 800368c:	2301      	movs	r3, #1
 800368e:	e000      	b.n	8003692 <HAL_TIM_PWM_Start+0x32>
 8003690:	2300      	movs	r3, #0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d007      	beq.n	80036a6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036a4:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f042 0201 	orr.w	r2, r2, #1
 80036b4:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
} 
 80036b8:	4618      	mov	r0, r3
 80036ba:	3708      	adds	r7, #8
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	40010000 	.word	0x40010000
 80036c4:	40010400 	.word	0x40010400

080036c8 <HAL_TIM_IRQHandler>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d122      	bne.n	8003724 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d11b      	bne.n	8003724 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f06f 0202 	mvn.w	r2, #2
 80036f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2201      	movs	r2, #1
 80036fa:	761a      	strb	r2, [r3, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	f003 0303 	and.w	r3, r3, #3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d003      	beq.n	8003712 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 faa9 	bl	8003c62 <HAL_TIM_IC_CaptureCallback>
 8003710:	e005      	b.n	800371e <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 fa9b 	bl	8003c4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 faac 	bl	8003c76 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	f003 0304 	and.w	r3, r3, #4
 800372e:	2b04      	cmp	r3, #4
 8003730:	d122      	bne.n	8003778 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	f003 0304 	and.w	r3, r3, #4
 800373c:	2b04      	cmp	r3, #4
 800373e:	d11b      	bne.n	8003778 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f06f 0204 	mvn.w	r2, #4
 8003748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2202      	movs	r2, #2
 800374e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800375a:	2b00      	cmp	r3, #0
 800375c:	d003      	beq.n	8003766 <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 fa7f 	bl	8003c62 <HAL_TIM_IC_CaptureCallback>
 8003764:	e005      	b.n	8003772 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 fa71 	bl	8003c4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 fa82 	bl	8003c76 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	f003 0308 	and.w	r3, r3, #8
 8003782:	2b08      	cmp	r3, #8
 8003784:	d122      	bne.n	80037cc <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	f003 0308 	and.w	r3, r3, #8
 8003790:	2b08      	cmp	r3, #8
 8003792:	d11b      	bne.n	80037cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f06f 0208 	mvn.w	r2, #8
 800379c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2204      	movs	r2, #4
 80037a2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	69db      	ldr	r3, [r3, #28]
 80037aa:	f003 0303 	and.w	r3, r3, #3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d003      	beq.n	80037ba <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 fa55 	bl	8003c62 <HAL_TIM_IC_CaptureCallback>
 80037b8:	e005      	b.n	80037c6 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 fa47 	bl	8003c4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 fa58 	bl	8003c76 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	f003 0310 	and.w	r3, r3, #16
 80037d6:	2b10      	cmp	r3, #16
 80037d8:	d122      	bne.n	8003820 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f003 0310 	and.w	r3, r3, #16
 80037e4:	2b10      	cmp	r3, #16
 80037e6:	d11b      	bne.n	8003820 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f06f 0210 	mvn.w	r2, #16
 80037f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2208      	movs	r2, #8
 80037f6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	69db      	ldr	r3, [r3, #28]
 80037fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003802:	2b00      	cmp	r3, #0
 8003804:	d003      	beq.n	800380e <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 fa2b 	bl	8003c62 <HAL_TIM_IC_CaptureCallback>
 800380c:	e005      	b.n	800381a <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 fa1d 	bl	8003c4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 fa2e 	bl	8003c76 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b01      	cmp	r3, #1
 800382c:	d10e      	bne.n	800384c <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f003 0301 	and.w	r3, r3, #1
 8003838:	2b01      	cmp	r3, #1
 800383a:	d107      	bne.n	800384c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f06f 0201 	mvn.w	r2, #1
 8003844:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f9f7 	bl	8003c3a <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003856:	2b80      	cmp	r3, #128	; 0x80
 8003858:	d10e      	bne.n	8003878 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003864:	2b80      	cmp	r3, #128	; 0x80
 8003866:	d107      	bne.n	8003878 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003870:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 fdf7 	bl	8004466 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003882:	2b40      	cmp	r3, #64	; 0x40
 8003884:	d10e      	bne.n	80038a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003890:	2b40      	cmp	r3, #64	; 0x40
 8003892:	d107      	bne.n	80038a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800389c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f9f3 	bl	8003c8a <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	f003 0320 	and.w	r3, r3, #32
 80038ae:	2b20      	cmp	r3, #32
 80038b0:	d10e      	bne.n	80038d0 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	f003 0320 	and.w	r3, r3, #32
 80038bc:	2b20      	cmp	r3, #32
 80038be:	d107      	bne.n	80038d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f06f 0220 	mvn.w	r2, #32
 80038c8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 fdc1 	bl	8004452 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 80038d0:	bf00      	nop
 80038d2:	3708      	adds	r7, #8
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d101      	bne.n	80038f2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80038ee:	2302      	movs	r3, #2
 80038f0:	e0b4      	b.n	8003a5c <HAL_TIM_PWM_ConfigChannel+0x184>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  assert_param(IS_TIM_CHANNELS(Channel)); 
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2202      	movs	r2, #2
 80038fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  switch (Channel)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b0c      	cmp	r3, #12
 8003906:	f200 809f 	bhi.w	8003a48 <HAL_TIM_PWM_ConfigChannel+0x170>
 800390a:	a201      	add	r2, pc, #4	; (adr r2, 8003910 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800390c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003910:	08003945 	.word	0x08003945
 8003914:	08003a49 	.word	0x08003a49
 8003918:	08003a49 	.word	0x08003a49
 800391c:	08003a49 	.word	0x08003a49
 8003920:	08003985 	.word	0x08003985
 8003924:	08003a49 	.word	0x08003a49
 8003928:	08003a49 	.word	0x08003a49
 800392c:	08003a49 	.word	0x08003a49
 8003930:	080039c7 	.word	0x080039c7
 8003934:	08003a49 	.word	0x08003a49
 8003938:	08003a49 	.word	0x08003a49
 800393c:	08003a49 	.word	0x08003a49
 8003940:	08003a07 	.word	0x08003a07
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68b9      	ldr	r1, [r7, #8]
 800394a:	4618      	mov	r0, r3
 800394c:	f000 faee 	bl	8003f2c <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	699a      	ldr	r2, [r3, #24]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f042 0208 	orr.w	r2, r2, #8
 800395e:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	699a      	ldr	r2, [r3, #24]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 0204 	bic.w	r2, r2, #4
 800396e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6999      	ldr	r1, [r3, #24]
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	691a      	ldr	r2, [r3, #16]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	430a      	orrs	r2, r1
 8003980:	619a      	str	r2, [r3, #24]
    }
    break;
 8003982:	e062      	b.n	8003a4a <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68b9      	ldr	r1, [r7, #8]
 800398a:	4618      	mov	r0, r3
 800398c:	f000 fa32 	bl	8003df4 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	699a      	ldr	r2, [r3, #24]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800399e:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	699a      	ldr	r2, [r3, #24]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6999      	ldr	r1, [r3, #24]
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	021a      	lsls	r2, r3, #8
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	619a      	str	r2, [r3, #24]
    }
    break;
 80039c4:	e041      	b.n	8003a4a <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68b9      	ldr	r1, [r7, #8]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f000 fb21 	bl	8004014 <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	69da      	ldr	r2, [r3, #28]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f042 0208 	orr.w	r2, r2, #8
 80039e0:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	69da      	ldr	r2, [r3, #28]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 0204 	bic.w	r2, r2, #4
 80039f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	69d9      	ldr	r1, [r3, #28]
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	691a      	ldr	r2, [r3, #16]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	430a      	orrs	r2, r1
 8003a02:	61da      	str	r2, [r3, #28]
    }
    break;
 8003a04:	e021      	b.n	8003a4a <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68b9      	ldr	r1, [r7, #8]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f000 fb79 	bl	8004104 <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	69da      	ldr	r2, [r3, #28]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a20:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	69da      	ldr	r2, [r3, #28]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	69d9      	ldr	r1, [r3, #28]
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	021a      	lsls	r2, r3, #8
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	61da      	str	r2, [r3, #28]
    }
    break;
 8003a46:	e000      	b.n	8003a4a <HAL_TIM_PWM_ConfigChannel+0x172>
    
    default:
    break;    
 8003a48:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	60fb      	str	r3, [r7, #12]
    
  /* Process Locked */
  __HAL_LOCK(htim);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d101      	bne.n	8003a80 <HAL_TIM_ConfigClockSource+0x1c>
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	e0d8      	b.n	8003c32 <HAL_TIM_ConfigClockSource+0x1ce>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a9e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003aa6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ab8:	d052      	beq.n	8003b60 <HAL_TIM_ConfigClockSource+0xfc>
 8003aba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003abe:	f200 80ae 	bhi.w	8003c1e <HAL_TIM_ConfigClockSource+0x1ba>
 8003ac2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ac6:	d027      	beq.n	8003b18 <HAL_TIM_ConfigClockSource+0xb4>
 8003ac8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003acc:	f200 80a7 	bhi.w	8003c1e <HAL_TIM_ConfigClockSource+0x1ba>
 8003ad0:	2b70      	cmp	r3, #112	; 0x70
 8003ad2:	d02a      	beq.n	8003b2a <HAL_TIM_ConfigClockSource+0xc6>
 8003ad4:	2b70      	cmp	r3, #112	; 0x70
 8003ad6:	f200 80a2 	bhi.w	8003c1e <HAL_TIM_ConfigClockSource+0x1ba>
 8003ada:	2b60      	cmp	r3, #96	; 0x60
 8003adc:	d063      	beq.n	8003ba6 <HAL_TIM_ConfigClockSource+0x142>
 8003ade:	2b60      	cmp	r3, #96	; 0x60
 8003ae0:	f200 809d 	bhi.w	8003c1e <HAL_TIM_ConfigClockSource+0x1ba>
 8003ae4:	2b50      	cmp	r3, #80	; 0x50
 8003ae6:	d04e      	beq.n	8003b86 <HAL_TIM_ConfigClockSource+0x122>
 8003ae8:	2b50      	cmp	r3, #80	; 0x50
 8003aea:	f200 8098 	bhi.w	8003c1e <HAL_TIM_ConfigClockSource+0x1ba>
 8003aee:	2b40      	cmp	r3, #64	; 0x40
 8003af0:	d069      	beq.n	8003bc6 <HAL_TIM_ConfigClockSource+0x162>
 8003af2:	2b40      	cmp	r3, #64	; 0x40
 8003af4:	f200 8093 	bhi.w	8003c1e <HAL_TIM_ConfigClockSource+0x1ba>
 8003af8:	2b30      	cmp	r3, #48	; 0x30
 8003afa:	f000 8089 	beq.w	8003c10 <HAL_TIM_ConfigClockSource+0x1ac>
 8003afe:	2b30      	cmp	r3, #48	; 0x30
 8003b00:	f200 808d 	bhi.w	8003c1e <HAL_TIM_ConfigClockSource+0x1ba>
 8003b04:	2b20      	cmp	r3, #32
 8003b06:	d07c      	beq.n	8003c02 <HAL_TIM_ConfigClockSource+0x19e>
 8003b08:	2b20      	cmp	r3, #32
 8003b0a:	f200 8088 	bhi.w	8003c1e <HAL_TIM_ConfigClockSource+0x1ba>
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d069      	beq.n	8003be6 <HAL_TIM_ConfigClockSource+0x182>
 8003b12:	2b10      	cmp	r3, #16
 8003b14:	d06e      	beq.n	8003bf4 <HAL_TIM_ConfigClockSource+0x190>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;
    
    default:
    break;    
 8003b16:	e082      	b.n	8003c1e <HAL_TIM_ConfigClockSource+0x1ba>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689a      	ldr	r2, [r3, #8]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f022 0207 	bic.w	r2, r2, #7
 8003b26:	609a      	str	r2, [r3, #8]
    break;
 8003b28:	e07a      	b.n	8003c20 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance, 
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6818      	ldr	r0, [r3, #0]
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	6899      	ldr	r1, [r3, #8]
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685a      	ldr	r2, [r3, #4]
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	f000 fbca 	bl	80042d2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b4c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b54:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	609a      	str	r2, [r3, #8]
    break;
 8003b5e:	e05f      	b.n	8003c20 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance, 
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6818      	ldr	r0, [r3, #0]
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	6899      	ldr	r1, [r3, #8]
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685a      	ldr	r2, [r3, #4]
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	f000 fbaf 	bl	80042d2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	689a      	ldr	r2, [r3, #8]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b82:	609a      	str	r2, [r3, #8]
    break;
 8003b84:	e04c      	b.n	8003c20 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6818      	ldr	r0, [r3, #0]
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	6859      	ldr	r1, [r3, #4]
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	461a      	mov	r2, r3
 8003b94:	f000 fb16 	bl	80041c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2150      	movs	r1, #80	; 0x50
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f000 fb77 	bl	8004292 <TIM_ITRx_SetConfig>
    break;
 8003ba4:	e03c      	b.n	8003c20 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6818      	ldr	r0, [r3, #0]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	6859      	ldr	r1, [r3, #4]
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	f000 fb39 	bl	800422a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2160      	movs	r1, #96	; 0x60
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f000 fb67 	bl	8004292 <TIM_ITRx_SetConfig>
    break;
 8003bc4:	e02c      	b.n	8003c20 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6818      	ldr	r0, [r3, #0]
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	6859      	ldr	r1, [r3, #4]
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	f000 faf6 	bl	80041c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2140      	movs	r1, #64	; 0x40
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 fb57 	bl	8004292 <TIM_ITRx_SetConfig>
    break;
 8003be4:	e01c      	b.n	8003c20 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2100      	movs	r1, #0
 8003bec:	4618      	mov	r0, r3
 8003bee:	f000 fb50 	bl	8004292 <TIM_ITRx_SetConfig>
    break;
 8003bf2:	e015      	b.n	8003c20 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2110      	movs	r1, #16
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 fb49 	bl	8004292 <TIM_ITRx_SetConfig>
    break;
 8003c00:	e00e      	b.n	8003c20 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2120      	movs	r1, #32
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f000 fb42 	bl	8004292 <TIM_ITRx_SetConfig>
    break;
 8003c0e:	e007      	b.n	8003c20 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2130      	movs	r1, #48	; 0x30
 8003c16:	4618      	mov	r0, r3
 8003c18:	f000 fb3b 	bl	8004292 <TIM_ITRx_SetConfig>
    break;
 8003c1c:	e000      	b.n	8003c20 <HAL_TIM_ConfigClockSource+0x1bc>
    break;    
 8003c1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3710      	adds	r7, #16
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b083      	sub	sp, #12
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003c42:	bf00      	nop
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b083      	sub	sp, #12
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c56:	bf00      	nop
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr

08003c62 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c62:	b480      	push	{r7}
 8003c64:	b083      	sub	sp, #12
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c6a:	bf00      	nop
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr

08003c76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c76:	b480      	push	{r7}
 8003c78:	b083      	sub	sp, #12
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c7e:	bf00      	nop
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr

08003c8a <HAL_TIM_TriggerCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b083      	sub	sp, #12
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c92:	bf00      	nop
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
	...

08003ca0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8003caa:	2300      	movs	r3, #0
 8003cac:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a44      	ldr	r2, [pc, #272]	; (8003dc8 <TIM_Base_SetConfig+0x128>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d013      	beq.n	8003ce4 <TIM_Base_SetConfig+0x44>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cc2:	d00f      	beq.n	8003ce4 <TIM_Base_SetConfig+0x44>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a41      	ldr	r2, [pc, #260]	; (8003dcc <TIM_Base_SetConfig+0x12c>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d00b      	beq.n	8003ce4 <TIM_Base_SetConfig+0x44>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a40      	ldr	r2, [pc, #256]	; (8003dd0 <TIM_Base_SetConfig+0x130>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d007      	beq.n	8003ce4 <TIM_Base_SetConfig+0x44>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a3f      	ldr	r2, [pc, #252]	; (8003dd4 <TIM_Base_SetConfig+0x134>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d003      	beq.n	8003ce4 <TIM_Base_SetConfig+0x44>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a3e      	ldr	r2, [pc, #248]	; (8003dd8 <TIM_Base_SetConfig+0x138>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d101      	bne.n	8003ce8 <TIM_Base_SetConfig+0x48>
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e000      	b.n	8003cea <TIM_Base_SetConfig+0x4a>
 8003ce8:	2300      	movs	r3, #0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d008      	beq.n	8003d00 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a31      	ldr	r2, [pc, #196]	; (8003dc8 <TIM_Base_SetConfig+0x128>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d02b      	beq.n	8003d60 <TIM_Base_SetConfig+0xc0>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d0e:	d027      	beq.n	8003d60 <TIM_Base_SetConfig+0xc0>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a2e      	ldr	r2, [pc, #184]	; (8003dcc <TIM_Base_SetConfig+0x12c>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d023      	beq.n	8003d60 <TIM_Base_SetConfig+0xc0>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a2d      	ldr	r2, [pc, #180]	; (8003dd0 <TIM_Base_SetConfig+0x130>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d01f      	beq.n	8003d60 <TIM_Base_SetConfig+0xc0>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a2c      	ldr	r2, [pc, #176]	; (8003dd4 <TIM_Base_SetConfig+0x134>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d01b      	beq.n	8003d60 <TIM_Base_SetConfig+0xc0>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a2b      	ldr	r2, [pc, #172]	; (8003dd8 <TIM_Base_SetConfig+0x138>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d017      	beq.n	8003d60 <TIM_Base_SetConfig+0xc0>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a2a      	ldr	r2, [pc, #168]	; (8003ddc <TIM_Base_SetConfig+0x13c>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d013      	beq.n	8003d60 <TIM_Base_SetConfig+0xc0>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a29      	ldr	r2, [pc, #164]	; (8003de0 <TIM_Base_SetConfig+0x140>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d00f      	beq.n	8003d60 <TIM_Base_SetConfig+0xc0>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a28      	ldr	r2, [pc, #160]	; (8003de4 <TIM_Base_SetConfig+0x144>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d00b      	beq.n	8003d60 <TIM_Base_SetConfig+0xc0>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a27      	ldr	r2, [pc, #156]	; (8003de8 <TIM_Base_SetConfig+0x148>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d007      	beq.n	8003d60 <TIM_Base_SetConfig+0xc0>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a26      	ldr	r2, [pc, #152]	; (8003dec <TIM_Base_SetConfig+0x14c>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d003      	beq.n	8003d60 <TIM_Base_SetConfig+0xc0>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a25      	ldr	r2, [pc, #148]	; (8003df0 <TIM_Base_SetConfig+0x150>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d101      	bne.n	8003d64 <TIM_Base_SetConfig+0xc4>
 8003d60:	2301      	movs	r3, #1
 8003d62:	e000      	b.n	8003d66 <TIM_Base_SetConfig+0xc6>
 8003d64:	2300      	movs	r3, #0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d008      	beq.n	8003d7c <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	689a      	ldr	r2, [r3, #8]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a0c      	ldr	r2, [pc, #48]	; (8003dc8 <TIM_Base_SetConfig+0x128>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d003      	beq.n	8003da2 <TIM_Base_SetConfig+0x102>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a0e      	ldr	r2, [pc, #56]	; (8003dd8 <TIM_Base_SetConfig+0x138>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d101      	bne.n	8003da6 <TIM_Base_SetConfig+0x106>
 8003da2:	2301      	movs	r3, #1
 8003da4:	e000      	b.n	8003da8 <TIM_Base_SetConfig+0x108>
 8003da6:	2300      	movs	r3, #0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d003      	beq.n	8003db4 <TIM_Base_SetConfig+0x114>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	691a      	ldr	r2, [r3, #16]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	615a      	str	r2, [r3, #20]
}
 8003dba:	bf00      	nop
 8003dbc:	3714      	adds	r7, #20
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	40010000 	.word	0x40010000
 8003dcc:	40000400 	.word	0x40000400
 8003dd0:	40000800 	.word	0x40000800
 8003dd4:	40000c00 	.word	0x40000c00
 8003dd8:	40010400 	.word	0x40010400
 8003ddc:	40014000 	.word	0x40014000
 8003de0:	40014400 	.word	0x40014400
 8003de4:	40014800 	.word	0x40014800
 8003de8:	40001800 	.word	0x40001800
 8003dec:	40001c00 	.word	0x40001c00
 8003df0:	40002000 	.word	0x40002000

08003df4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b087      	sub	sp, #28
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8003e02:	2300      	movs	r3, #0
 8003e04:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8003e06:	2300      	movs	r3, #0
 8003e08:	613b      	str	r3, [r7, #16]
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	f023 0210 	bic.w	r2, r3, #16
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e36:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	021b      	lsls	r3, r3, #8
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	f023 0320 	bic.w	r3, r3, #32
 8003e4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	011b      	lsls	r3, r3, #4
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a20      	ldr	r2, [pc, #128]	; (8003edc <TIM_OC2_SetConfig+0xe8>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d003      	beq.n	8003e68 <TIM_OC2_SetConfig+0x74>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a1f      	ldr	r2, [pc, #124]	; (8003ee0 <TIM_OC2_SetConfig+0xec>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d101      	bne.n	8003e6c <TIM_OC2_SetConfig+0x78>
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e000      	b.n	8003e6e <TIM_OC2_SetConfig+0x7a>
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d021      	beq.n	8003eb6 <TIM_OC2_SetConfig+0xc2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	011b      	lsls	r3, r3, #4
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e8c:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	621a      	str	r2, [r3, #32]
}
 8003ed0:	bf00      	nop
 8003ed2:	371c      	adds	r7, #28
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr
 8003edc:	40010000 	.word	0x40010000
 8003ee0:	40010400 	.word	0x40010400

08003ee4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b087      	sub	sp, #28
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8003efc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6a1a      	ldr	r2, [r3, #32]
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	43db      	mvns	r3, r3
 8003f06:	401a      	ands	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6a1a      	ldr	r2, [r3, #32]
 8003f10:	6879      	ldr	r1, [r7, #4]
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	fa01 f303 	lsl.w	r3, r1, r3
 8003f18:	431a      	orrs	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	621a      	str	r2, [r3, #32]
}
 8003f1e:	bf00      	nop
 8003f20:	371c      	adds	r7, #28
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
	...

08003f2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b087      	sub	sp, #28
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003f36:	2300      	movs	r3, #0
 8003f38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;  
 8003f3e:	2300      	movs	r3, #0
 8003f40:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	f023 0201 	bic.w	r2, r3, #1
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f023 0303 	bic.w	r3, r3, #3
 8003f6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	f023 0302 	bic.w	r3, r3, #2
 8003f80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	617b      	str	r3, [r7, #20]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a1f      	ldr	r2, [pc, #124]	; (800400c <TIM_OC1_SetConfig+0xe0>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d003      	beq.n	8003f9c <TIM_OC1_SetConfig+0x70>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a1e      	ldr	r2, [pc, #120]	; (8004010 <TIM_OC1_SetConfig+0xe4>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d101      	bne.n	8003fa0 <TIM_OC1_SetConfig+0x74>
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e000      	b.n	8003fa2 <TIM_OC1_SetConfig+0x76>
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d01e      	beq.n	8003fe4 <TIM_OC1_SetConfig+0xb8>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	f023 0308 	bic.w	r3, r3, #8
 8003fac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	f023 0304 	bic.w	r3, r3, #4
 8003fbe:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	693a      	ldr	r2, [r7, #16]
 8003fe8:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685a      	ldr	r2, [r3, #4]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	621a      	str	r2, [r3, #32]
} 
 8003ffe:	bf00      	nop
 8004000:	371c      	adds	r7, #28
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	40010000 	.word	0x40010000
 8004010:	40010400 	.word	0x40010400

08004014 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004014:	b480      	push	{r7}
 8004016:	b087      	sub	sp, #28
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800401e:	2300      	movs	r3, #0
 8004020:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8004022:	2300      	movs	r3, #0
 8004024:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;   
 8004026:	2300      	movs	r3, #0
 8004028:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800404e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f023 0303 	bic.w	r3, r3, #3
 8004056:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	4313      	orrs	r3, r2
 8004060:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004068:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	021b      	lsls	r3, r3, #8
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	4313      	orrs	r3, r2
 8004074:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a20      	ldr	r2, [pc, #128]	; (80040fc <TIM_OC3_SetConfig+0xe8>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d003      	beq.n	8004086 <TIM_OC3_SetConfig+0x72>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a1f      	ldr	r2, [pc, #124]	; (8004100 <TIM_OC3_SetConfig+0xec>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d101      	bne.n	800408a <TIM_OC3_SetConfig+0x76>
 8004086:	2301      	movs	r3, #1
 8004088:	e000      	b.n	800408c <TIM_OC3_SetConfig+0x78>
 800408a:	2300      	movs	r3, #0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d021      	beq.n	80040d4 <TIM_OC3_SetConfig+0xc0>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004096:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	021b      	lsls	r3, r3, #8
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040aa:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	011b      	lsls	r3, r3, #4
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	699b      	ldr	r3, [r3, #24]
 80040cc:	011b      	lsls	r3, r3, #4
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685a      	ldr	r2, [r3, #4]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	621a      	str	r2, [r3, #32]
}
 80040ee:	bf00      	nop
 80040f0:	371c      	adds	r7, #28
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	40010000 	.word	0x40010000
 8004100:	40010400 	.word	0x40010400

08004104 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004104:	b480      	push	{r7}
 8004106:	b087      	sub	sp, #28
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800410e:	2300      	movs	r3, #0
 8004110:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8004112:	2300      	movs	r3, #0
 8004114:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8004116:	2300      	movs	r3, #0
 8004118:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	69db      	ldr	r3, [r3, #28]
 8004136:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800413e:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004146:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	021b      	lsls	r3, r3, #8
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	4313      	orrs	r3, r2
 8004152:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800415a:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	031b      	lsls	r3, r3, #12
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	4313      	orrs	r3, r2
 8004166:	60fb      	str	r3, [r7, #12]
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a14      	ldr	r2, [pc, #80]	; (80041bc <TIM_OC4_SetConfig+0xb8>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d003      	beq.n	8004178 <TIM_OC4_SetConfig+0x74>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a13      	ldr	r2, [pc, #76]	; (80041c0 <TIM_OC4_SetConfig+0xbc>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d101      	bne.n	800417c <TIM_OC4_SetConfig+0x78>
 8004178:	2301      	movs	r3, #1
 800417a:	e000      	b.n	800417e <TIM_OC4_SetConfig+0x7a>
 800417c:	2300      	movs	r3, #0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d009      	beq.n	8004196 <TIM_OC4_SetConfig+0x92>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004188:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	019b      	lsls	r3, r3, #6
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	4313      	orrs	r3, r2
 8004194:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	61da      	str	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	685a      	ldr	r2, [r3, #4]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	621a      	str	r2, [r3, #32]
}
 80041b0:	bf00      	nop
 80041b2:	371c      	adds	r7, #28
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr
 80041bc:	40010000 	.word	0x40010000
 80041c0:	40010400 	.word	0x40010400

080041c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b087      	sub	sp, #28
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 80041d0:	2300      	movs	r3, #0
 80041d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 80041d4:	2300      	movs	r3, #0
 80041d6:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6a1b      	ldr	r3, [r3, #32]
 80041dc:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	f023 0201 	bic.w	r2, r3, #1
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	617b      	str	r3, [r7, #20]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041f6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	011b      	lsls	r3, r3, #4
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	4313      	orrs	r3, r2
 8004200:	617b      	str	r3, [r7, #20]
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	f023 030a 	bic.w	r3, r3, #10
 8004208:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	4313      	orrs	r3, r2
 8004210:	613b      	str	r3, [r7, #16]
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	621a      	str	r2, [r3, #32]
}
 800421e:	bf00      	nop
 8004220:	371c      	adds	r7, #28
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800422a:	b480      	push	{r7}
 800422c:	b087      	sub	sp, #28
 800422e:	af00      	add	r7, sp, #0
 8004230:	60f8      	str	r0, [r7, #12]
 8004232:	60b9      	str	r1, [r7, #8]
 8004234:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8004236:	2300      	movs	r3, #0
 8004238:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800423a:	2300      	movs	r3, #0
 800423c:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	f023 0210 	bic.w	r2, r3, #16
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	613b      	str	r3, [r7, #16]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800425c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	031b      	lsls	r3, r3, #12
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	4313      	orrs	r3, r2
 8004266:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800426e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	011b      	lsls	r3, r3, #4
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	4313      	orrs	r3, r2
 8004278:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	621a      	str	r2, [r3, #32]
}
 8004286:	bf00      	nop
 8004288:	371c      	adds	r7, #28
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr

08004292 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
 8004292:	b480      	push	{r7}
 8004294:	b085      	sub	sp, #20
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
 800429a:	460b      	mov	r3, r1
 800429c:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 800429e:	2300      	movs	r3, #0
 80042a0:	60fb      	str	r3, [r7, #12]
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ae:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80042b0:	887b      	ldrh	r3, [r7, #2]
 80042b2:	f043 0307 	orr.w	r3, r3, #7
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	461a      	mov	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	4313      	orrs	r3, r2
 80042be:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	609a      	str	r2, [r3, #8]
}
 80042c6:	bf00      	nop
 80042c8:	3714      	adds	r7, #20
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b087      	sub	sp, #28
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	60f8      	str	r0, [r7, #12]
 80042da:	60b9      	str	r1, [r7, #8]
 80042dc:	607a      	str	r2, [r7, #4]
 80042de:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 80042e0:	2300      	movs	r3, #0
 80042e2:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042f0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	021a      	lsls	r2, r3, #8
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	431a      	orrs	r2, r3
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	4313      	orrs	r3, r2
 8004302:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	609a      	str	r2, [r3, #8]
} 
 800430a:	bf00      	nop
 800430c:	371c      	adds	r7, #28
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr

08004316 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8004316:	b480      	push	{r7}
 8004318:	b083      	sub	sp, #12
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
 800431e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004326:	2b01      	cmp	r3, #1
 8004328:	d101      	bne.n	800432e <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800432a:	2302      	movs	r3, #2
 800432c:	e032      	b.n	8004394 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2201      	movs	r2, #1
 8004332:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2202      	movs	r2, #2
 800433a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	685a      	ldr	r2, [r3, #4]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800434c:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	6859      	ldr	r1, [r3, #4]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	430a      	orrs	r2, r1
 800435e:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689a      	ldr	r2, [r3, #8]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800436e:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	6899      	ldr	r1, [r3, #8]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	430a      	orrs	r2, r1
 8004380:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8004392:	2300      	movs	r3, #0
} 
 8004394:	4618      	mov	r0, r3
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral. 
  * @retval HAL status
  */    
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef * sBreakDeadTimeConfig)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0U;
 80043aa:	2300      	movs	r3, #0
 80043ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d101      	bne.n	80043bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80043b8:	2302      	movs	r3, #2
 80043ba:	e044      	b.n	8004446 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	4313      	orrs	r3, r2
 80043de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	4313      	orrs	r3, r2
 8004408:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	695b      	ldr	r3, [r3, #20]
 8004414:	4313      	orrs	r3, r2
 8004416:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	4313      	orrs	r3, r2
 8004424:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	4313      	orrs	r3, r2
 8004432:	60fb      	str	r3, [r7, #12]
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	645a      	str	r2, [r3, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3714      	adds	r7, #20
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr

08004452 <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8004452:	b480      	push	{r7}
 8004454:	b083      	sub	sp, #12
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 800445a:	bf00      	nop
 800445c:	370c      	adds	r7, #12
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr

08004466 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004466:	b480      	push	{r7}
 8004468:	b083      	sub	sp, #12
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800446e:	bf00      	nop
 8004470:	370c      	adds	r7, #12
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr

0800447a <USB_CoreInit>:
  * @param  cfg  pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800447a:	b084      	sub	sp, #16
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	f107 0014 	add.w	r0, r7, #20
 8004488:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800448c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448e:	2b01      	cmp	r3, #1
 8004490:	d120      	bne.n	80044d4 <USB_CoreInit+0x5a>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004496:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80044a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	60d3      	str	r3, [r2, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	60da      	str	r2, [r3, #12]
    if(cfg.use_external_vbus == 1U)
 80044ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d105      	bne.n	80044cc <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f001 f987 	bl	80057e0 <USB_CoreReset>
 80044d2:	e00c      	b.n	80044ee <USB_CoreInit+0x74>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	60da      	str	r2, [r3, #12]
    
    /* Reset after a PHY select and set Host mode */
    USB_CoreReset(USBx);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f001 f97d 	bl	80057e0 <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80044ec:	639a      	str	r2, [r3, #56]	; 0x38
  }
 
  if(cfg.dma_enable == ENABLE)
 80044ee:	6a3b      	ldr	r3, [r7, #32]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d10b      	bne.n	800450c <USB_CoreInit+0x92>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f043 0206 	orr.w	r2, r3, #6
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f043 0220 	orr.w	r2, r3, #32
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	609a      	str	r2, [r3, #8]
  }  

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3708      	adds	r7, #8
 8004512:	46bd      	mov	sp, r7
 8004514:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004518:	b004      	add	sp, #16
 800451a:	4770      	bx	lr

0800451c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f043 0201 	orr.w	r2, r3, #1
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr

0800453e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800453e:	b480      	push	{r7}
 8004540:	b083      	sub	sp, #12
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f023 0201 	bic.w	r2, r3, #1
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	460b      	mov	r3, r1
 800456a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	60da      	str	r2, [r3, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 8004578:	78fb      	ldrb	r3, [r7, #3]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d106      	bne.n	800458c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	60da      	str	r2, [r3, #12]
 800458a:	e008      	b.n	800459e <USB_SetCurrentMode+0x3e>
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
 800458c:	78fb      	ldrb	r3, [r7, #3]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d105      	bne.n	800459e <USB_SetCurrentMode+0x3e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	60da      	str	r2, [r3, #12]
  }
  HAL_Delay(50U);
 800459e:	2032      	movs	r0, #50	; 0x32
 80045a0:	f7fc f86a 	bl	8000678 <HAL_Delay>
  
  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3708      	adds	r7, #8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
	...

080045b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045b0:	b084      	sub	sp, #16
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b084      	sub	sp, #16
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
 80045ba:	f107 001c 	add.w	r0, r7, #28
 80045be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t i = 0U;
 80045c2:	2300      	movs	r3, #0
 80045c4:	60fb      	str	r3, [r7, #12]
    /* B-peripheral session valid override enable*/ 
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
  }
#else
  if (cfg.vbus_sensing_enable == 0U)
 80045c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d106      	bne.n	80045da <USB_DevInit+0x2a>
  {
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	639a      	str	r2, [r3, #56]	; 0x38
 80045d8:	e005      	b.n	80045e6 <USB_DevInit+0x36>
  }
  else
  {
    /* Enable VBUS */
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045de:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx || STM32F413xx || STM32F423xx  */
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80045ec:	461a      	mov	r2, r3
 80045ee:	2300      	movs	r3, #0
 80045f0:	6013      	str	r3, [r2, #0]
  
  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045f8:	4619      	mov	r1, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004600:	461a      	mov	r2, r3
 8004602:	680b      	ldr	r3, [r1, #0]
 8004604:	6013      	str	r3, [r2, #0]
  
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 8004606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004608:	2b01      	cmp	r3, #1
 800460a:	d10c      	bne.n	8004626 <USB_DevInit+0x76>
  {
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 800460c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460e:	2b00      	cmp	r3, #0
 8004610:	d104      	bne.n	800461c <USB_DevInit+0x6c>
    {      
      /* Set High speed phy */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH);
 8004612:	2100      	movs	r1, #0
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 f945 	bl	80048a4 <USB_SetDevSpeed>
 800461a:	e008      	b.n	800462e <USB_DevInit+0x7e>
    }
    else 
    {
      /* set High speed phy in Full speed mode */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 800461c:	2101      	movs	r1, #1
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f940 	bl	80048a4 <USB_SetDevSpeed>
 8004624:	e003      	b.n	800462e <USB_DevInit+0x7e>
    }
  }
  else
  {
    /* Set Full speed phy */
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 8004626:	2103      	movs	r1, #3
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 f93b 	bl	80048a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10U); /* all Tx FIFOs */
 800462e:	2110      	movs	r1, #16
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 f8ef 	bl	8004814 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 f912 	bl	8004860 <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004642:	461a      	mov	r2, r3
 8004644:	2300      	movs	r3, #0
 8004646:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800464e:	461a      	mov	r2, r3
 8004650:	2300      	movs	r3, #0
 8004652:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800465a:	461a      	mov	r2, r3
 800465c:	f04f 33ff 	mov.w	r3, #4294967295
 8004660:	6193      	str	r3, [r2, #24]
  USBx_DEVICE->DAINTMSK = 0U;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004668:	461a      	mov	r2, r3
 800466a:	2300      	movs	r3, #0
 800466c:	61d3      	str	r3, [r2, #28]
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800466e:	2300      	movs	r3, #0
 8004670:	60fb      	str	r3, [r7, #12]
 8004672:	e034      	b.n	80046de <USB_DevInit+0x12e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	015a      	lsls	r2, r3, #5
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4413      	add	r3, r2
 800467c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004686:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800468a:	d10a      	bne.n	80046a2 <USB_DevInit+0xf2>
    {
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	015a      	lsls	r2, r3, #5
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4413      	add	r3, r2
 8004694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004698:	461a      	mov	r2, r3
 800469a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800469e:	6013      	str	r3, [r2, #0]
 80046a0:	e008      	b.n	80046b4 <USB_DevInit+0x104>
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	015a      	lsls	r2, r3, #5
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4413      	add	r3, r2
 80046aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ae:	461a      	mov	r2, r3
 80046b0:	2300      	movs	r3, #0
 80046b2:	6013      	str	r3, [r2, #0]
    }
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	015a      	lsls	r2, r3, #5
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4413      	add	r3, r2
 80046bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c0:	461a      	mov	r2, r3
 80046c2:	2300      	movs	r3, #0
 80046c4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	015a      	lsls	r2, r3, #5
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4413      	add	r3, r2
 80046ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046d2:	461a      	mov	r2, r3
 80046d4:	23ff      	movs	r3, #255	; 0xff
 80046d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	3301      	adds	r3, #1
 80046dc:	60fb      	str	r3, [r7, #12]
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d3c6      	bcc.n	8004674 <USB_DevInit+0xc4>
  }
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046e6:	2300      	movs	r3, #0
 80046e8:	60fb      	str	r3, [r7, #12]
 80046ea:	e034      	b.n	8004756 <USB_DevInit+0x1a6>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	015a      	lsls	r2, r3, #5
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4413      	add	r3, r2
 80046f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004702:	d10a      	bne.n	800471a <USB_DevInit+0x16a>
    {
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	015a      	lsls	r2, r3, #5
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4413      	add	r3, r2
 800470c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004710:	461a      	mov	r2, r3
 8004712:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004716:	6013      	str	r3, [r2, #0]
 8004718:	e008      	b.n	800472c <USB_DevInit+0x17c>
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	015a      	lsls	r2, r3, #5
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4413      	add	r3, r2
 8004722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004726:	461a      	mov	r2, r3
 8004728:	2300      	movs	r3, #0
 800472a:	6013      	str	r3, [r2, #0]
    }
    
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	015a      	lsls	r2, r3, #5
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4413      	add	r3, r2
 8004734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004738:	461a      	mov	r2, r3
 800473a:	2300      	movs	r3, #0
 800473c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	015a      	lsls	r2, r3, #5
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4413      	add	r3, r2
 8004746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800474a:	461a      	mov	r2, r3
 800474c:	23ff      	movs	r3, #255	; 0xff
 800474e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	3301      	adds	r3, #1
 8004754:	60fb      	str	r3, [r7, #12]
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	429a      	cmp	r2, r3
 800475c:	d3c6      	bcc.n	80046ec <USB_DevInit+0x13c>
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800476c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004770:	6113      	str	r3, [r2, #16]
  
  if (cfg.dma_enable == 1U)
 8004772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004774:	2b01      	cmp	r3, #1
 8004776:	d116      	bne.n	80047a6 <USB_DevInit+0x1f6>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800477e:	461a      	mov	r2, r3
 8004780:	4b22      	ldr	r3, [pc, #136]	; (800480c <USB_DevInit+0x25c>)
 8004782:	6313      	str	r3, [r2, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800478a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004792:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004796:	f043 0303 	orr.w	r3, r3, #3
 800479a:	6313      	str	r3, [r2, #48]	; 0x30
    
    i= USBx_DEVICE->DTHRCTL;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a4:	60fb      	str	r3, [r7, #12]
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	619a      	str	r2, [r3, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80047b2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 80047b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d105      	bne.n	80047c6 <USB_DevInit+0x216>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	f043 0210 	orr.w	r2, r3, #16
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	619a      	str	r2, [r3, #24]
  }
  
  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	699a      	ldr	r2, [r3, #24]
 80047ca:	4b11      	ldr	r3, [pc, #68]	; (8004810 <USB_DevInit+0x260>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);
  
  if(cfg.Sof_enable)
 80047d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d005      	beq.n	80047e4 <USB_DevInit+0x234>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	f043 0208 	orr.w	r2, r3, #8
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 80047e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d107      	bne.n	80047fa <USB_DevInit+0x24a>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047f2:	f043 0304 	orr.w	r3, r3, #4
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	6193      	str	r3, [r2, #24]
  }
  
  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3710      	adds	r7, #16
 8004800:	46bd      	mov	sp, r7
 8004802:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004806:	b004      	add	sp, #16
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	00800100 	.word	0x00800100
 8004810:	803c3800 	.word	0x803c3800

08004814 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0;
 800481e:	2300      	movs	r3, #0
 8004820:	60fb      	str	r3, [r7, #12]
  
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	019b      	lsls	r3, r3, #6
 8004826:	f043 0220 	orr.w	r2, r3, #32
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	3301      	adds	r3, #1
 8004832:	60fb      	str	r3, [r7, #12]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	4a09      	ldr	r2, [pc, #36]	; (800485c <USB_FlushTxFifo+0x48>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d901      	bls.n	8004840 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e006      	b.n	800484e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	f003 0320 	and.w	r3, r3, #32
 8004848:	2b20      	cmp	r3, #32
 800484a:	d0f0      	beq.n	800482e <USB_FlushTxFifo+0x1a>
  
  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3714      	adds	r7, #20
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	00030d40 	.word	0x00030d40

08004860 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004868:	2300      	movs	r3, #0
 800486a:	60fb      	str	r3, [r7, #12]
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2210      	movs	r2, #16
 8004870:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	3301      	adds	r3, #1
 8004876:	60fb      	str	r3, [r7, #12]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	4a09      	ldr	r2, [pc, #36]	; (80048a0 <USB_FlushRxFifo+0x40>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d901      	bls.n	8004884 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e006      	b.n	8004892 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	f003 0310 	and.w	r3, r3, #16
 800488c:	2b10      	cmp	r3, #16
 800488e:	d0f0      	beq.n	8004872 <USB_FlushRxFifo+0x12>
  
  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	00030d40 	.word	0x00030d40

080048a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	460b      	mov	r3, r1
 80048ae:	70fb      	strb	r3, [r7, #3]
  USBx_DEVICE->DCFG |= speed;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	78fb      	ldrb	r3, [r7, #3]
 80048ba:	6879      	ldr	r1, [r7, #4]
 80048bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048c0:	4313      	orrs	r3, r2
 80048c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <USB_GetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80048d2:	b480      	push	{r7}
 80048d4:	b085      	sub	sp, #20
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
  uint8_t speed = 0U;
 80048da:	2300      	movs	r3, #0
 80048dc:	73fb      	strb	r3, [r7, #15]
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f003 0306 	and.w	r3, r3, #6
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d102      	bne.n	80048f4 <USB_GetDevSpeed+0x22>
  {
    speed = USB_OTG_SPEED_HIGH;
 80048ee:	2300      	movs	r3, #0
 80048f0:	73fb      	strb	r3, [r7, #15]
 80048f2:	e01c      	b.n	800492e <USB_GetDevSpeed+0x5c>
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f003 0306 	and.w	r3, r3, #6
 8004900:	2b02      	cmp	r3, #2
 8004902:	d007      	beq.n	8004914 <USB_GetDevSpeed+0x42>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f003 0306 	and.w	r3, r3, #6
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8004910:	2b06      	cmp	r3, #6
 8004912:	d102      	bne.n	800491a <USB_GetDevSpeed+0x48>
  {
    speed = USB_OTG_SPEED_FULL;
 8004914:	2303      	movs	r3, #3
 8004916:	73fb      	strb	r3, [r7, #15]
 8004918:	e009      	b.n	800492e <USB_GetDevSpeed+0x5c>
  }
  else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f003 0306 	and.w	r3, r3, #6
 8004926:	2b04      	cmp	r3, #4
 8004928:	d101      	bne.n	800492e <USB_GetDevSpeed+0x5c>
  {
    speed = USB_OTG_SPEED_LOW;
 800492a:	2302      	movs	r3, #2
 800492c:	73fb      	strb	r3, [r7, #15]
  }
  
  return speed;
 800492e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004930:	4618      	mov	r0, r3
 8004932:	3714      	adds	r7, #20
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1U)
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	785b      	ldrb	r3, [r3, #1]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d13c      	bne.n	80049c8 <USB_ActivateEndpoint+0x8c>
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004954:	69da      	ldr	r2, [r3, #28]
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	4619      	mov	r1, r3
 800495c:	2301      	movs	r3, #1
 800495e:	408b      	lsls	r3, r1
 8004960:	b29b      	uxth	r3, r3
 8004962:	6879      	ldr	r1, [r7, #4]
 8004964:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004968:	4313      	orrs	r3, r2
 800496a:	61cb      	str	r3, [r1, #28]
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	015a      	lsls	r2, r3, #5
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4413      	add	r3, r2
 8004976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d159      	bne.n	8004a38 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	015a      	lsls	r2, r3, #5
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4413      	add	r3, r2
 800498e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800499c:	6839      	ldr	r1, [r7, #0]
 800499e:	78c9      	ldrb	r1, [r1, #3]
 80049a0:	0489      	lsls	r1, r1, #18
 80049a2:	430b      	orrs	r3, r1
        ((ep->num) << 22U) | (USB_OTG_DIEPCTL_SD0PID_SEVNFRM) | (USB_OTG_DIEPCTL_USBAEP)); 
 80049a4:	6839      	ldr	r1, [r7, #0]
 80049a6:	7809      	ldrb	r1, [r1, #0]
 80049a8:	0589      	lsls	r1, r1, #22
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 80049aa:	430b      	orrs	r3, r1
 80049ac:	4313      	orrs	r3, r2
 80049ae:	683a      	ldr	r2, [r7, #0]
 80049b0:	7812      	ldrb	r2, [r2, #0]
 80049b2:	0151      	lsls	r1, r2, #5
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	440a      	add	r2, r1
 80049b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049c4:	6013      	str	r3, [r2, #0]
 80049c6:	e037      	b.n	8004a38 <USB_ActivateEndpoint+0xfc>
    } 
  }
  else
  {
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ce:	69da      	ldr	r2, [r3, #28]
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	4619      	mov	r1, r3
 80049d6:	2301      	movs	r3, #1
 80049d8:	408b      	lsls	r3, r1
 80049da:	041b      	lsls	r3, r3, #16
 80049dc:	6879      	ldr	r1, [r7, #4]
 80049de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049e2:	4313      	orrs	r3, r2
 80049e4:	61cb      	str	r3, [r1, #28]
     
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	015a      	lsls	r2, r3, #5
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4413      	add	r3, r2
 80049f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d11c      	bne.n	8004a38 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	015a      	lsls	r2, r3, #5
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4413      	add	r3, r2
 8004a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a16:	6839      	ldr	r1, [r7, #0]
 8004a18:	78c9      	ldrb	r1, [r1, #3]
 8004a1a:	0489      	lsls	r1, r1, #18
 8004a1c:	430b      	orrs	r3, r1
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	683a      	ldr	r2, [r7, #0]
 8004a22:	7812      	ldrb	r2, [r2, #0]
 8004a24:	0151      	lsls	r1, r2, #5
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	440a      	add	r2, r1
 8004a2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a36:	6013      	str	r3, [r2, #0]
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    } 
  }
  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
	...

08004a48 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004a52:	2300      	movs	r3, #0
 8004a54:	60fb      	str	r3, [r7, #12]
  
  /* Disable the IN endpoint */
  if (ep->is_in == 1U)
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	785b      	ldrb	r3, [r3, #1]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d152      	bne.n	8004b04 <USB_DeactivateEndpoint+0xbc>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_USBAEP;  
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	015a      	lsls	r2, r3, #5
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4413      	add	r3, r2
 8004a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	7812      	ldrb	r2, [r2, #0]
 8004a72:	0151      	lsls	r1, r2, #5
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	440a      	add	r2, r1
 8004a78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a7c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004a80:	6013      	str	r3, [r2, #0]
    
    /* sets the NAK bit for the IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	015a      	lsls	r2, r3, #5
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a90:	461a      	mov	r2, r3
 8004a92:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a96:	6013      	str	r3, [r2, #0]
    
    /* Disable IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	015a      	lsls	r2, r3, #5
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004aac:	6013      	str	r3, [r2, #0]
    
    do
    {
      if (++count > 200000U)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	3301      	adds	r3, #1
 8004ab2:	60fb      	str	r3, [r7, #12]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	4a41      	ldr	r2, [pc, #260]	; (8004bbc <USB_DeactivateEndpoint+0x174>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d901      	bls.n	8004ac0 <USB_DeactivateEndpoint+0x78>
      {
        return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e079      	b.n	8004bb4 <USB_DeactivateEndpoint+0x16c>
      }
    }
    
    /*Wait for  EPDISD endpoint disabled interrupt*/ 
    while ((USBx_INEP(ep->num)->DIEPINT & USB_OTG_DIEPCTL_EPDIS) == USB_OTG_DIEPCTL_EPDIS);
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	015a      	lsls	r2, r3, #5
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4413      	add	r3, r2
 8004aca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ad8:	d0e9      	beq.n	8004aae <USB_DeactivateEndpoint+0x66>
    
    
    /* Flush any data remaining in the TxFIFO */
    USB_FlushTxFifo(USBx , 0x10U);
 8004ada:	2110      	movs	r1, #16
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f7ff fe99 	bl	8004814 <USB_FlushTxFifo>
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));   
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ae8:	69da      	ldr	r2, [r3, #28]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	4619      	mov	r1, r3
 8004af0:	2301      	movs	r3, #1
 8004af2:	408b      	lsls	r3, r1
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	43db      	mvns	r3, r3
 8004af8:	6879      	ldr	r1, [r7, #4]
 8004afa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004afe:	4013      	ands	r3, r2
 8004b00:	61cb      	str	r3, [r1, #28]
 8004b02:	e056      	b.n	8004bb2 <USB_DeactivateEndpoint+0x16a>
  
  }
  else /* Disable the OUT endpoint */
  {
    
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;  
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	015a      	lsls	r2, r3, #5
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	683a      	ldr	r2, [r7, #0]
 8004b16:	7812      	ldrb	r2, [r2, #0]
 8004b18:	0151      	lsls	r1, r2, #5
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	440a      	add	r2, r1
 8004b1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b22:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b26:	6013      	str	r3, [r2, #0]
    
    /* sets the NAK bit for the OUT endpoint */
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	015a      	lsls	r2, r3, #5
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4413      	add	r3, r2
 8004b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b36:	461a      	mov	r2, r3
 8004b38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b3c:	6013      	str	r3, [r2, #0]
    
    /* Disable OUT endpoint */
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS;
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	015a      	lsls	r2, r3, #5
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4413      	add	r3, r2
 8004b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004b52:	6013      	str	r3, [r2, #0]
    
    do
    {
      if (++count > 200000U)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	3301      	adds	r3, #1
 8004b58:	60fb      	str	r3, [r7, #12]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	4a17      	ldr	r2, [pc, #92]	; (8004bbc <USB_DeactivateEndpoint+0x174>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d901      	bls.n	8004b66 <USB_DeactivateEndpoint+0x11e>
      {
        return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e026      	b.n	8004bb4 <USB_DeactivateEndpoint+0x16c>
      }
    }
    
    /*Wait for  EPDISD endpoint disabled interrupt*/ 
    while ((USBx_OUTEP(ep->num)->DOEPINT & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS);
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	015a      	lsls	r2, r3, #5
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4413      	add	r3, r2
 8004b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f003 0310 	and.w	r3, r3, #16
 8004b7a:	2b10      	cmp	r3, #16
 8004b7c:	d0ea      	beq.n	8004b54 <USB_DeactivateEndpoint+0x10c>
    
    /* Set the "Clear the Global OUT NAK bit" to disable global OUT NAK mode */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b90:	6053      	str	r3, [r2, #4]
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));         
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b98:	69da      	ldr	r2, [r3, #28]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	408b      	lsls	r3, r1
 8004ba4:	041b      	lsls	r3, r3, #16
 8004ba6:	43db      	mvns	r3, r3
 8004ba8:	6879      	ldr	r1, [r7, #4]
 8004baa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bae:	4013      	ands	r3, r2
 8004bb0:	61cb      	str	r3, [r1, #28]
  }
  return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3710      	adds	r7, #16
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	00030d40 	.word	0x00030d40

08004bc0 <USB_EPStartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b088      	sub	sp, #32
 8004bc4:	af02      	add	r7, sp, #8
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	71fb      	strb	r3, [r7, #7]
  uint16_t pktcnt = 0U;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	82fb      	strh	r3, [r7, #22]
  
  /* IN endpoint */
  if (ep->is_in == 1U)
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	785b      	ldrb	r3, [r3, #1]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	f040 8139 	bne.w	8004e4e <USB_EPStartXfer+0x28e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	695b      	ldr	r3, [r3, #20]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d138      	bne.n	8004c56 <USB_EPStartXfer+0x96>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	015a      	lsls	r2, r3, #5
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	4413      	add	r3, r2
 8004bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	68ba      	ldr	r2, [r7, #8]
 8004bf6:	7812      	ldrb	r2, [r2, #0]
 8004bf8:	0151      	lsls	r1, r2, #5
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	440a      	add	r2, r1
 8004bfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c02:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c06:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	015a      	lsls	r2, r3, #5
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	4413      	add	r3, r2
 8004c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	68ba      	ldr	r2, [r7, #8]
 8004c1e:	7812      	ldrb	r2, [r2, #0]
 8004c20:	0151      	lsls	r1, r2, #5
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	440a      	add	r2, r1
 8004c26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	015a      	lsls	r2, r3, #5
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	4413      	add	r3, r2
 8004c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	68ba      	ldr	r2, [r7, #8]
 8004c42:	7812      	ldrb	r2, [r2, #0]
 8004c44:	0151      	lsls	r1, r2, #5
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	440a      	add	r2, r1
 8004c4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c4e:	0cdb      	lsrs	r3, r3, #19
 8004c50:	04db      	lsls	r3, r3, #19
 8004c52:	6113      	str	r3, [r2, #16]
 8004c54:	e080      	b.n	8004d58 <USB_EPStartXfer+0x198>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	015a      	lsls	r2, r3, #5
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	4413      	add	r3, r2
 8004c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	68ba      	ldr	r2, [r7, #8]
 8004c68:	7812      	ldrb	r2, [r2, #0]
 8004c6a:	0151      	lsls	r1, r2, #5
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	440a      	add	r2, r1
 8004c70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c74:	0cdb      	lsrs	r3, r3, #19
 8004c76:	04db      	lsls	r3, r3, #19
 8004c78:	6113      	str	r3, [r2, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	015a      	lsls	r2, r3, #5
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	4413      	add	r3, r2
 8004c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	68ba      	ldr	r2, [r7, #8]
 8004c8c:	7812      	ldrb	r2, [r2, #0]
 8004c8e:	0151      	lsls	r1, r2, #5
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	440a      	add	r2, r1
 8004c94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c98:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c9c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ca0:	6113      	str	r3, [r2, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	015a      	lsls	r2, r3, #5
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	4413      	add	r3, r2
 8004cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb0:	691a      	ldr	r2, [r3, #16]
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	6959      	ldr	r1, [r3, #20]
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	440b      	add	r3, r1
 8004cbc:	1e59      	subs	r1, r3, #1
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cc6:	04d9      	lsls	r1, r3, #19
 8004cc8:	4b8a      	ldr	r3, [pc, #552]	; (8004ef4 <USB_EPStartXfer+0x334>)
 8004cca:	400b      	ands	r3, r1
 8004ccc:	68b9      	ldr	r1, [r7, #8]
 8004cce:	7809      	ldrb	r1, [r1, #0]
 8004cd0:	0148      	lsls	r0, r1, #5
 8004cd2:	68f9      	ldr	r1, [r7, #12]
 8004cd4:	4401      	add	r1, r0
 8004cd6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	015a      	lsls	r2, r3, #5
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cec:	691a      	ldr	r2, [r3, #16]
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cf6:	68b9      	ldr	r1, [r7, #8]
 8004cf8:	7809      	ldrb	r1, [r1, #0]
 8004cfa:	0148      	lsls	r0, r1, #5
 8004cfc:	68f9      	ldr	r1, [r7, #12]
 8004cfe:	4401      	add	r1, r0
 8004d00:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004d04:	4313      	orrs	r3, r2
 8004d06:	610b      	str	r3, [r1, #16]
      
      if (ep->type == EP_TYPE_ISOC)
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	78db      	ldrb	r3, [r3, #3]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d123      	bne.n	8004d58 <USB_EPStartXfer+0x198>
      {
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	015a      	lsls	r2, r3, #5
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	4413      	add	r3, r2
 8004d1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	68ba      	ldr	r2, [r7, #8]
 8004d22:	7812      	ldrb	r2, [r2, #0]
 8004d24:	0151      	lsls	r1, r2, #5
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	440a      	add	r2, r1
 8004d2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d2e:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004d32:	6113      	str	r3, [r2, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	015a      	lsls	r2, r3, #5
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	7812      	ldrb	r2, [r2, #0]
 8004d48:	0151      	lsls	r1, r2, #5
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	440a      	add	r2, r1
 8004d4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d52:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d56:	6113      	str	r3, [r2, #16]
      }       
    }

    if (dma == 1U)
 8004d58:	79fb      	ldrb	r3, [r7, #7]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d10b      	bne.n	8004d76 <USB_EPStartXfer+0x1b6>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	015a      	lsls	r2, r3, #5
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	4413      	add	r3, r2
 8004d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	6153      	str	r3, [r2, #20]
 8004d74:	e015      	b.n	8004da2 <USB_EPStartXfer+0x1e2>
    }
    else
    {
      if (ep->type != EP_TYPE_ISOC)
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	78db      	ldrb	r3, [r3, #3]
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d011      	beq.n	8004da2 <USB_EPStartXfer+0x1e2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00d      	beq.n	8004da2 <USB_EPStartXfer+0x1e2>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	4619      	mov	r1, r3
 8004d94:	2301      	movs	r3, #1
 8004d96:	408b      	lsls	r3, r1
 8004d98:	68f9      	ldr	r1, [r7, #12]
 8004d9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	634b      	str	r3, [r1, #52]	; 0x34
        }
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	78db      	ldrb	r3, [r3, #3]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d12c      	bne.n	8004e04 <USB_EPStartXfer+0x244>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d112      	bne.n	8004de0 <USB_EPStartXfer+0x220>
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	015a      	lsls	r2, r3, #5
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68ba      	ldr	r2, [r7, #8]
 8004dcc:	7812      	ldrb	r2, [r2, #0]
 8004dce:	0151      	lsls	r1, r2, #5
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	440a      	add	r2, r1
 8004dd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dd8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ddc:	6013      	str	r3, [r2, #0]
 8004dde:	e011      	b.n	8004e04 <USB_EPStartXfer+0x244>
      }
      else
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	015a      	lsls	r2, r3, #5
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	4413      	add	r3, r2
 8004dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68ba      	ldr	r2, [r7, #8]
 8004df2:	7812      	ldrb	r2, [r2, #0]
 8004df4:	0151      	lsls	r1, r2, #5
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	440a      	add	r2, r1
 8004dfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e02:	6013      	str	r3, [r2, #0]
      }
    } 
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	015a      	lsls	r2, r3, #5
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68ba      	ldr	r2, [r7, #8]
 8004e16:	7812      	ldrb	r2, [r2, #0]
 8004e18:	0151      	lsls	r1, r2, #5
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	440a      	add	r2, r1
 8004e1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e22:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e26:	6013      	str	r3, [r2, #0]
    
    if (ep->type == EP_TYPE_ISOC)
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	78db      	ldrb	r3, [r3, #3]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	f040 80ed 	bne.w	800500c <USB_EPStartXfer+0x44c>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);   
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	68d9      	ldr	r1, [r3, #12]
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	781a      	ldrb	r2, [r3, #0]
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	b298      	uxth	r0, r3
 8004e40:	79fb      	ldrb	r3, [r7, #7]
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	4603      	mov	r3, r0
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f000 fa39 	bl	80052be <USB_WritePacket>
 8004e4c:	e0de      	b.n	800500c <USB_EPStartXfer+0x44c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */  
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	015a      	lsls	r2, r3, #5
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	4413      	add	r3, r2
 8004e58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	68ba      	ldr	r2, [r7, #8]
 8004e60:	7812      	ldrb	r2, [r2, #0]
 8004e62:	0151      	lsls	r1, r2, #5
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	440a      	add	r2, r1
 8004e68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e6c:	0cdb      	lsrs	r3, r3, #19
 8004e6e:	04db      	lsls	r3, r3, #19
 8004e70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	015a      	lsls	r2, r3, #5
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	68ba      	ldr	r2, [r7, #8]
 8004e84:	7812      	ldrb	r2, [r2, #0]
 8004e86:	0151      	lsls	r1, r2, #5
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	440a      	add	r2, r1
 8004e8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e90:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e94:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e98:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d12a      	bne.n	8004ef8 <USB_EPStartXfer+0x338>
    {
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	015a      	lsls	r2, r3, #5
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	4413      	add	r3, r2
 8004eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eb0:	691a      	ldr	r2, [r3, #16]
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eba:	68b9      	ldr	r1, [r7, #8]
 8004ebc:	7809      	ldrb	r1, [r1, #0]
 8004ebe:	0148      	lsls	r0, r1, #5
 8004ec0:	68f9      	ldr	r1, [r7, #12]
 8004ec2:	4401      	add	r1, r0
 8004ec4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	015a      	lsls	r2, r3, #5
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	68ba      	ldr	r2, [r7, #8]
 8004ede:	7812      	ldrb	r2, [r2, #0]
 8004ee0:	0151      	lsls	r1, r2, #5
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	440a      	add	r2, r1
 8004ee6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004eee:	6113      	str	r3, [r2, #16]
 8004ef0:	e03b      	b.n	8004f6a <USB_EPStartXfer+0x3aa>
 8004ef2:	bf00      	nop
 8004ef4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket; 
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	695a      	ldr	r2, [r3, #20]
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	4413      	add	r3, r2
 8004f02:	1e5a      	subs	r2, r3, #1
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f0c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	015a      	lsls	r2, r3, #5
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	4413      	add	r3, r2
 8004f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f1c:	691a      	ldr	r2, [r3, #16]
 8004f1e:	8afb      	ldrh	r3, [r7, #22]
 8004f20:	04db      	lsls	r3, r3, #19
 8004f22:	4619      	mov	r1, r3
 8004f24:	4b3c      	ldr	r3, [pc, #240]	; (8005018 <USB_EPStartXfer+0x458>)
 8004f26:	400b      	ands	r3, r1
 8004f28:	68b9      	ldr	r1, [r7, #8]
 8004f2a:	7809      	ldrb	r1, [r1, #0]
 8004f2c:	0148      	lsls	r0, r1, #5
 8004f2e:	68f9      	ldr	r1, [r7, #12]
 8004f30:	4401      	add	r1, r0
 8004f32:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f36:	4313      	orrs	r3, r2
 8004f38:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	015a      	lsls	r2, r3, #5
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	4413      	add	r3, r2
 8004f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f48:	691a      	ldr	r2, [r3, #16]
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	8af9      	ldrh	r1, [r7, #22]
 8004f50:	fb01 f303 	mul.w	r3, r1, r3
 8004f54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f58:	68b9      	ldr	r1, [r7, #8]
 8004f5a:	7809      	ldrb	r1, [r1, #0]
 8004f5c:	0148      	lsls	r0, r1, #5
 8004f5e:	68f9      	ldr	r1, [r7, #12]
 8004f60:	4401      	add	r1, r0
 8004f62:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f66:	4313      	orrs	r3, r2
 8004f68:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004f6a:	79fb      	ldrb	r3, [r7, #7]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d10a      	bne.n	8004f86 <USB_EPStartXfer+0x3c6>
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)ep->xfer_buff;
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	68d9      	ldr	r1, [r3, #12]
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	015a      	lsls	r2, r3, #5
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f82:	460a      	mov	r2, r1
 8004f84:	615a      	str	r2, [r3, #20]
    }
    
    if (ep->type == EP_TYPE_ISOC)
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	78db      	ldrb	r3, [r3, #3]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d12c      	bne.n	8004fe8 <USB_EPStartXfer+0x428>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d112      	bne.n	8004fc4 <USB_EPStartXfer+0x404>
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	015a      	lsls	r2, r3, #5
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68ba      	ldr	r2, [r7, #8]
 8004fb0:	7812      	ldrb	r2, [r2, #0]
 8004fb2:	0151      	lsls	r1, r2, #5
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	440a      	add	r2, r1
 8004fb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fbc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fc0:	6013      	str	r3, [r2, #0]
 8004fc2:	e011      	b.n	8004fe8 <USB_EPStartXfer+0x428>
      }
      else
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	015a      	lsls	r2, r3, #5
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	4413      	add	r3, r2
 8004fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68ba      	ldr	r2, [r7, #8]
 8004fd6:	7812      	ldrb	r2, [r2, #0]
 8004fd8:	0151      	lsls	r1, r2, #5
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	440a      	add	r2, r1
 8004fde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fe6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	015a      	lsls	r2, r3, #5
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68ba      	ldr	r2, [r7, #8]
 8004ffa:	7812      	ldrb	r2, [r2, #0]
 8004ffc:	0151      	lsls	r1, r2, #5
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	440a      	add	r2, r1
 8005002:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005006:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800500a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3718      	adds	r7, #24
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	1ff80000 	.word	0x1ff80000

0800501c <USB_EP0StartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800501c:	b480      	push	{r7}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	4613      	mov	r3, r2
 8005028:	71fb      	strb	r3, [r7, #7]
  /* IN endpoint */
  if (ep->is_in == 1U)
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	785b      	ldrb	r3, [r3, #1]
 800502e:	2b01      	cmp	r3, #1
 8005030:	f040 80c9 	bne.w	80051c6 <USB_EP0StartXfer+0x1aa>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d138      	bne.n	80050ae <USB_EP0StartXfer+0x92>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	015a      	lsls	r2, r3, #5
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	4413      	add	r3, r2
 8005046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	68ba      	ldr	r2, [r7, #8]
 800504e:	7812      	ldrb	r2, [r2, #0]
 8005050:	0151      	lsls	r1, r2, #5
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	440a      	add	r2, r1
 8005056:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800505a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800505e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005062:	6113      	str	r3, [r2, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	015a      	lsls	r2, r3, #5
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	4413      	add	r3, r2
 800506e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005072:	691b      	ldr	r3, [r3, #16]
 8005074:	68ba      	ldr	r2, [r7, #8]
 8005076:	7812      	ldrb	r2, [r2, #0]
 8005078:	0151      	lsls	r1, r2, #5
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	440a      	add	r2, r1
 800507e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005082:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005086:	6113      	str	r3, [r2, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	015a      	lsls	r2, r3, #5
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	4413      	add	r3, r2
 8005092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	68ba      	ldr	r2, [r7, #8]
 800509a:	7812      	ldrb	r2, [r2, #0]
 800509c:	0151      	lsls	r1, r2, #5
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	440a      	add	r2, r1
 80050a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050a6:	0cdb      	lsrs	r3, r3, #19
 80050a8:	04db      	lsls	r3, r3, #19
 80050aa:	6113      	str	r3, [r2, #16]
 80050ac:	e056      	b.n	800515c <USB_EP0StartXfer+0x140>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	015a      	lsls	r2, r3, #5
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	4413      	add	r3, r2
 80050b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	68ba      	ldr	r2, [r7, #8]
 80050c0:	7812      	ldrb	r2, [r2, #0]
 80050c2:	0151      	lsls	r1, r2, #5
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	440a      	add	r2, r1
 80050c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050cc:	0cdb      	lsrs	r3, r3, #19
 80050ce:	04db      	lsls	r3, r3, #19
 80050d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	015a      	lsls	r2, r3, #5
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	4413      	add	r3, r2
 80050dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	68ba      	ldr	r2, [r7, #8]
 80050e4:	7812      	ldrb	r2, [r2, #0]
 80050e6:	0151      	lsls	r1, r2, #5
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	440a      	add	r2, r1
 80050ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80050f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80050f8:	6113      	str	r3, [r2, #16]
      
      if(ep->xfer_len > ep->maxpacket)
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	695a      	ldr	r2, [r3, #20]
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	429a      	cmp	r2, r3
 8005104:	d903      	bls.n	800510e <USB_EP0StartXfer+0xf2>
      {
        ep->xfer_len = ep->maxpacket;
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	689a      	ldr	r2, [r3, #8]
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	015a      	lsls	r2, r3, #5
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	4413      	add	r3, r2
 8005118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	68ba      	ldr	r2, [r7, #8]
 8005120:	7812      	ldrb	r2, [r2, #0]
 8005122:	0151      	lsls	r1, r2, #5
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	440a      	add	r2, r1
 8005128:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800512c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005130:	6113      	str	r3, [r2, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	015a      	lsls	r2, r3, #5
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	4413      	add	r3, r2
 800513c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005140:	691a      	ldr	r2, [r3, #16]
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800514a:	68b9      	ldr	r1, [r7, #8]
 800514c:	7809      	ldrb	r1, [r1, #0]
 800514e:	0148      	lsls	r0, r1, #5
 8005150:	68f9      	ldr	r1, [r7, #12]
 8005152:	4401      	add	r1, r0
 8005154:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005158:	4313      	orrs	r3, r2
 800515a:	610b      	str	r3, [r1, #16]
    
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);     
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	015a      	lsls	r2, r3, #5
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	4413      	add	r3, r2
 8005166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68ba      	ldr	r2, [r7, #8]
 800516e:	7812      	ldrb	r2, [r2, #0]
 8005170:	0151      	lsls	r1, r2, #5
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	440a      	add	r2, r1
 8005176:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800517a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800517e:	6013      	str	r3, [r2, #0]
    
    if (dma == 1)
 8005180:	79fb      	ldrb	r3, [r7, #7]
 8005182:	2b01      	cmp	r3, #1
 8005184:	d10b      	bne.n	800519e <USB_EP0StartXfer+0x182>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	015a      	lsls	r2, r3, #5
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	4413      	add	r3, r2
 8005190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005194:	461a      	mov	r2, r3
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	6153      	str	r3, [r2, #20]
 800519c:	e088      	b.n	80052b0 <USB_EP0StartXfer+0x294>
    }
    else
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	f000 8084 	beq.w	80052b0 <USB_EP0StartXfer+0x294>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1U << (ep->num);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	4619      	mov	r1, r3
 80051b6:	2301      	movs	r3, #1
 80051b8:	408b      	lsls	r3, r1
 80051ba:	68f9      	ldr	r1, [r7, #12]
 80051bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051c0:	4313      	orrs	r3, r2
 80051c2:	634b      	str	r3, [r1, #52]	; 0x34
 80051c4:	e074      	b.n	80052b0 <USB_EP0StartXfer+0x294>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	015a      	lsls	r2, r3, #5
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	4413      	add	r3, r2
 80051d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	68ba      	ldr	r2, [r7, #8]
 80051d8:	7812      	ldrb	r2, [r2, #0]
 80051da:	0151      	lsls	r1, r2, #5
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	440a      	add	r2, r1
 80051e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051e4:	0cdb      	lsrs	r3, r3, #19
 80051e6:	04db      	lsls	r3, r3, #19
 80051e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	015a      	lsls	r2, r3, #5
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	4413      	add	r3, r2
 80051f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	68ba      	ldr	r2, [r7, #8]
 80051fc:	7812      	ldrb	r2, [r2, #0]
 80051fe:	0151      	lsls	r1, r2, #5
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	440a      	add	r2, r1
 8005204:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005208:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800520c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005210:	6113      	str	r3, [r2, #16]
      
    if (ep->xfer_len > 0U)
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d003      	beq.n	8005222 <USB_EP0StartXfer+0x206>
    {
      ep->xfer_len = ep->maxpacket;
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	689a      	ldr	r2, [r3, #8]
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	615a      	str	r2, [r3, #20]
    }
    
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	015a      	lsls	r2, r3, #5
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	4413      	add	r3, r2
 800522c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	68ba      	ldr	r2, [r7, #8]
 8005234:	7812      	ldrb	r2, [r2, #0]
 8005236:	0151      	lsls	r1, r2, #5
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	440a      	add	r2, r1
 800523c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005240:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005244:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	015a      	lsls	r2, r3, #5
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	4413      	add	r3, r2
 8005250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005254:	691a      	ldr	r2, [r3, #16]
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800525e:	68b9      	ldr	r1, [r7, #8]
 8005260:	7809      	ldrb	r1, [r1, #0]
 8005262:	0148      	lsls	r0, r1, #5
 8005264:	68f9      	ldr	r1, [r7, #12]
 8005266:	4401      	add	r1, r0
 8005268:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800526c:	4313      	orrs	r3, r2
 800526e:	610b      	str	r3, [r1, #16]
    

    if (dma == 1U)
 8005270:	79fb      	ldrb	r3, [r7, #7]
 8005272:	2b01      	cmp	r3, #1
 8005274:	d10a      	bne.n	800528c <USB_EP0StartXfer+0x270>
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	68d9      	ldr	r1, [r3, #12]
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	015a      	lsls	r2, r3, #5
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	4413      	add	r3, r2
 8005284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005288:	460a      	mov	r2, r1
 800528a:	615a      	str	r2, [r3, #20]
    }
    
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	015a      	lsls	r2, r3, #5
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	4413      	add	r3, r2
 8005296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68ba      	ldr	r2, [r7, #8]
 800529e:	7812      	ldrb	r2, [r2, #0]
 80052a0:	0151      	lsls	r1, r2, #5
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	440a      	add	r2, r1
 80052a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052ae:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3714      	adds	r7, #20
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr

080052be <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80052be:	b480      	push	{r7}
 80052c0:	b087      	sub	sp, #28
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	60f8      	str	r0, [r7, #12]
 80052c6:	60b9      	str	r1, [r7, #8]
 80052c8:	4611      	mov	r1, r2
 80052ca:	461a      	mov	r2, r3
 80052cc:	460b      	mov	r3, r1
 80052ce:	71fb      	strb	r3, [r7, #7]
 80052d0:	4613      	mov	r3, r2
 80052d2:	80bb      	strh	r3, [r7, #4]
  uint32_t count32b = 0U , i = 0U;
 80052d4:	2300      	movs	r3, #0
 80052d6:	613b      	str	r3, [r7, #16]
 80052d8:	2300      	movs	r3, #0
 80052da:	617b      	str	r3, [r7, #20]
  
  if (dma == 0U)
 80052dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d11a      	bne.n	800531a <USB_WritePacket+0x5c>
  {
    count32b =  (len + 3U) / 4U;
 80052e4:	88bb      	ldrh	r3, [r7, #4]
 80052e6:	3303      	adds	r3, #3
 80052e8:	089b      	lsrs	r3, r3, #2
 80052ea:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++, src += 4U)
 80052ec:	2300      	movs	r3, #0
 80052ee:	617b      	str	r3, [r7, #20]
 80052f0:	e00f      	b.n	8005312 <USB_WritePacket+0x54>
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 80052f2:	79fb      	ldrb	r3, [r7, #7]
 80052f4:	031a      	lsls	r2, r3, #12
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	4413      	add	r3, r2
 80052fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052fe:	461a      	mov	r2, r3
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	6013      	str	r3, [r2, #0]
    for (i = 0U; i < count32b; i++, src += 4U)
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	3301      	adds	r3, #1
 800530a:	617b      	str	r3, [r7, #20]
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	3304      	adds	r3, #4
 8005310:	60bb      	str	r3, [r7, #8]
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	429a      	cmp	r2, r3
 8005318:	d3eb      	bcc.n	80052f2 <USB_WritePacket+0x34>
    }
  }
  return HAL_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	371c      	adds	r7, #28
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <USB_ReadPacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005328:	b480      	push	{r7}
 800532a:	b087      	sub	sp, #28
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	4613      	mov	r3, r2
 8005334:	80fb      	strh	r3, [r7, #6]
  uint32_t i=0U;
 8005336:	2300      	movs	r3, #0
 8005338:	617b      	str	r3, [r7, #20]
  uint32_t count32b = (len + 3U) / 4U;
 800533a:	88fb      	ldrh	r3, [r7, #6]
 800533c:	3303      	adds	r3, #3
 800533e:	089b      	lsrs	r3, r3, #2
 8005340:	613b      	str	r3, [r7, #16]
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
 8005342:	2300      	movs	r3, #0
 8005344:	617b      	str	r3, [r7, #20]
 8005346:	e00b      	b.n	8005360 <USB_ReadPacket+0x38>
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	601a      	str	r2, [r3, #0]
  for ( i = 0U; i < count32b; i++, dest += 4U )
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	3301      	adds	r3, #1
 8005358:	617b      	str	r3, [r7, #20]
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	3304      	adds	r3, #4
 800535e:	60bb      	str	r3, [r7, #8]
 8005360:	697a      	ldr	r2, [r7, #20]
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	429a      	cmp	r2, r3
 8005366:	d3ef      	bcc.n	8005348 <USB_ReadPacket+0x20>
    
  }
  return ((void *)dest);
 8005368:	68bb      	ldr	r3, [r7, #8]
}
 800536a:	4618      	mov	r0, r3
 800536c:	371c      	adds	r7, #28
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr

08005376 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
 8005376:	b480      	push	{r7}
 8005378:	b083      	sub	sp, #12
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
 800537e:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1U)
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	785b      	ldrb	r3, [r3, #1]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d12e      	bne.n	80053e6 <USB_EPSetStall+0x70>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0U)
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	015a      	lsls	r2, r3, #5
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4413      	add	r3, r2
 8005392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	db11      	blt.n	80053c0 <USB_EPSetStall+0x4a>
    {
      USBx_INEP(ep->num)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS); 
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	015a      	lsls	r2, r3, #5
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4413      	add	r3, r2
 80053a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	683a      	ldr	r2, [r7, #0]
 80053ae:	7812      	ldrb	r2, [r2, #0]
 80053b0:	0151      	lsls	r1, r2, #5
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	440a      	add	r2, r1
 80053b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80053be:	6013      	str	r3, [r2, #0]
    } 
    USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	015a      	lsls	r2, r3, #5
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4413      	add	r3, r2
 80053ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	683a      	ldr	r2, [r7, #0]
 80053d2:	7812      	ldrb	r2, [r2, #0]
 80053d4:	0151      	lsls	r1, r2, #5
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	440a      	add	r2, r1
 80053da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80053e2:	6013      	str	r3, [r2, #0]
 80053e4:	e02d      	b.n	8005442 <USB_EPSetStall+0xcc>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	015a      	lsls	r2, r3, #5
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4413      	add	r3, r2
 80053f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	db11      	blt.n	800541e <USB_EPSetStall+0xa8>
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS); 
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	015a      	lsls	r2, r3, #5
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4413      	add	r3, r2
 8005404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	683a      	ldr	r2, [r7, #0]
 800540c:	7812      	ldrb	r2, [r2, #0]
 800540e:	0151      	lsls	r1, r2, #5
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	440a      	add	r2, r1
 8005414:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005418:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800541c:	6013      	str	r3, [r2, #0]
    } 
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	015a      	lsls	r2, r3, #5
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4413      	add	r3, r2
 8005428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	683a      	ldr	r2, [r7, #0]
 8005430:	7812      	ldrb	r2, [r2, #0]
 8005432:	0151      	lsls	r1, r2, #5
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	440a      	add	r2, r1
 8005438:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800543c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005440:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005442:	2300      	movs	r3, #0
}
 8005444:	4618      	mov	r0, r3
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1U)
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	785b      	ldrb	r3, [r3, #1]
 800545e:	2b01      	cmp	r3, #1
 8005460:	d12c      	bne.n	80054bc <USB_EPClearStall+0x6c>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	015a      	lsls	r2, r3, #5
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4413      	add	r3, r2
 800546c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	683a      	ldr	r2, [r7, #0]
 8005474:	7812      	ldrb	r2, [r2, #0]
 8005476:	0151      	lsls	r1, r2, #5
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	440a      	add	r2, r1
 800547c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005480:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005484:	6013      	str	r3, [r2, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	78db      	ldrb	r3, [r3, #3]
 800548a:	2b03      	cmp	r3, #3
 800548c:	d003      	beq.n	8005496 <USB_EPClearStall+0x46>
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	78db      	ldrb	r3, [r3, #3]
 8005492:	2b02      	cmp	r3, #2
 8005494:	d13e      	bne.n	8005514 <USB_EPClearStall+0xc4>
    {
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	015a      	lsls	r2, r3, #5
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4413      	add	r3, r2
 80054a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	683a      	ldr	r2, [r7, #0]
 80054a8:	7812      	ldrb	r2, [r2, #0]
 80054aa:	0151      	lsls	r1, r2, #5
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	440a      	add	r2, r1
 80054b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054b8:	6013      	str	r3, [r2, #0]
 80054ba:	e02b      	b.n	8005514 <USB_EPClearStall+0xc4>
    }    
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	015a      	lsls	r2, r3, #5
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4413      	add	r3, r2
 80054c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	683a      	ldr	r2, [r7, #0]
 80054ce:	7812      	ldrb	r2, [r2, #0]
 80054d0:	0151      	lsls	r1, r2, #5
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	440a      	add	r2, r1
 80054d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80054de:	6013      	str	r3, [r2, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	78db      	ldrb	r3, [r3, #3]
 80054e4:	2b03      	cmp	r3, #3
 80054e6:	d003      	beq.n	80054f0 <USB_EPClearStall+0xa0>
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	78db      	ldrb	r3, [r3, #3]
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d111      	bne.n	8005514 <USB_EPClearStall+0xc4>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	015a      	lsls	r2, r3, #5
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4413      	add	r3, r2
 80054fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	683a      	ldr	r2, [r7, #0]
 8005502:	7812      	ldrb	r2, [r2, #0]
 8005504:	0151      	lsls	r1, r2, #5
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	440a      	add	r2, r1
 800550a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800550e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005512:	6013      	str	r3, [r2, #0]
    }    
  }
  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	370c      	adds	r7, #12
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr

08005522 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005522:	b480      	push	{r7}
 8005524:	b083      	sub	sp, #12
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
 800552a:	460b      	mov	r3, r1
 800552c:	70fb      	strb	r3, [r7, #3]
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800553c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005540:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= (address << 4U) & USB_OTG_DCFG_DAD ;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	78fb      	ldrb	r3, [r7, #3]
 800554c:	011b      	lsls	r3, r3, #4
 800554e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005552:	6879      	ldr	r1, [r7, #4]
 8005554:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005558:	4313      	orrs	r3, r2
 800555a:	600b      	str	r3, [r1, #0]
  
  return HAL_OK;  
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	370c      	adds	r7, #12
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr

0800556a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 800556a:	b580      	push	{r7, lr}
 800556c:	b082      	sub	sp, #8
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005580:	f023 0302 	bic.w	r3, r3, #2
 8005584:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005586:	2003      	movs	r0, #3
 8005588:	f7fb f876 	bl	8000678 <HAL_Delay>
  
  return HAL_OK;  
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3708      	adds	r7, #8
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 8005596:	b580      	push	{r7, lr}
 8005598:	b082      	sub	sp, #8
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055ac:	f043 0302 	orr.w	r3, r3, #2
 80055b0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80055b2:	2003      	movs	r0, #3
 80055b4:	f7fb f860 	bl	8000678 <HAL_Delay>
  
  return HAL_OK;  
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3708      	adds	r7, #8
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
 80055c2:	b480      	push	{r7}
 80055c4:	b085      	sub	sp, #20
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
  uint32_t v = 0U;
 80055ca:	2300      	movs	r3, #0
 80055cc:	60fb      	str	r3, [r7, #12]
  
  v = USBx->GINTSTS;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	60fb      	str	r3, [r7, #12]
  v &= USBx->GINTMSK;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	699b      	ldr	r3, [r3, #24]
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	4013      	ands	r3, r2
 80055dc:	60fb      	str	r3, [r7, #12]
  return v;  
 80055de:	68fb      	ldr	r3, [r7, #12]
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3714      	adds	r7, #20
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DAINTMSK;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005604:	69db      	ldr	r3, [r3, #28]
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	4013      	ands	r3, r2
 800560a:	60fb      	str	r3, [r7, #12]
  return ((v & 0xffff0000U) >> 16U);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	0c1b      	lsrs	r3, r3, #16
}
 8005610:	4618      	mov	r0, r3
 8005612:	3714      	adds	r7, #20
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 800561c:	b480      	push	{r7}
 800561e:	b085      	sub	sp, #20
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800562a:	699b      	ldr	r3, [r3, #24]
 800562c:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DAINTMSK;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005634:	69db      	ldr	r3, [r3, #28]
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	4013      	ands	r3, r2
 800563a:	60fb      	str	r3, [r7, #12]
  return ((v & 0xFFFFU));
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	b29b      	uxth	r3, r3
}
 8005640:	4618      	mov	r0, r3
 8005642:	3714      	adds	r7, #20
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	460b      	mov	r3, r1
 8005656:	70fb      	strb	r3, [r7, #3]
  uint32_t v;
  v  = USBx_OUTEP(epnum)->DOEPINT;
 8005658:	78fb      	ldrb	r3, [r7, #3]
 800565a:	015a      	lsls	r2, r3, #5
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4413      	add	r3, r2
 8005660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DOEPMSK;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800566e:	695b      	ldr	r3, [r3, #20]
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	4013      	ands	r3, r2
 8005674:	60fb      	str	r3, [r7, #12]
  return v;
 8005676:	68fb      	ldr	r3, [r7, #12]
}
 8005678:	4618      	mov	r0, r3
 800567a:	3714      	adds	r7, #20
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 8005684:	b480      	push	{r7}
 8005686:	b087      	sub	sp, #28
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	460b      	mov	r3, r1
 800568e:	70fb      	strb	r3, [r7, #3]
  uint32_t v, msk, emp;
  
  msk = USBx_DEVICE->DIEPMSK;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	617b      	str	r3, [r7, #20]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056a2:	613b      	str	r3, [r7, #16]
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 80056a4:	78fb      	ldrb	r3, [r7, #3]
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	fa22 f303 	lsr.w	r3, r2, r3
 80056ac:	01db      	lsls	r3, r3, #7
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	697a      	ldr	r2, [r7, #20]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	617b      	str	r3, [r7, #20]
  v = USBx_INEP(epnum)->DIEPINT & msk;
 80056b6:	78fb      	ldrb	r3, [r7, #3]
 80056b8:	015a      	lsls	r2, r3, #5
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4413      	add	r3, r2
 80056be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	697a      	ldr	r2, [r7, #20]
 80056c6:	4013      	ands	r3, r2
 80056c8:	60fb      	str	r3, [r7, #12]
  return v;
 80056ca:	68fb      	ldr	r3, [r7, #12]
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	371c      	adds	r7, #28
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS ) & 0x1U);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	f003 0301 	and.w	r3, r3, #1
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800570a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800570e:	f023 0307 	bic.w	r3, r3, #7
 8005712:	6013      	str	r3, [r2, #0]
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	f003 0306 	and.w	r3, r3, #6
 8005720:	2b04      	cmp	r3, #4
 8005722:	d109      	bne.n	8005738 <USB_ActivateSetup+0x44>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005732:	f043 0303 	orr.w	r3, r3, #3
 8005736:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800574a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	370c      	adds	r7, #12
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr

0800575a <USB_EP0_OutStart>:
  *           1 : DMA feature used  
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800575a:	b480      	push	{r7}
 800575c:	b085      	sub	sp, #20
 800575e:	af00      	add	r7, sp, #0
 8005760:	60f8      	str	r0, [r7, #12]
 8005762:	460b      	mov	r3, r1
 8005764:	607a      	str	r2, [r7, #4]
 8005766:	72fb      	strb	r3, [r7, #11]
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800576e:	461a      	mov	r2, r3
 8005770:	2300      	movs	r3, #0
 8005772:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U)) ;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005782:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005786:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005796:	f043 0318 	orr.w	r3, r3, #24
 800579a:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057aa:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80057ae:	6113      	str	r3, [r2, #16]
  
  if (dma == 1U)
 80057b0:	7afb      	ldrb	r3, [r7, #11]
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d10c      	bne.n	80057d0 <USB_EP0_OutStart+0x76>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057bc:	461a      	mov	r2, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c8:	461a      	mov	r2, r3
 80057ca:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
 80057ce:	6013      	str	r3, [r2, #0]
  }
  
  return HAL_OK;  
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3714      	adds	r7, #20
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
	...

080057e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80057e8:	2300      	movs	r3, #0
 80057ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	3301      	adds	r3, #1
 80057f0:	60fb      	str	r3, [r7, #12]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	4a13      	ldr	r2, [pc, #76]	; (8005844 <USB_CoreReset+0x64>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d901      	bls.n	80057fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e01b      	b.n	8005836 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	2b00      	cmp	r3, #0
 8005804:	daf2      	bge.n	80057ec <USB_CoreReset+0xc>
  
  /* Core Soft Reset */
  count = 0U;
 8005806:	2300      	movs	r3, #0
 8005808:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	f043 0201 	orr.w	r2, r3, #1
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	3301      	adds	r3, #1
 800581a:	60fb      	str	r3, [r7, #12]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	4a09      	ldr	r2, [pc, #36]	; (8005844 <USB_CoreReset+0x64>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d901      	bls.n	8005828 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005824:	2303      	movs	r3, #3
 8005826:	e006      	b.n	8005836 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	691b      	ldr	r3, [r3, #16]
 800582c:	f003 0301 	and.w	r3, r3, #1
 8005830:	2b01      	cmp	r3, #1
 8005832:	d0f0      	beq.n	8005816 <USB_CoreReset+0x36>
  
  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3714      	adds	r7, #20
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	00030d40 	.word	0x00030d40

08005848 <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	460b      	mov	r3, r1
 8005852:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8005854:	2300      	movs	r3, #0
 8005856:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	7c1b      	ldrb	r3, [r3, #16]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d10e      	bne.n	800587e <USBD_CDC_Init+0x36>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8005860:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005864:	2202      	movs	r2, #2
 8005866:	2181      	movs	r1, #129	; 0x81
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f003 fea7 	bl	80095bc <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 800586e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005872:	2202      	movs	r2, #2
 8005874:	2101      	movs	r1, #1
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f003 fea0 	bl	80095bc <USBD_LL_OpenEP>
 800587c:	e00b      	b.n	8005896 <USBD_CDC_Init+0x4e>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 800587e:	2340      	movs	r3, #64	; 0x40
 8005880:	2202      	movs	r2, #2
 8005882:	2181      	movs	r1, #129	; 0x81
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f003 fe99 	bl	80095bc <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 800588a:	2340      	movs	r3, #64	; 0x40
 800588c:	2202      	movs	r2, #2
 800588e:	2101      	movs	r1, #1
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f003 fe93 	bl	80095bc <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 8005896:	2308      	movs	r3, #8
 8005898:	2203      	movs	r2, #3
 800589a:	2182      	movs	r1, #130	; 0x82
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f003 fe8d 	bl	80095bc <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80058a2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80058a6:	f004 f981 	bl	8009bac <malloc>
 80058aa:	4603      	mov	r3, r0
 80058ac:	461a      	mov	r2, r3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d102      	bne.n	80058c4 <USBD_CDC_Init+0x7c>
  {
    ret = 1; 
 80058be:	2301      	movs	r3, #1
 80058c0:	73fb      	strb	r3, [r7, #15]
 80058c2:	e026      	b.n	8005912 <USBD_CDC_Init+0xca>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80058ca:	60bb      	str	r3, [r7, #8]
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	2200      	movs	r2, #0
 80058da:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState =0;
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	7c1b      	ldrb	r3, [r3, #16]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d109      	bne.n	8005902 <USBD_CDC_Init+0xba>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80058f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058f8:	2101      	movs	r1, #1
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f003 ffda 	bl	80098b4 <USBD_LL_PrepareReceive>
 8005900:	e007      	b.n	8005912 <USBD_CDC_Init+0xca>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005908:	2340      	movs	r3, #64	; 0x40
 800590a:	2101      	movs	r1, #1
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f003 ffd1 	bl	80098b4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    
    
  }
  return ret;
 8005912:	7bfb      	ldrb	r3, [r7, #15]
}
 8005914:	4618      	mov	r0, r3
 8005916:	3710      	adds	r7, #16
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	460b      	mov	r3, r1
 8005926:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8005928:	2300      	movs	r3, #0
 800592a:	73fb      	strb	r3, [r7, #15]
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 800592c:	2181      	movs	r1, #129	; 0x81
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f003 fe82 	bl	8009638 <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 8005934:	2101      	movs	r1, #1
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f003 fe7e 	bl	8009638 <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 800593c:	2182      	movs	r1, #130	; 0x82
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f003 fe7a 	bl	8009638 <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00e      	beq.n	800596c <USBD_CDC_DeInit+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800595e:	4618      	mov	r0, r3
 8005960:	f004 f92c 	bl	8009bbc <free>
    pdev->pClassData = NULL;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  }
  
  return ret;
 800596c:	7bfb      	ldrb	r3, [r7, #15]
}
 800596e:	4618      	mov	r0, r3
 8005970:	3710      	adds	r7, #16
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
	...

08005978 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005988:	60fb      	str	r3, [r7, #12]
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005992:	2b00      	cmp	r3, #0
 8005994:	d039      	beq.n	8005a0a <USBD_CDC_Setup+0x92>
 8005996:	2b20      	cmp	r3, #32
 8005998:	d145      	bne.n	8005a26 <USBD_CDC_Setup+0xae>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	88db      	ldrh	r3, [r3, #6]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d029      	beq.n	80059f6 <USBD_CDC_Setup+0x7e>
    {
      if (req->bmRequest & 0x80)
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	b25b      	sxtb	r3, r3
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	da11      	bge.n	80059d0 <USBD_CDC_Setup+0x58>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	683a      	ldr	r2, [r7, #0]
 80059b6:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80059b8:	68f9      	ldr	r1, [r7, #12]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80059ba:	683a      	ldr	r2, [r7, #0]
 80059bc:	88d2      	ldrh	r2, [r2, #6]
 80059be:	4798      	blx	r3
                                                          req->wLength);
          USBD_CtlSendData (pdev, 
                            (uint8_t *)hcdc->data,
 80059c0:	68f9      	ldr	r1, [r7, #12]
          USBD_CtlSendData (pdev, 
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	88db      	ldrh	r3, [r3, #6]
 80059c6:	461a      	mov	r2, r3
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f001 f853 	bl	8006a74 <USBD_CtlSendData>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t*)req,
                                                        0);
    }
    break;
 80059ce:	e02b      	b.n	8005a28 <USBD_CDC_Setup+0xb0>
        hcdc->CmdOpCode = req->bRequest;
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	785a      	ldrb	r2, [r3, #1]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	88db      	ldrh	r3, [r3, #6]
 80059de:	b2da      	uxtb	r2, r3
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
                           (uint8_t *)hcdc->data,
 80059e6:	68f9      	ldr	r1, [r7, #12]
        USBD_CtlPrepareRx (pdev, 
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	88db      	ldrh	r3, [r3, #6]
 80059ec:	461a      	mov	r2, r3
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f001 f86e 	bl	8006ad0 <USBD_CtlPrepareRx>
    break;
 80059f4:	e018      	b.n	8005a28 <USBD_CDC_Setup+0xb0>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	683a      	ldr	r2, [r7, #0]
 8005a00:	7850      	ldrb	r0, [r2, #1]
 8005a02:	2200      	movs	r2, #0
 8005a04:	6839      	ldr	r1, [r7, #0]
 8005a06:	4798      	blx	r3
    break;
 8005a08:	e00e      	b.n	8005a28 <USBD_CDC_Setup+0xb0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	785b      	ldrb	r3, [r3, #1]
 8005a0e:	2b0a      	cmp	r3, #10
 8005a10:	d002      	beq.n	8005a18 <USBD_CDC_Setup+0xa0>
 8005a12:	2b0b      	cmp	r3, #11
 8005a14:	d006      	beq.n	8005a24 <USBD_CDC_Setup+0xac>
    case USB_REQ_SET_INTERFACE :
      break;
    }
 
  default: 
    break;
 8005a16:	e006      	b.n	8005a26 <USBD_CDC_Setup+0xae>
      USBD_CtlSendData (pdev,
 8005a18:	2201      	movs	r2, #1
 8005a1a:	4906      	ldr	r1, [pc, #24]	; (8005a34 <USBD_CDC_Setup+0xbc>)
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f001 f829 	bl	8006a74 <USBD_CtlSendData>
      break;
 8005a22:	e000      	b.n	8005a26 <USBD_CDC_Setup+0xae>
      break;
 8005a24:	bf00      	nop
    break;
 8005a26:	bf00      	nop
  }
  return USBD_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3710      	adds	r7, #16
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
 8005a32:	bf00      	nop
 8005a34:	2000025c 	.word	0x2000025c

08005a38 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b085      	sub	sp, #20
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	460b      	mov	r3, r1
 8005a42:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005a4a:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d005      	beq.n	8005a62 <USBD_CDC_DataIn+0x2a>
  {
    
    hcdc->TxState = 0;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    return USBD_OK;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	e000      	b.n	8005a64 <USBD_CDC_DataIn+0x2c>
  }
  else
  {
    return USBD_FAIL;
 8005a62:	2302      	movs	r3, #2
  }
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3714      	adds	r7, #20
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	460b      	mov	r3, r1
 8005a7a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005a82:	60fb      	str	r3, [r7, #12]
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8005a84:	78fb      	ldrb	r3, [r7, #3]
 8005a86:	4619      	mov	r1, r3
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f003 ff4d 	bl	8009928 <USBD_LL_GetRxDataSize>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d00d      	beq.n	8005abc <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005ab4:	4611      	mov	r1, r2
 8005ab6:	4798      	blx	r3

    return USBD_OK;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	e000      	b.n	8005abe <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005abc:	2302      	movs	r3, #2
  }
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3710      	adds	r7, #16
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b084      	sub	sp, #16
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005ad4:	60fb      	str	r3, [r7, #12]
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d015      	beq.n	8005b0c <USBD_CDC_EP0_RxReady+0x46>
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005ae6:	2bff      	cmp	r3, #255	; 0xff
 8005ae8:	d010      	beq.n	8005b0c <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005af8:	68f9      	ldr	r1, [r7, #12]
                                                      hcdc->CmdLength);
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005b00:	b292      	uxth	r2, r2
 8005b02:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFF; 
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	22ff      	movs	r2, #255	; 0xff
 8005b08:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
      
  }
  return USBD_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
	...

08005b18 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2243      	movs	r2, #67	; 0x43
 8005b24:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005b26:	4b03      	ldr	r3, [pc, #12]	; (8005b34 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr
 8005b34:	20000090 	.word	0x20000090

08005b38 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2243      	movs	r2, #67	; 0x43
 8005b44:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005b46:	4b03      	ldr	r3, [pc, #12]	; (8005b54 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr
 8005b54:	2000004c 	.word	0x2000004c

08005b58 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2243      	movs	r2, #67	; 0x43
 8005b64:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005b66:	4b03      	ldr	r3, [pc, #12]	; (8005b74 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr
 8005b74:	200000d4 	.word	0x200000d4

08005b78 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	220a      	movs	r2, #10
 8005b84:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005b86:	4b03      	ldr	r3, [pc, #12]	; (8005b94 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr
 8005b94:	20000008 	.word	0x20000008

08005b98 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005ba2:	2302      	movs	r3, #2
 8005ba4:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL)
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d005      	beq.n	8005bb8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	683a      	ldr	r2, [r7, #0]
 8005bb0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    ret = USBD_OK;    
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8005bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3714      	adds	r7, #20
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr

08005bc6 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	b087      	sub	sp, #28
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	60f8      	str	r0, [r7, #12]
 8005bce:	60b9      	str	r1, [r7, #8]
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005bda:	617b      	str	r3, [r7, #20]
  
  hcdc->TxBuffer = pbuff;
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	68ba      	ldr	r2, [r7, #8]
 8005be0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 8005be4:	88fa      	ldrh	r2, [r7, #6]
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	371c      	adds	r7, #28
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr

08005bfa <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8005bfa:	b480      	push	{r7}
 8005bfc:	b085      	sub	sp, #20
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
 8005c02:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005c0a:	60fb      	str	r3, [r7, #12]
  
  hcdc->RxBuffer = pbuff;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	683a      	ldr	r2, [r7, #0]
 8005c10:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  
  return USBD_OK;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3714      	adds	r7, #20
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr

08005c22 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 8005c22:	b580      	push	{r7, lr}
 8005c24:	b084      	sub	sp, #16
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005c30:	60fb      	str	r3, [r7, #12]
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d017      	beq.n	8005c6c <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	7c1b      	ldrb	r3, [r3, #16]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d109      	bne.n	8005c58 <USBD_CDC_ReceivePacket+0x36>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c4e:	2101      	movs	r1, #1
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f003 fe2f 	bl	80098b4 <USBD_LL_PrepareReceive>
 8005c56:	e007      	b.n	8005c68 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c5e:	2340      	movs	r3, #64	; 0x40
 8005c60:	2101      	movs	r1, #1
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f003 fe26 	bl	80098b4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	e000      	b.n	8005c6e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005c6c:	2302      	movs	r3, #2
  }
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3710      	adds	r7, #16
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
	...

08005c78 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	4613      	mov	r3, r2
 8005c84:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d10a      	bne.n	8005ca2 <USBD_Init+0x2a>
  {
    USBD_ErrLog("Invalid Device handle");
 8005c8c:	4814      	ldr	r0, [pc, #80]	; (8005ce0 <USBD_Init+0x68>)
 8005c8e:	f004 fb81 	bl	800a394 <iprintf>
 8005c92:	4814      	ldr	r0, [pc, #80]	; (8005ce4 <USBD_Init+0x6c>)
 8005c94:	f004 fb7e 	bl	800a394 <iprintf>
 8005c98:	200a      	movs	r0, #10
 8005c9a:	f004 fb93 	bl	800a3c4 <putchar>
    return USBD_FAIL; 
 8005c9e:	2302      	movs	r3, #2
 8005ca0:	e01a      	b.n	8005cd8 <USBD_Init+0x60>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d003      	beq.n	8005cb4 <USBD_Init+0x3c>
  {
    pdev->pClass = NULL;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d003      	beq.n	8005cc2 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	68ba      	ldr	r2, [r7, #8]
 8005cbe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->id = id;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	79fa      	ldrb	r2, [r7, #7]
 8005cce:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005cd0:	68f8      	ldr	r0, [r7, #12]
 8005cd2:	f003 fbed 	bl	80094b0 <USBD_LL_Init>
  
  return USBD_OK; 
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3710      	adds	r7, #16
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	0800ad20 	.word	0x0800ad20
 8005ce4:	0800ad28 	.word	0x0800ad28

08005ce8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d006      	beq.n	8005d0a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	683a      	ldr	r2, [r7, #0]
 8005d00:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    status = USBD_OK;
 8005d04:	2300      	movs	r3, #0
 8005d06:	73fb      	strb	r3, [r7, #15]
 8005d08:	e00a      	b.n	8005d20 <USBD_RegisterClass+0x38>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
 8005d0a:	4808      	ldr	r0, [pc, #32]	; (8005d2c <USBD_RegisterClass+0x44>)
 8005d0c:	f004 fb42 	bl	800a394 <iprintf>
 8005d10:	4807      	ldr	r0, [pc, #28]	; (8005d30 <USBD_RegisterClass+0x48>)
 8005d12:	f004 fb3f 	bl	800a394 <iprintf>
 8005d16:	200a      	movs	r0, #10
 8005d18:	f004 fb54 	bl	800a3c4 <putchar>
    status = USBD_FAIL; 
 8005d1c:	2302      	movs	r3, #2
 8005d1e:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8005d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3710      	adds	r7, #16
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	0800ad20 	.word	0x0800ad20
 8005d30:	0800ad40 	.word	0x0800ad40

08005d34 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b082      	sub	sp, #8
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f003 fc0b 	bl	8009558 <USBD_LL_Start>
  
  return USBD_OK;  
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3708      	adds	r7, #8
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	370c      	adds	r7, #12
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr

08005d62 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005d62:	b580      	push	{r7, lr}
 8005d64:	b084      	sub	sp, #16
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8005d6e:	2302      	movs	r3, #2
 8005d70:	73fb      	strb	r3, [r7, #15]
  
  if(pdev->pClass != NULL)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d00c      	beq.n	8005d96 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	78fa      	ldrb	r2, [r7, #3]
 8005d86:	4611      	mov	r1, r2
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	4798      	blx	r3
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d101      	bne.n	8005d96 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005d92:	2300      	movs	r3, #0
 8005d94:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret; 
 8005d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3710      	adds	r7, #16
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	460b      	mov	r3, r1
 8005daa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	78fa      	ldrb	r2, [r7, #3]
 8005db6:	4611      	mov	r1, r2
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	4798      	blx	r3
  return USBD_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3708      	adds	r7, #8
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b082      	sub	sp, #8
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
 8005dce:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005dd6:	6839      	ldr	r1, [r7, #0]
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f000 fda2 	bl	8006922 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2201      	movs	r2, #1
 8005de2:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8005dec:	461a      	mov	r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005dfa:	f003 031f 	and.w	r3, r3, #31
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	d016      	beq.n	8005e30 <USBD_LL_SetupStage+0x6a>
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	dc1c      	bgt.n	8005e40 <USBD_LL_SetupStage+0x7a>
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d002      	beq.n	8005e10 <USBD_LL_SetupStage+0x4a>
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d008      	beq.n	8005e20 <USBD_LL_SetupStage+0x5a>
 8005e0e:	e017      	b.n	8005e40 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005e16:	4619      	mov	r1, r3
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 f9c7 	bl	80061ac <USBD_StdDevReq>
    break;
 8005e1e:	e01a      	b.n	8005e56 <USBD_LL_SetupStage+0x90>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005e26:	4619      	mov	r1, r3
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f000 fa0f 	bl	800624c <USBD_StdItfReq>
    break;
 8005e2e:	e012      	b.n	8005e56 <USBD_LL_SetupStage+0x90>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005e36:	4619      	mov	r1, r3
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 fa3a 	bl	80062b2 <USBD_StdEPReq>
    break;
 8005e3e:	e00a      	b.n	8005e56 <USBD_LL_SetupStage+0x90>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005e46:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f003 fc28 	bl	80096a4 <USBD_LL_StallEP>
    break;
 8005e54:	bf00      	nop
  }  
  return USBD_OK;  
 8005e56:	2300      	movs	r3, #0
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3708      	adds	r7, #8
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b086      	sub	sp, #24
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	460b      	mov	r3, r1
 8005e6a:	607a      	str	r2, [r7, #4]
 8005e6c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8005e6e:	7afb      	ldrb	r3, [r7, #11]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d138      	bne.n	8005ee6 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8005e7a:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8005e82:	2b03      	cmp	r3, #3
 8005e84:	d142      	bne.n	8005f0c <USBD_LL_DataOutStage+0xac>
    {
      if(pep->rem_length > pep->maxpacket)
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	689a      	ldr	r2, [r3, #8]
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d914      	bls.n	8005ebc <USBD_LL_DataOutStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	689a      	ldr	r2, [r3, #8]
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	1ad2      	subs	r2, r2, r3
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	68da      	ldr	r2, [r3, #12]
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	bf28      	it	cs
 8005eac:	4613      	movcs	r3, r2
        USBD_CtlContinueRx (pdev, 
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	6879      	ldr	r1, [r7, #4]
 8005eb4:	68f8      	ldr	r0, [r7, #12]
 8005eb6:	f000 fe29 	bl	8006b0c <USBD_CtlContinueRx>
 8005eba:	e027      	b.n	8005f0c <USBD_LL_DataOutStage+0xac>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d00a      	beq.n	8005ede <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8005ece:	2b03      	cmp	r3, #3
 8005ed0:	d105      	bne.n	8005ede <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	68f8      	ldr	r0, [r7, #12]
 8005edc:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	f000 fe26 	bl	8006b30 <USBD_CtlSendStatus>
 8005ee4:	e012      	b.n	8005f0c <USBD_LL_DataOutStage+0xac>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005eec:	699b      	ldr	r3, [r3, #24]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d00c      	beq.n	8005f0c <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 8005ef8:	2b03      	cmp	r3, #3
 8005efa:	d107      	bne.n	8005f0c <USBD_LL_DataOutStage+0xac>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005f02:	699b      	ldr	r3, [r3, #24]
 8005f04:	7afa      	ldrb	r2, [r7, #11]
 8005f06:	4611      	mov	r1, r2
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	4798      	blx	r3
  }  
  return USBD_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3718      	adds	r7, #24
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8005f16:	b580      	push	{r7, lr}
 8005f18:	b086      	sub	sp, #24
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	60f8      	str	r0, [r7, #12]
 8005f1e:	460b      	mov	r3, r1
 8005f20:	607a      	str	r2, [r7, #4]
 8005f22:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8005f24:	7afb      	ldrb	r3, [r7, #11]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d16c      	bne.n	8006004 <USBD_LL_DataInStage+0xee>
  {
    pep = &pdev->ep_in[0];
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	3314      	adds	r3, #20
 8005f2e:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	d157      	bne.n	8005fea <USBD_LL_DataInStage+0xd4>
    {
      if(pep->rem_length > pep->maxpacket)
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	689a      	ldr	r2, [r3, #8]
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d915      	bls.n	8005f72 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	689a      	ldr	r2, [r3, #8]
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	1ad2      	subs	r2, r2, r3
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	6879      	ldr	r1, [r7, #4]
 8005f5e:	68f8      	ldr	r0, [r7, #12]
 8005f60:	f000 fda4 	bl	8006aac <USBD_CtlContinueSendData>
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8005f64:	2300      	movs	r3, #0
 8005f66:	2200      	movs	r2, #0
 8005f68:	2100      	movs	r1, #0
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	f003 fca2 	bl	80098b4 <USBD_LL_PrepareReceive>
 8005f70:	e03b      	b.n	8005fea <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	697a      	ldr	r2, [r7, #20]
 8005f78:	68d2      	ldr	r2, [r2, #12]
 8005f7a:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f7e:	fb01 f202 	mul.w	r2, r1, r2
 8005f82:	1a9b      	subs	r3, r3, r2
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d11c      	bne.n	8005fc2 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	685a      	ldr	r2, [r3, #4]
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d316      	bcc.n	8005fc2 <USBD_LL_DataInStage+0xac>
             (pep->total_length < pdev->ep0_data_len ))
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	685a      	ldr	r2, [r3, #4]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d20f      	bcs.n	8005fc2 <USBD_LL_DataInStage+0xac>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	2100      	movs	r1, #0
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	f000 fd80 	bl	8006aac <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	2100      	movs	r1, #0
 8005fba:	68f8      	ldr	r0, [r7, #12]
 8005fbc:	f003 fc7a 	bl	80098b4 <USBD_LL_PrepareReceive>
 8005fc0:	e013      	b.n	8005fea <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00a      	beq.n	8005fe4 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8005fd4:	2b03      	cmp	r3, #3
 8005fd6:	d105      	bne.n	8005fe4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	68f8      	ldr	r0, [r7, #12]
 8005fe2:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f000 fdb6 	bl	8006b56 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d11a      	bne.n	800602a <USBD_LL_DataInStage+0x114>
    {
      USBD_RunTestMode(pdev); 
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f7ff fea9 	bl	8005d4c <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 8006002:	e012      	b.n	800602a <USBD_LL_DataInStage+0x114>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800600a:	695b      	ldr	r3, [r3, #20]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00c      	beq.n	800602a <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 8006016:	2b03      	cmp	r3, #3
 8006018:	d107      	bne.n	800602a <USBD_LL_DataInStage+0x114>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006020:	695b      	ldr	r3, [r3, #20]
 8006022:	7afa      	ldrb	r2, [r7, #11]
 8006024:	4611      	mov	r1, r2
 8006026:	68f8      	ldr	r0, [r7, #12]
 8006028:	4798      	blx	r3
  }  
  return USBD_OK;
 800602a:	2300      	movs	r3, #0
}
 800602c:	4618      	mov	r0, r3
 800602e:	3718      	adds	r7, #24
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 800603c:	2340      	movs	r3, #64	; 0x40
 800603e:	2200      	movs	r2, #0
 8006040:	2100      	movs	r1, #0
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f003 faba 	bl	80095bc <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2240      	movs	r2, #64	; 0x40
 800604c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8006050:	2340      	movs	r3, #64	; 0x40
 8006052:	2200      	movs	r2, #0
 8006054:	2180      	movs	r1, #128	; 0x80
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f003 fab0 	bl	80095bc <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2240      	movs	r2, #64	; 0x40
 8006060:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006070:	2b00      	cmp	r3, #0
 8006072:	d009      	beq.n	8006088 <USBD_LL_Reset+0x54>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	6852      	ldr	r2, [r2, #4]
 8006080:	b2d2      	uxtb	r2, r2
 8006082:	4611      	mov	r1, r2
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	4798      	blx	r3
 
  
  return USBD_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3708      	adds	r7, #8
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8006092:	b480      	push	{r7}
 8006094:	b083      	sub	sp, #12
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
 800609a:	460b      	mov	r3, r1
 800609c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	78fa      	ldrb	r2, [r7, #3]
 80060a2:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	370c      	adds	r7, #12
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr

080060b2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80060b2:	b480      	push	{r7}
 80060b4:	b083      	sub	sp, #12
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2204      	movs	r2, #4
 80060ca:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 80060ce:	2300      	movs	r3, #0
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	370c      	adds	r7, #12
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr

080060fe <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80060fe:	b580      	push	{r7, lr}
 8006100:	b082      	sub	sp, #8
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800610c:	2b03      	cmp	r3, #3
 800610e:	d10b      	bne.n	8006128 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006116:	69db      	ldr	r3, [r3, #28]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d005      	beq.n	8006128 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006122:	69db      	ldr	r3, [r3, #28]
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3708      	adds	r7, #8
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}

08006132 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8006132:	b480      	push	{r7}
 8006134:	b083      	sub	sp, #12
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
 800613a:	460b      	mov	r3, r1
 800613c:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	460b      	mov	r3, r1
 8006156:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	370c      	adds	r7, #12
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr

08006166 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8006166:	b480      	push	{r7}
 8006168:	b083      	sub	sp, #12
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b082      	sub	sp, #8
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	6852      	ldr	r2, [r2, #4]
 8006198:	b2d2      	uxtb	r2, r2
 800619a:	4611      	mov	r1, r2
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	4798      	blx	r3
   
  return USBD_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3708      	adds	r7, #8
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
	...

080061ac <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 80061b6:	2300      	movs	r3, #0
 80061b8:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	785b      	ldrb	r3, [r3, #1]
 80061be:	2b09      	cmp	r3, #9
 80061c0:	d839      	bhi.n	8006236 <USBD_StdDevReq+0x8a>
 80061c2:	a201      	add	r2, pc, #4	; (adr r2, 80061c8 <USBD_StdDevReq+0x1c>)
 80061c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c8:	08006219 	.word	0x08006219
 80061cc:	0800622d 	.word	0x0800622d
 80061d0:	08006237 	.word	0x08006237
 80061d4:	08006223 	.word	0x08006223
 80061d8:	08006237 	.word	0x08006237
 80061dc:	080061fb 	.word	0x080061fb
 80061e0:	080061f1 	.word	0x080061f1
 80061e4:	08006237 	.word	0x08006237
 80061e8:	0800620f 	.word	0x0800620f
 80061ec:	08006205 	.word	0x08006205
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 80061f0:	6839      	ldr	r1, [r7, #0]
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 f93a 	bl	800646c <USBD_GetDescriptor>
    break;
 80061f8:	e022      	b.n	8006240 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 80061fa:	6839      	ldr	r1, [r7, #0]
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f000 fa29 	bl	8006654 <USBD_SetAddress>
    break;
 8006202:	e01d      	b.n	8006240 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 8006204:	6839      	ldr	r1, [r7, #0]
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 fa64 	bl	80066d4 <USBD_SetConfig>
    break;
 800620c:	e018      	b.n	8006240 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 800620e:	6839      	ldr	r1, [r7, #0]
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 fae7 	bl	80067e4 <USBD_GetConfig>
    break;
 8006216:	e013      	b.n	8006240 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 8006218:	6839      	ldr	r1, [r7, #0]
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 fb14 	bl	8006848 <USBD_GetStatus>
    break;
 8006220:	e00e      	b.n	8006240 <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 8006222:	6839      	ldr	r1, [r7, #0]
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 fb39 	bl	800689c <USBD_SetFeature>
    break;
 800622a:	e009      	b.n	8006240 <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 800622c:	6839      	ldr	r1, [r7, #0]
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 fb4f 	bl	80068d2 <USBD_ClrFeature>
    break;
 8006234:	e004      	b.n	8006240 <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 8006236:	6839      	ldr	r1, [r7, #0]
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 fbaf 	bl	800699c <USBD_CtlError>
    break;
 800623e:	bf00      	nop
  }
  
  return ret;
 8006240:	7bfb      	ldrb	r3, [r7, #15]
}
 8006242:	4618      	mov	r0, r3
 8006244:	3710      	adds	r7, #16
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop

0800624c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 8006256:	2300      	movs	r3, #0
 8006258:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev_state) 
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8006260:	2b03      	cmp	r3, #3
 8006262:	d11b      	bne.n	800629c <USBD_StdItfReq+0x50>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	889b      	ldrh	r3, [r3, #4]
 8006268:	b2db      	uxtb	r3, r3
 800626a:	2b01      	cmp	r3, #1
 800626c:	d811      	bhi.n	8006292 <USBD_StdItfReq+0x46>
    {
      pdev->pClass->Setup (pdev, req); 
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	6839      	ldr	r1, [r7, #0]
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	88db      	ldrh	r3, [r3, #6]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d110      	bne.n	80062a6 <USBD_StdItfReq+0x5a>
 8006284:	7bfb      	ldrb	r3, [r7, #15]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d10d      	bne.n	80062a6 <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 fc50 	bl	8006b30 <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 8006290:	e009      	b.n	80062a6 <USBD_StdItfReq+0x5a>
       USBD_CtlError(pdev , req);
 8006292:	6839      	ldr	r1, [r7, #0]
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 fb81 	bl	800699c <USBD_CtlError>
    break;
 800629a:	e004      	b.n	80062a6 <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 800629c:	6839      	ldr	r1, [r7, #0]
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 fb7c 	bl	800699c <USBD_CtlError>
    break;
 80062a4:	e000      	b.n	80062a8 <USBD_StdItfReq+0x5c>
    break;
 80062a6:	bf00      	nop
  }
  return USBD_OK;
 80062a8:	2300      	movs	r3, #0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3710      	adds	r7, #16
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}

080062b2 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80062b2:	b580      	push	{r7, lr}
 80062b4:	b084      	sub	sp, #16
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
 80062ba:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 80062bc:	2300      	movs	r3, #0
 80062be:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	889b      	ldrh	r3, [r3, #4]
 80062c4:	73bb      	strb	r3, [r7, #14]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062ce:	2b20      	cmp	r3, #32
 80062d0:	d108      	bne.n	80062e4 <USBD_StdEPReq+0x32>
  {
    pdev->pClass->Setup (pdev, req);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	6839      	ldr	r1, [r7, #0]
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	4798      	blx	r3
    
    return USBD_OK;
 80062e0:	2300      	movs	r3, #0
 80062e2:	e0be      	b.n	8006462 <USBD_StdEPReq+0x1b0>
  }
  
  switch (req->bRequest) 
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	785b      	ldrb	r3, [r3, #1]
 80062e8:	2b03      	cmp	r3, #3
 80062ea:	d007      	beq.n	80062fc <USBD_StdEPReq+0x4a>
 80062ec:	2b03      	cmp	r3, #3
 80062ee:	f300 80b6 	bgt.w	800645e <USBD_StdEPReq+0x1ac>
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d06d      	beq.n	80063d2 <USBD_StdEPReq+0x120>
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d035      	beq.n	8006366 <USBD_StdEPReq+0xb4>
      break;
    }
    break;
    
  default:
    break;
 80062fa:	e0b0      	b.n	800645e <USBD_StdEPReq+0x1ac>
    switch (pdev->dev_state) 
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8006302:	2b02      	cmp	r3, #2
 8006304:	d002      	beq.n	800630c <USBD_StdEPReq+0x5a>
 8006306:	2b03      	cmp	r3, #3
 8006308:	d00c      	beq.n	8006324 <USBD_StdEPReq+0x72>
 800630a:	e025      	b.n	8006358 <USBD_StdEPReq+0xa6>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800630c:	7bbb      	ldrb	r3, [r7, #14]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d027      	beq.n	8006362 <USBD_StdEPReq+0xb0>
 8006312:	7bbb      	ldrb	r3, [r7, #14]
 8006314:	2b80      	cmp	r3, #128	; 0x80
 8006316:	d024      	beq.n	8006362 <USBD_StdEPReq+0xb0>
        USBD_LL_StallEP(pdev , ep_addr);
 8006318:	7bbb      	ldrb	r3, [r7, #14]
 800631a:	4619      	mov	r1, r3
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f003 f9c1 	bl	80096a4 <USBD_LL_StallEP>
      break;	
 8006322:	e01e      	b.n	8006362 <USBD_StdEPReq+0xb0>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	885b      	ldrh	r3, [r3, #2]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d10a      	bne.n	8006342 <USBD_StdEPReq+0x90>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800632c:	7bbb      	ldrb	r3, [r7, #14]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d007      	beq.n	8006342 <USBD_StdEPReq+0x90>
 8006332:	7bbb      	ldrb	r3, [r7, #14]
 8006334:	2b80      	cmp	r3, #128	; 0x80
 8006336:	d004      	beq.n	8006342 <USBD_StdEPReq+0x90>
          USBD_LL_StallEP(pdev , ep_addr);
 8006338:	7bbb      	ldrb	r3, [r7, #14]
 800633a:	4619      	mov	r1, r3
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f003 f9b1 	bl	80096a4 <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	6839      	ldr	r1, [r7, #0]
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 fbed 	bl	8006b30 <USBD_CtlSendStatus>
      break;
 8006356:	e005      	b.n	8006364 <USBD_StdEPReq+0xb2>
      USBD_CtlError(pdev , req);
 8006358:	6839      	ldr	r1, [r7, #0]
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 fb1e 	bl	800699c <USBD_CtlError>
      break;    
 8006360:	e000      	b.n	8006364 <USBD_StdEPReq+0xb2>
      break;	
 8006362:	bf00      	nop
    break;
 8006364:	e07c      	b.n	8006460 <USBD_StdEPReq+0x1ae>
    switch (pdev->dev_state) 
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800636c:	2b02      	cmp	r3, #2
 800636e:	d002      	beq.n	8006376 <USBD_StdEPReq+0xc4>
 8006370:	2b03      	cmp	r3, #3
 8006372:	d00c      	beq.n	800638e <USBD_StdEPReq+0xdc>
 8006374:	e024      	b.n	80063c0 <USBD_StdEPReq+0x10e>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8006376:	7bbb      	ldrb	r3, [r7, #14]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d026      	beq.n	80063ca <USBD_StdEPReq+0x118>
 800637c:	7bbb      	ldrb	r3, [r7, #14]
 800637e:	2b80      	cmp	r3, #128	; 0x80
 8006380:	d023      	beq.n	80063ca <USBD_StdEPReq+0x118>
        USBD_LL_StallEP(pdev , ep_addr);
 8006382:	7bbb      	ldrb	r3, [r7, #14]
 8006384:	4619      	mov	r1, r3
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f003 f98c 	bl	80096a4 <USBD_LL_StallEP>
      break;	
 800638c:	e01d      	b.n	80063ca <USBD_StdEPReq+0x118>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	885b      	ldrh	r3, [r3, #2]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d11b      	bne.n	80063ce <USBD_StdEPReq+0x11c>
        if ((ep_addr & 0x7F) != 0x00) 
 8006396:	7bbb      	ldrb	r3, [r7, #14]
 8006398:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800639c:	2b00      	cmp	r3, #0
 800639e:	d00b      	beq.n	80063b8 <USBD_StdEPReq+0x106>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 80063a0:	7bbb      	ldrb	r3, [r7, #14]
 80063a2:	4619      	mov	r1, r3
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f003 f9b3 	bl	8009710 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	6839      	ldr	r1, [r7, #0]
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 fbb9 	bl	8006b30 <USBD_CtlSendStatus>
      break;
 80063be:	e006      	b.n	80063ce <USBD_StdEPReq+0x11c>
      USBD_CtlError(pdev , req);
 80063c0:	6839      	ldr	r1, [r7, #0]
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 faea 	bl	800699c <USBD_CtlError>
      break;    
 80063c8:	e002      	b.n	80063d0 <USBD_StdEPReq+0x11e>
      break;	
 80063ca:	bf00      	nop
 80063cc:	e048      	b.n	8006460 <USBD_StdEPReq+0x1ae>
      break;
 80063ce:	bf00      	nop
    break;
 80063d0:	e046      	b.n	8006460 <USBD_StdEPReq+0x1ae>
    switch (pdev->dev_state) 
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d002      	beq.n	80063e2 <USBD_StdEPReq+0x130>
 80063dc:	2b03      	cmp	r3, #3
 80063de:	d00b      	beq.n	80063f8 <USBD_StdEPReq+0x146>
 80063e0:	e036      	b.n	8006450 <USBD_StdEPReq+0x19e>
      if ((ep_addr & 0x7F) != 0x00) 
 80063e2:	7bbb      	ldrb	r3, [r7, #14]
 80063e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d036      	beq.n	800645a <USBD_StdEPReq+0x1a8>
        USBD_LL_StallEP(pdev , ep_addr);
 80063ec:	7bbb      	ldrb	r3, [r7, #14]
 80063ee:	4619      	mov	r1, r3
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f003 f957 	bl	80096a4 <USBD_LL_StallEP>
      break;	
 80063f6:	e030      	b.n	800645a <USBD_StdEPReq+0x1a8>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80063f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	da08      	bge.n	8006412 <USBD_StdEPReq+0x160>
 8006400:	7bbb      	ldrb	r3, [r7, #14]
 8006402:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006406:	3301      	adds	r3, #1
 8006408:	011b      	lsls	r3, r3, #4
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	4413      	add	r3, r2
 800640e:	3304      	adds	r3, #4
 8006410:	e007      	b.n	8006422 <USBD_StdEPReq+0x170>
                                         &pdev->ep_out[ep_addr & 0x7F];
 8006412:	7bbb      	ldrb	r3, [r7, #14]
 8006414:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8006418:	3310      	adds	r3, #16
 800641a:	011b      	lsls	r3, r3, #4
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	4413      	add	r3, r2
 8006420:	3304      	adds	r3, #4
 8006422:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8006424:	7bbb      	ldrb	r3, [r7, #14]
 8006426:	4619      	mov	r1, r3
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f003 f9a7 	bl	800977c <USBD_LL_IsStallEP>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d003      	beq.n	800643c <USBD_StdEPReq+0x18a>
        pep->status = 0x0001;     
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	2201      	movs	r2, #1
 8006438:	601a      	str	r2, [r3, #0]
 800643a:	e002      	b.n	8006442 <USBD_StdEPReq+0x190>
        pep->status = 0x0000;  
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	2200      	movs	r2, #0
 8006440:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 8006442:	68bb      	ldr	r3, [r7, #8]
      USBD_CtlSendData (pdev,
 8006444:	2202      	movs	r2, #2
 8006446:	4619      	mov	r1, r3
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 fb13 	bl	8006a74 <USBD_CtlSendData>
      break;
 800644e:	e005      	b.n	800645c <USBD_StdEPReq+0x1aa>
      USBD_CtlError(pdev , req);
 8006450:	6839      	ldr	r1, [r7, #0]
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 faa2 	bl	800699c <USBD_CtlError>
      break;
 8006458:	e000      	b.n	800645c <USBD_StdEPReq+0x1aa>
      break;	
 800645a:	bf00      	nop
    break;
 800645c:	e000      	b.n	8006460 <USBD_StdEPReq+0x1ae>
    break;
 800645e:	bf00      	nop
  }
  return ret;
 8006460:	7bfb      	ldrb	r3, [r7, #15]
}
 8006462:	4618      	mov	r0, r3
 8006464:	3710      	adds	r7, #16
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
	...

0800646c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	885b      	ldrh	r3, [r3, #2]
 800647a:	0a1b      	lsrs	r3, r3, #8
 800647c:	b29b      	uxth	r3, r3
 800647e:	3b01      	subs	r3, #1
 8006480:	2b06      	cmp	r3, #6
 8006482:	f200 80c9 	bhi.w	8006618 <USBD_GetDescriptor+0x1ac>
 8006486:	a201      	add	r2, pc, #4	; (adr r2, 800648c <USBD_GetDescriptor+0x20>)
 8006488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648c:	080064a9 	.word	0x080064a9
 8006490:	080064c1 	.word	0x080064c1
 8006494:	08006501 	.word	0x08006501
 8006498:	08006619 	.word	0x08006619
 800649c:	08006619 	.word	0x08006619
 80064a0:	080065c5 	.word	0x080065c5
 80064a4:	080065eb 	.word	0x080065eb
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	7c12      	ldrb	r2, [r2, #16]
 80064b4:	f107 010a 	add.w	r1, r7, #10
 80064b8:	4610      	mov	r0, r2
 80064ba:	4798      	blx	r3
 80064bc:	60f8      	str	r0, [r7, #12]
    break;
 80064be:	e0b0      	b.n	8006622 <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	7c1b      	ldrb	r3, [r3, #16]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d10d      	bne.n	80064e4 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80064ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d0:	f107 020a 	add.w	r2, r7, #10
 80064d4:	4610      	mov	r0, r2
 80064d6:	4798      	blx	r3
 80064d8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	3301      	adds	r3, #1
 80064de:	2202      	movs	r2, #2
 80064e0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80064e2:	e09e      	b.n	8006622 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80064ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ec:	f107 020a 	add.w	r2, r7, #10
 80064f0:	4610      	mov	r0, r2
 80064f2:	4798      	blx	r3
 80064f4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	3301      	adds	r3, #1
 80064fa:	2202      	movs	r2, #2
 80064fc:	701a      	strb	r2, [r3, #0]
    break;
 80064fe:	e090      	b.n	8006622 <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	885b      	ldrh	r3, [r3, #2]
 8006504:	b2db      	uxtb	r3, r3
 8006506:	2b05      	cmp	r3, #5
 8006508:	d856      	bhi.n	80065b8 <USBD_GetDescriptor+0x14c>
 800650a:	a201      	add	r2, pc, #4	; (adr r2, 8006510 <USBD_GetDescriptor+0xa4>)
 800650c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006510:	08006529 	.word	0x08006529
 8006514:	08006541 	.word	0x08006541
 8006518:	08006559 	.word	0x08006559
 800651c:	08006571 	.word	0x08006571
 8006520:	08006589 	.word	0x08006589
 8006524:	080065a1 	.word	0x080065a1
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	7c12      	ldrb	r2, [r2, #16]
 8006534:	f107 010a 	add.w	r1, r7, #10
 8006538:	4610      	mov	r0, r2
 800653a:	4798      	blx	r3
 800653c:	60f8      	str	r0, [r7, #12]
      break;
 800653e:	e040      	b.n	80065c2 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	7c12      	ldrb	r2, [r2, #16]
 800654c:	f107 010a 	add.w	r1, r7, #10
 8006550:	4610      	mov	r0, r2
 8006552:	4798      	blx	r3
 8006554:	60f8      	str	r0, [r7, #12]
      break;
 8006556:	e034      	b.n	80065c2 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	7c12      	ldrb	r2, [r2, #16]
 8006564:	f107 010a 	add.w	r1, r7, #10
 8006568:	4610      	mov	r0, r2
 800656a:	4798      	blx	r3
 800656c:	60f8      	str	r0, [r7, #12]
      break;
 800656e:	e028      	b.n	80065c2 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	7c12      	ldrb	r2, [r2, #16]
 800657c:	f107 010a 	add.w	r1, r7, #10
 8006580:	4610      	mov	r0, r2
 8006582:	4798      	blx	r3
 8006584:	60f8      	str	r0, [r7, #12]
      break;
 8006586:	e01c      	b.n	80065c2 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800658e:	695b      	ldr	r3, [r3, #20]
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	7c12      	ldrb	r2, [r2, #16]
 8006594:	f107 010a 	add.w	r1, r7, #10
 8006598:	4610      	mov	r0, r2
 800659a:	4798      	blx	r3
 800659c:	60f8      	str	r0, [r7, #12]
      break;
 800659e:	e010      	b.n	80065c2 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80065a6:	699b      	ldr	r3, [r3, #24]
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	7c12      	ldrb	r2, [r2, #16]
 80065ac:	f107 010a 	add.w	r1, r7, #10
 80065b0:	4610      	mov	r0, r2
 80065b2:	4798      	blx	r3
 80065b4:	60f8      	str	r0, [r7, #12]
      break;
 80065b6:	e004      	b.n	80065c2 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 80065b8:	6839      	ldr	r1, [r7, #0]
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 f9ee 	bl	800699c <USBD_CtlError>
      return;
 80065c0:	e044      	b.n	800664c <USBD_GetDescriptor+0x1e0>
#endif   
    }
    break;
 80065c2:	e02e      	b.n	8006622 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	7c1b      	ldrb	r3, [r3, #16]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d109      	bne.n	80065e0 <USBD_GetDescriptor+0x174>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80065d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065d4:	f107 020a 	add.w	r2, r7, #10
 80065d8:	4610      	mov	r0, r2
 80065da:	4798      	blx	r3
 80065dc:	60f8      	str	r0, [r7, #12]
      break;
 80065de:	e020      	b.n	8006622 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80065e0:	6839      	ldr	r1, [r7, #0]
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 f9da 	bl	800699c <USBD_CtlError>
      return;
 80065e8:	e030      	b.n	800664c <USBD_GetDescriptor+0x1e0>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	7c1b      	ldrb	r3, [r3, #16]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d10d      	bne.n	800660e <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80065f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065fa:	f107 020a 	add.w	r2, r7, #10
 80065fe:	4610      	mov	r0, r2
 8006600:	4798      	blx	r3
 8006602:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	3301      	adds	r3, #1
 8006608:	2207      	movs	r2, #7
 800660a:	701a      	strb	r2, [r3, #0]
      break; 
 800660c:	e009      	b.n	8006622 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800660e:	6839      	ldr	r1, [r7, #0]
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 f9c3 	bl	800699c <USBD_CtlError>
      return;
 8006616:	e019      	b.n	800664c <USBD_GetDescriptor+0x1e0>
    }

  default: 
     USBD_CtlError(pdev , req);
 8006618:	6839      	ldr	r1, [r7, #0]
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 f9be 	bl	800699c <USBD_CtlError>
    return;
 8006620:	e014      	b.n	800664c <USBD_GetDescriptor+0x1e0>
  }
  
  if((len != 0)&& (req->wLength != 0))
 8006622:	897b      	ldrh	r3, [r7, #10]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d011      	beq.n	800664c <USBD_GetDescriptor+0x1e0>
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	88db      	ldrh	r3, [r3, #6]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d00d      	beq.n	800664c <USBD_GetDescriptor+0x1e0>
  {
    
    len = MIN(len , req->wLength);
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	88da      	ldrh	r2, [r3, #6]
 8006634:	897b      	ldrh	r3, [r7, #10]
 8006636:	4293      	cmp	r3, r2
 8006638:	bf28      	it	cs
 800663a:	4613      	movcs	r3, r2
 800663c:	b29b      	uxth	r3, r3
 800663e:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 8006640:	897b      	ldrh	r3, [r7, #10]
 8006642:	461a      	mov	r2, r3
 8006644:	68f9      	ldr	r1, [r7, #12]
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 fa14 	bl	8006a74 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 800664c:	3710      	adds	r7, #16
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop

08006654 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	889b      	ldrh	r3, [r3, #4]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d12c      	bne.n	80066c0 <USBD_SetAddress+0x6c>
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	88db      	ldrh	r3, [r3, #6]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d128      	bne.n	80066c0 <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	885b      	ldrh	r3, [r3, #2]
 8006672:	b2db      	uxtb	r3, r3
 8006674:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006678:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8006680:	2b03      	cmp	r3, #3
 8006682:	d104      	bne.n	800668e <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 8006684:	6839      	ldr	r1, [r7, #0]
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 f988 	bl	800699c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800668c:	e01d      	b.n	80066ca <USBD_SetAddress+0x76>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	7bfa      	ldrb	r2, [r7, #15]
 8006692:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8006696:	7bfb      	ldrb	r3, [r7, #15]
 8006698:	4619      	mov	r1, r3
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f003 f89a 	bl	80097d4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 fa45 	bl	8006b30 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 80066a6:	7bfb      	ldrb	r3, [r7, #15]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d004      	beq.n	80066b6 <USBD_SetAddress+0x62>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2202      	movs	r2, #2
 80066b0:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80066b4:	e009      	b.n	80066ca <USBD_SetAddress+0x76>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2201      	movs	r2, #1
 80066ba:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80066be:	e004      	b.n	80066ca <USBD_SetAddress+0x76>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 80066c0:	6839      	ldr	r1, [r7, #0]
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 f96a 	bl	800699c <USBD_CtlError>
  } 
}
 80066c8:	bf00      	nop
 80066ca:	bf00      	nop
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
	...

080066d4 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b082      	sub	sp, #8
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	885b      	ldrh	r3, [r3, #2]
 80066e2:	b2da      	uxtb	r2, r3
 80066e4:	4b3e      	ldr	r3, [pc, #248]	; (80067e0 <USBD_SetConfig+0x10c>)
 80066e6:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80066e8:	4b3d      	ldr	r3, [pc, #244]	; (80067e0 <USBD_SetConfig+0x10c>)
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d904      	bls.n	80066fa <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 80066f0:	6839      	ldr	r1, [r7, #0]
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f952 	bl	800699c <USBD_CtlError>
 80066f8:	e06f      	b.n	80067da <USBD_SetConfig+0x106>
  } 
  else 
  {
    switch (pdev->dev_state) 
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8006700:	2b02      	cmp	r3, #2
 8006702:	d002      	beq.n	800670a <USBD_SetConfig+0x36>
 8006704:	2b03      	cmp	r3, #3
 8006706:	d023      	beq.n	8006750 <USBD_SetConfig+0x7c>
 8006708:	e062      	b.n	80067d0 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 800670a:	4b35      	ldr	r3, [pc, #212]	; (80067e0 <USBD_SetConfig+0x10c>)
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d01a      	beq.n	8006748 <USBD_SetConfig+0x74>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8006712:	4b33      	ldr	r3, [pc, #204]	; (80067e0 <USBD_SetConfig+0x10c>)
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	461a      	mov	r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2203      	movs	r2, #3
 8006720:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8006724:	4b2e      	ldr	r3, [pc, #184]	; (80067e0 <USBD_SetConfig+0x10c>)
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	4619      	mov	r1, r3
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f7ff fb19 	bl	8005d62 <USBD_SetClassConfig>
 8006730:	4603      	mov	r3, r0
 8006732:	2b02      	cmp	r3, #2
 8006734:	d104      	bne.n	8006740 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev , req);  
 8006736:	6839      	ldr	r1, [r7, #0]
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 f92f 	bl	800699c <USBD_CtlError>
          return;
 800673e:	e04c      	b.n	80067da <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 f9f5 	bl	8006b30 <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 8006746:	e048      	b.n	80067da <USBD_SetConfig+0x106>
         USBD_CtlSendStatus(pdev);
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 f9f1 	bl	8006b30 <USBD_CtlSendStatus>
      break;
 800674e:	e044      	b.n	80067da <USBD_SetConfig+0x106>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 8006750:	4b23      	ldr	r3, [pc, #140]	; (80067e0 <USBD_SetConfig+0x10c>)
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d112      	bne.n	800677e <USBD_SetConfig+0xaa>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2202      	movs	r2, #2
 800675c:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8006760:	4b1f      	ldr	r3, [pc, #124]	; (80067e0 <USBD_SetConfig+0x10c>)
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	461a      	mov	r2, r3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 800676a:	4b1d      	ldr	r3, [pc, #116]	; (80067e0 <USBD_SetConfig+0x10c>)
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	4619      	mov	r1, r3
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f7ff fb15 	bl	8005da0 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 f9da 	bl	8006b30 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800677c:	e02d      	b.n	80067da <USBD_SetConfig+0x106>
      else  if (cfgidx != pdev->dev_config) 
 800677e:	4b18      	ldr	r3, [pc, #96]	; (80067e0 <USBD_SetConfig+0x10c>)
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	461a      	mov	r2, r3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	429a      	cmp	r2, r3
 800678a:	d01d      	beq.n	80067c8 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	b2db      	uxtb	r3, r3
 8006792:	4619      	mov	r1, r3
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f7ff fb03 	bl	8005da0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800679a:	4b11      	ldr	r3, [pc, #68]	; (80067e0 <USBD_SetConfig+0x10c>)
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	461a      	mov	r2, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 80067a4:	4b0e      	ldr	r3, [pc, #56]	; (80067e0 <USBD_SetConfig+0x10c>)
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	4619      	mov	r1, r3
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f7ff fad9 	bl	8005d62 <USBD_SetClassConfig>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b02      	cmp	r3, #2
 80067b4:	d104      	bne.n	80067c0 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev , req);  
 80067b6:	6839      	ldr	r1, [r7, #0]
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f000 f8ef 	bl	800699c <USBD_CtlError>
          return;
 80067be:	e00c      	b.n	80067da <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 f9b5 	bl	8006b30 <USBD_CtlSendStatus>
      break;
 80067c6:	e008      	b.n	80067da <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 f9b1 	bl	8006b30 <USBD_CtlSendStatus>
      break;
 80067ce:	e004      	b.n	80067da <USBD_SetConfig+0x106>
      
    default:					
       USBD_CtlError(pdev , req);                     
 80067d0:	6839      	ldr	r1, [r7, #0]
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 f8e2 	bl	800699c <USBD_CtlError>
      break;
 80067d8:	bf00      	nop
    }
  }
}
 80067da:	3708      	adds	r7, #8
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	2000025d 	.word	0x2000025d

080067e4 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	88db      	ldrh	r3, [r3, #6]
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d004      	beq.n	8006800 <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 80067f6:	6839      	ldr	r1, [r7, #0]
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 f8cf 	bl	800699c <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80067fe:	e01f      	b.n	8006840 <USBD_GetConfig+0x5c>
    switch (pdev->dev_state )  
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8006806:	2b02      	cmp	r3, #2
 8006808:	d002      	beq.n	8006810 <USBD_GetConfig+0x2c>
 800680a:	2b03      	cmp	r3, #3
 800680c:	d00b      	beq.n	8006826 <USBD_GetConfig+0x42>
 800680e:	e012      	b.n	8006836 <USBD_GetConfig+0x52>
      pdev->dev_default_config = 0;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	3308      	adds	r3, #8
      USBD_CtlSendData (pdev, 
 800681a:	2201      	movs	r2, #1
 800681c:	4619      	mov	r1, r3
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 f928 	bl	8006a74 <USBD_CtlSendData>
      break;
 8006824:	e00c      	b.n	8006840 <USBD_GetConfig+0x5c>
                        (uint8_t *)&pdev->dev_config,
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	3304      	adds	r3, #4
      USBD_CtlSendData (pdev, 
 800682a:	2201      	movs	r2, #1
 800682c:	4619      	mov	r1, r3
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 f920 	bl	8006a74 <USBD_CtlSendData>
      break;
 8006834:	e004      	b.n	8006840 <USBD_GetConfig+0x5c>
       USBD_CtlError(pdev , req);
 8006836:	6839      	ldr	r1, [r7, #0]
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 f8af 	bl	800699c <USBD_CtlError>
      break;
 800683e:	bf00      	nop
}
 8006840:	bf00      	nop
 8006842:	3708      	adds	r7, #8
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8006858:	3b02      	subs	r3, #2
 800685a:	2b01      	cmp	r3, #1
 800685c:	d815      	bhi.n	800688a <USBD_GetStatus+0x42>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2201      	movs	r2, #1
 8006862:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800686a:	2b00      	cmp	r3, #0
 800686c:	d005      	beq.n	800687a <USBD_GetStatus+0x32>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	f043 0202 	orr.w	r2, r3, #2
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	330c      	adds	r3, #12
    USBD_CtlSendData (pdev, 
 800687e:	2202      	movs	r2, #2
 8006880:	4619      	mov	r1, r3
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 f8f6 	bl	8006a74 <USBD_CtlSendData>
                      2);
    break;
 8006888:	e004      	b.n	8006894 <USBD_GetStatus+0x4c>
    
  default :
    USBD_CtlError(pdev , req);                        
 800688a:	6839      	ldr	r1, [r7, #0]
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 f885 	bl	800699c <USBD_CtlError>
    break;
 8006892:	bf00      	nop
  }
}
 8006894:	bf00      	nop
 8006896:	3708      	adds	r7, #8
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b082      	sub	sp, #8
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	885b      	ldrh	r3, [r3, #2]
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d10d      	bne.n	80068ca <USBD_SetFeature+0x2e>
  {
    pdev->dev_remote_wakeup = 1;  
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2201      	movs	r2, #1
 80068b2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	6839      	ldr	r1, [r7, #0]
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 f933 	bl	8006b30 <USBD_CtlSendStatus>
  }

}
 80068ca:	bf00      	nop
 80068cc:	3708      	adds	r7, #8
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}

080068d2 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 80068d2:	b580      	push	{r7, lr}
 80068d4:	b082      	sub	sp, #8
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
 80068da:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80068e2:	3b02      	subs	r3, #2
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d812      	bhi.n	800690e <USBD_ClrFeature+0x3c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	885b      	ldrh	r3, [r3, #2]
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d113      	bne.n	8006918 <USBD_ClrFeature+0x46>
    {
      pdev->dev_remote_wakeup = 0; 
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	6839      	ldr	r1, [r7, #0]
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 f912 	bl	8006b30 <USBD_CtlSendStatus>
    }
    break;
 800690c:	e004      	b.n	8006918 <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 800690e:	6839      	ldr	r1, [r7, #0]
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 f843 	bl	800699c <USBD_CtlError>
    break;
 8006916:	e000      	b.n	800691a <USBD_ClrFeature+0x48>
    break;
 8006918:	bf00      	nop
  }
}
 800691a:	bf00      	nop
 800691c:	3708      	adds	r7, #8
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}

08006922 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006922:	b480      	push	{r7}
 8006924:	b083      	sub	sp, #12
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
 800692a:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	781a      	ldrb	r2, [r3, #0]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	785a      	ldrb	r2, [r3, #1]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	3302      	adds	r3, #2
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	b29a      	uxth	r2, r3
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	3303      	adds	r3, #3
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	b29b      	uxth	r3, r3
 800694c:	021b      	lsls	r3, r3, #8
 800694e:	b29b      	uxth	r3, r3
 8006950:	4413      	add	r3, r2
 8006952:	b29a      	uxth	r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	3304      	adds	r3, #4
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	b29a      	uxth	r2, r3
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	3305      	adds	r3, #5
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	b29b      	uxth	r3, r3
 8006968:	021b      	lsls	r3, r3, #8
 800696a:	b29b      	uxth	r3, r3
 800696c:	4413      	add	r3, r2
 800696e:	b29a      	uxth	r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	3306      	adds	r3, #6
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	b29a      	uxth	r2, r3
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	3307      	adds	r3, #7
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	b29b      	uxth	r3, r3
 8006984:	021b      	lsls	r3, r3, #8
 8006986:	b29b      	uxth	r3, r3
 8006988:	4413      	add	r3, r2
 800698a:	b29a      	uxth	r2, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	80da      	strh	r2, [r3, #6]

}
 8006990:	bf00      	nop
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 80069a6:	2180      	movs	r1, #128	; 0x80
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f002 fe7b 	bl	80096a4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 80069ae:	2100      	movs	r1, #0
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f002 fe77 	bl	80096a4 <USBD_LL_StallEP>
}
 80069b6:	bf00      	nop
 80069b8:	3708      	adds	r7, #8
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80069be:	b580      	push	{r7, lr}
 80069c0:	b086      	sub	sp, #24
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	60f8      	str	r0, [r7, #12]
 80069c6:	60b9      	str	r1, [r7, #8]
 80069c8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 80069ca:	2300      	movs	r3, #0
 80069cc:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d033      	beq.n	8006a3c <USBD_GetString+0x7e>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	f000 f835 	bl	8006a44 <USBD_GetLen>
 80069da:	4603      	mov	r3, r0
 80069dc:	3301      	adds	r3, #1
 80069de:	b29b      	uxth	r3, r3
 80069e0:	005b      	lsls	r3, r3, #1
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	881a      	ldrh	r2, [r3, #0]
 80069ec:	7dfb      	ldrb	r3, [r7, #23]
 80069ee:	1c59      	adds	r1, r3, #1
 80069f0:	75f9      	strb	r1, [r7, #23]
 80069f2:	4619      	mov	r1, r3
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	440b      	add	r3, r1
 80069f8:	b2d2      	uxtb	r2, r2
 80069fa:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80069fc:	7dfb      	ldrb	r3, [r7, #23]
 80069fe:	1c5a      	adds	r2, r3, #1
 8006a00:	75fa      	strb	r2, [r7, #23]
 8006a02:	461a      	mov	r2, r3
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	4413      	add	r3, r2
 8006a08:	2203      	movs	r2, #3
 8006a0a:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 8006a0c:	e012      	b.n	8006a34 <USBD_GetString+0x76>
    {
      unicode[idx++] = *desc++;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	1c5a      	adds	r2, r3, #1
 8006a12:	60fa      	str	r2, [r7, #12]
 8006a14:	7dfa      	ldrb	r2, [r7, #23]
 8006a16:	1c51      	adds	r1, r2, #1
 8006a18:	75f9      	strb	r1, [r7, #23]
 8006a1a:	4611      	mov	r1, r2
 8006a1c:	68ba      	ldr	r2, [r7, #8]
 8006a1e:	440a      	add	r2, r1
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 8006a24:	7dfb      	ldrb	r3, [r7, #23]
 8006a26:	1c5a      	adds	r2, r3, #1
 8006a28:	75fa      	strb	r2, [r7, #23]
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	4413      	add	r3, r2
 8006a30:	2200      	movs	r2, #0
 8006a32:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0') 
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d1e8      	bne.n	8006a0e <USBD_GetString+0x50>
    }
  } 
}
 8006a3c:	bf00      	nop
 8006a3e:	3718      	adds	r7, #24
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b085      	sub	sp, #20
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0') 
 8006a50:	e005      	b.n	8006a5e <USBD_GetLen+0x1a>
    {
        len++;
 8006a52:	7bfb      	ldrb	r3, [r7, #15]
 8006a54:	3301      	adds	r3, #1
 8006a56:	73fb      	strb	r3, [r7, #15]
        buf++;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	607b      	str	r3, [r7, #4]
    while (*buf != '\0') 
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d1f5      	bne.n	8006a52 <USBD_GetLen+0xe>
    }

    return len;
 8006a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3714      	adds	r7, #20
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	4613      	mov	r3, r2
 8006a80:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2202      	movs	r2, #2
 8006a86:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8006a8a:	88fa      	ldrh	r2, [r7, #6]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 8006a90:	88fa      	ldrh	r2, [r7, #6]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8006a96:	88fb      	ldrh	r3, [r7, #6]
 8006a98:	68ba      	ldr	r2, [r7, #8]
 8006a9a:	2100      	movs	r1, #0
 8006a9c:	68f8      	ldr	r0, [r7, #12]
 8006a9e:	f002 fecf 	bl	8009840 <USBD_LL_Transmit>
  
  return USBD_OK;
 8006aa2:	2300      	movs	r3, #0
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3710      	adds	r7, #16
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	4613      	mov	r3, r2
 8006ab8:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8006aba:	88fb      	ldrh	r3, [r7, #6]
 8006abc:	68ba      	ldr	r2, [r7, #8]
 8006abe:	2100      	movs	r1, #0
 8006ac0:	68f8      	ldr	r0, [r7, #12]
 8006ac2:	f002 febd 	bl	8009840 <USBD_LL_Transmit>
  
  return USBD_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3710      	adds	r7, #16
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	4613      	mov	r3, r2
 8006adc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2203      	movs	r2, #3
 8006ae2:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8006ae6:	88fa      	ldrh	r2, [r7, #6]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 8006aee:	88fa      	ldrh	r2, [r7, #6]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8006af6:	88fb      	ldrh	r3, [r7, #6]
 8006af8:	68ba      	ldr	r2, [r7, #8]
 8006afa:	2100      	movs	r1, #0
 8006afc:	68f8      	ldr	r0, [r7, #12]
 8006afe:	f002 fed9 	bl	80098b4 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
 8006b02:	2300      	movs	r3, #0
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3710      	adds	r7, #16
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	4613      	mov	r3, r2
 8006b18:	80fb      	strh	r3, [r7, #6]

  USBD_LL_PrepareReceive (pdev,
 8006b1a:	88fb      	ldrh	r3, [r7, #6]
 8006b1c:	68ba      	ldr	r2, [r7, #8]
 8006b1e:	2100      	movs	r1, #0
 8006b20:	68f8      	ldr	r0, [r7, #12]
 8006b22:	f002 fec7 	bl	80098b4 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 8006b26:	2300      	movs	r3, #0
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3710      	adds	r7, #16
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2204      	movs	r2, #4
 8006b3c:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8006b40:	2300      	movs	r3, #0
 8006b42:	2200      	movs	r2, #0
 8006b44:	2100      	movs	r1, #0
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f002 fe7a 	bl	8009840 <USBD_LL_Transmit>
  
  return USBD_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3708      	adds	r7, #8
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}

08006b56 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8006b56:	b580      	push	{r7, lr}
 8006b58:	b082      	sub	sp, #8
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2205      	movs	r2, #5
 8006b62:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8006b66:	2300      	movs	r3, #0
 8006b68:	2200      	movs	r2, #0
 8006b6a:	2100      	movs	r1, #0
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f002 fea1 	bl	80098b4 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3708      	adds	r7, #8
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <UserCode_Init>:
		LED_startLedSequence(i);
	}
}
*/
void UserCode_Init()
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	af00      	add	r7, sp, #0
	// LEDs
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 8006b80:	2201      	movs	r2, #1
 8006b82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006b86:	481d      	ldr	r0, [pc, #116]	; (8006bfc <UserCode_Init+0x80>)
 8006b88:	f7fa f86e 	bl	8000c68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006b92:	481a      	ldr	r0, [pc, #104]	; (8006bfc <UserCode_Init+0x80>)
 8006b94:	f7fa f868 	bl	8000c68 <HAL_GPIO_WritePin>

	// Enable timers for PWM
	HAL_TIM_Base_Start(&htim1);
 8006b98:	4819      	ldr	r0, [pc, #100]	; (8006c00 <UserCode_Init+0x84>)
 8006b9a:	f7fc fd00 	bl	800359e <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8006b9e:	2100      	movs	r1, #0
 8006ba0:	4817      	ldr	r0, [pc, #92]	; (8006c00 <UserCode_Init+0x84>)
 8006ba2:	f7fc fd5d 	bl	8003660 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8006ba6:	2104      	movs	r1, #4
 8006ba8:	4815      	ldr	r0, [pc, #84]	; (8006c00 <UserCode_Init+0x84>)
 8006baa:	f7fc fd59 	bl	8003660 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8006bae:	2108      	movs	r1, #8
 8006bb0:	4813      	ldr	r0, [pc, #76]	; (8006c00 <UserCode_Init+0x84>)
 8006bb2:	f7fc fd55 	bl	8003660 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8006bb6:	210c      	movs	r1, #12
 8006bb8:	4811      	ldr	r0, [pc, #68]	; (8006c00 <UserCode_Init+0x84>)
 8006bba:	f7fc fd51 	bl	8003660 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim2);
 8006bbe:	4811      	ldr	r0, [pc, #68]	; (8006c04 <UserCode_Init+0x88>)
 8006bc0:	f7fc fced 	bl	800359e <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8006bc4:	2100      	movs	r1, #0
 8006bc6:	480f      	ldr	r0, [pc, #60]	; (8006c04 <UserCode_Init+0x88>)
 8006bc8:	f7fc fd4a 	bl	8003660 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8006bcc:	2104      	movs	r1, #4
 8006bce:	480d      	ldr	r0, [pc, #52]	; (8006c04 <UserCode_Init+0x88>)
 8006bd0:	f7fc fd46 	bl	8003660 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8006bd4:	2108      	movs	r1, #8
 8006bd6:	480b      	ldr	r0, [pc, #44]	; (8006c04 <UserCode_Init+0x88>)
 8006bd8:	f7fc fd42 	bl	8003660 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8006bdc:	210c      	movs	r1, #12
 8006bde:	4809      	ldr	r0, [pc, #36]	; (8006c04 <UserCode_Init+0x88>)
 8006be0:	f7fc fd3e 	bl	8003660 <HAL_TIM_PWM_Start>

	// Activate power output for the LEDs
	HAL_GPIO_WritePin(EN_15V_GPIO_Port, EN_15V_Pin, GPIO_PIN_SET);
 8006be4:	2201      	movs	r2, #1
 8006be6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006bea:	4807      	ldr	r0, [pc, #28]	; (8006c08 <UserCode_Init+0x8c>)
 8006bec:	f7fa f83c 	bl	8000c68 <HAL_GPIO_WritePin>

	// Timer 1ms for updating the patterns
	HAL_TIM_Base_Start_IT(&htim6);
 8006bf0:	4806      	ldr	r0, [pc, #24]	; (8006c0c <UserCode_Init+0x90>)
 8006bf2:	f7fc fcef 	bl	80035d4 <HAL_TIM_Base_Start_IT>

	//CreateSequencesForMeasure(180000);
}
 8006bf6:	bf00      	nop
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	40020c00 	.word	0x40020c00
 8006c00:	200004e0 	.word	0x200004e0
 8006c04:	2000051c 	.word	0x2000051c
 8006c08:	40020800 	.word	0x40020800
 8006c0c:	20000558 	.word	0x20000558

08006c10 <UserCode_While>:

void UserCode_While()
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	af00      	add	r7, sp, #0
	// Check if any data has been received on the USB Virtual Com Port (VCP)
	if(VCP_retrieveInputData(vcp_data, &vcp_length) != 0)
 8006c14:	490c      	ldr	r1, [pc, #48]	; (8006c48 <UserCode_While+0x38>)
 8006c16:	480d      	ldr	r0, [pc, #52]	; (8006c4c <UserCode_While+0x3c>)
 8006c18:	f002 fa04 	bl	8009024 <VCP_retrieveInputData>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d010      	beq.n	8006c44 <UserCode_While+0x34>
	{
		// Check that we have no memory overflow
		if(vcp_length > VCP_BUFFER_SIZE)
 8006c22:	4b09      	ldr	r3, [pc, #36]	; (8006c48 <UserCode_While+0x38>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2bc8      	cmp	r3, #200	; 0xc8
 8006c28:	d905      	bls.n	8006c36 <UserCode_While+0x26>
		{
			// THE VCP buffer is too small ! The program is already corrupt at this point !
			// Increase the VCP buffer size or find a way to limit the partial buffer size.
			assert(0);
 8006c2a:	4b09      	ldr	r3, [pc, #36]	; (8006c50 <UserCode_While+0x40>)
 8006c2c:	4a09      	ldr	r2, [pc, #36]	; (8006c54 <UserCode_While+0x44>)
 8006c2e:	2170      	movs	r1, #112	; 0x70
 8006c30:	4809      	ldr	r0, [pc, #36]	; (8006c58 <UserCode_While+0x48>)
 8006c32:	f002 ff67 	bl	8009b04 <__assert_func>

		// Echo the received data to the PC
		//VCP_SendBuffer(vcp_data, vcp_length);

		// Decode the partial JSON data
		jsonDecoding(vcp_data, vcp_length);
 8006c36:	4b04      	ldr	r3, [pc, #16]	; (8006c48 <UserCode_While+0x38>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	4803      	ldr	r0, [pc, #12]	; (8006c4c <UserCode_While+0x3c>)
 8006c40:	f001 fe7e 	bl	8008940 <jsonDecoding>
	}
}
 8006c44:	bf00      	nop
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	20000260 	.word	0x20000260
 8006c4c:	20000264 	.word	0x20000264
 8006c50:	0800ad58 	.word	0x0800ad58
 8006c54:	0800aeb8 	.word	0x0800aeb8
 8006c58:	0800ad5c 	.word	0x0800ad5c

08006c5c <LED_setSequence>:


static Led_t leds[MAX_LED_CHANNELS];

void LED_setSequence(uint8_t index, Sequence_t *sequence)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	4603      	mov	r3, r0
 8006c64:	6039      	str	r1, [r7, #0]
 8006c66:	71fb      	strb	r3, [r7, #7]
	leds[index].sequence = sequence;
 8006c68:	79fa      	ldrb	r2, [r7, #7]
 8006c6a:	4925      	ldr	r1, [pc, #148]	; (8006d00 <LED_setSequence+0xa4>)
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	005b      	lsls	r3, r3, #1
 8006c70:	4413      	add	r3, r2
 8006c72:	00db      	lsls	r3, r3, #3
 8006c74:	440b      	add	r3, r1
 8006c76:	683a      	ldr	r2, [r7, #0]
 8006c78:	601a      	str	r2, [r3, #0]
	leds[index].pattern_position = 0;
 8006c7a:	79fa      	ldrb	r2, [r7, #7]
 8006c7c:	4920      	ldr	r1, [pc, #128]	; (8006d00 <LED_setSequence+0xa4>)
 8006c7e:	4613      	mov	r3, r2
 8006c80:	005b      	lsls	r3, r3, #1
 8006c82:	4413      	add	r3, r2
 8006c84:	00db      	lsls	r3, r3, #3
 8006c86:	440b      	add	r3, r1
 8006c88:	3304      	adds	r3, #4
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	601a      	str	r2, [r3, #0]
	leds[index].current_pattern = 0;
 8006c8e:	79fa      	ldrb	r2, [r7, #7]
 8006c90:	491b      	ldr	r1, [pc, #108]	; (8006d00 <LED_setSequence+0xa4>)
 8006c92:	4613      	mov	r3, r2
 8006c94:	005b      	lsls	r3, r3, #1
 8006c96:	4413      	add	r3, r2
 8006c98:	00db      	lsls	r3, r3, #3
 8006c9a:	440b      	add	r3, r1
 8006c9c:	3308      	adds	r3, #8
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	801a      	strh	r2, [r3, #0]
	leds[index].interval_count = 0;
 8006ca2:	79fa      	ldrb	r2, [r7, #7]
 8006ca4:	4916      	ldr	r1, [pc, #88]	; (8006d00 <LED_setSequence+0xa4>)
 8006ca6:	4613      	mov	r3, r2
 8006ca8:	005b      	lsls	r3, r3, #1
 8006caa:	4413      	add	r3, r2
 8006cac:	00db      	lsls	r3, r3, #3
 8006cae:	440b      	add	r3, r1
 8006cb0:	330c      	adds	r3, #12
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	601a      	str	r2, [r3, #0]
	leds[index].pattern_duration_count = 0;
 8006cb6:	79fa      	ldrb	r2, [r7, #7]
 8006cb8:	4911      	ldr	r1, [pc, #68]	; (8006d00 <LED_setSequence+0xa4>)
 8006cba:	4613      	mov	r3, r2
 8006cbc:	005b      	lsls	r3, r3, #1
 8006cbe:	4413      	add	r3, r2
 8006cc0:	00db      	lsls	r3, r3, #3
 8006cc2:	440b      	add	r3, r1
 8006cc4:	3310      	adds	r3, #16
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	601a      	str	r2, [r3, #0]

	leds[index].sequence_on = 0;
 8006cca:	79fa      	ldrb	r2, [r7, #7]
 8006ccc:	490c      	ldr	r1, [pc, #48]	; (8006d00 <LED_setSequence+0xa4>)
 8006cce:	4613      	mov	r3, r2
 8006cd0:	005b      	lsls	r3, r3, #1
 8006cd2:	4413      	add	r3, r2
 8006cd4:	00db      	lsls	r3, r3, #3
 8006cd6:	440b      	add	r3, r1
 8006cd8:	3314      	adds	r3, #20
 8006cda:	2200      	movs	r2, #0
 8006cdc:	701a      	strb	r2, [r3, #0]
	leds[index].sequence_repeat = 0;
 8006cde:	79fa      	ldrb	r2, [r7, #7]
 8006ce0:	4907      	ldr	r1, [pc, #28]	; (8006d00 <LED_setSequence+0xa4>)
 8006ce2:	4613      	mov	r3, r2
 8006ce4:	005b      	lsls	r3, r3, #1
 8006ce6:	4413      	add	r3, r2
 8006ce8:	00db      	lsls	r3, r3, #3
 8006cea:	440b      	add	r3, r1
 8006cec:	3315      	adds	r3, #21
 8006cee:	2200      	movs	r2, #0
 8006cf0:	701a      	strb	r2, [r3, #0]
}
 8006cf2:	bf00      	nop
 8006cf4:	370c      	adds	r7, #12
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr
 8006cfe:	bf00      	nop
 8006d00:	2000032c 	.word	0x2000032c

08006d04 <getCurrentPatternInterval>:


static inline uint32_t getCurrentPatternInterval(uint8_t index)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	71fb      	strb	r3, [r7, #7]
	return leds[index].sequence->patterns[leds[index].current_pattern]->interval;
 8006d0e:	79fa      	ldrb	r2, [r7, #7]
 8006d10:	490c      	ldr	r1, [pc, #48]	; (8006d44 <getCurrentPatternInterval+0x40>)
 8006d12:	4613      	mov	r3, r2
 8006d14:	005b      	lsls	r3, r3, #1
 8006d16:	4413      	add	r3, r2
 8006d18:	00db      	lsls	r3, r3, #3
 8006d1a:	440b      	add	r3, r1
 8006d1c:	6819      	ldr	r1, [r3, #0]
 8006d1e:	79fa      	ldrb	r2, [r7, #7]
 8006d20:	4808      	ldr	r0, [pc, #32]	; (8006d44 <getCurrentPatternInterval+0x40>)
 8006d22:	4613      	mov	r3, r2
 8006d24:	005b      	lsls	r3, r3, #1
 8006d26:	4413      	add	r3, r2
 8006d28:	00db      	lsls	r3, r3, #3
 8006d2a:	4403      	add	r3, r0
 8006d2c:	3308      	adds	r3, #8
 8006d2e:	881b      	ldrh	r3, [r3, #0]
 8006d30:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006d34:	685b      	ldr	r3, [r3, #4]
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	370c      	adds	r7, #12
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr
 8006d42:	bf00      	nop
 8006d44:	2000032c 	.word	0x2000032c

08006d48 <getCurrentPatternValue>:

static inline uint16_t getCurrentPatternValue(uint8_t index)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	4603      	mov	r3, r0
 8006d50:	71fb      	strb	r3, [r7, #7]
	return leds[index].sequence->patterns[leds[index].current_pattern]->patternData->data[leds[index].pattern_position];
 8006d52:	79fa      	ldrb	r2, [r7, #7]
 8006d54:	4912      	ldr	r1, [pc, #72]	; (8006da0 <getCurrentPatternValue+0x58>)
 8006d56:	4613      	mov	r3, r2
 8006d58:	005b      	lsls	r3, r3, #1
 8006d5a:	4413      	add	r3, r2
 8006d5c:	00db      	lsls	r3, r3, #3
 8006d5e:	440b      	add	r3, r1
 8006d60:	6819      	ldr	r1, [r3, #0]
 8006d62:	79fa      	ldrb	r2, [r7, #7]
 8006d64:	480e      	ldr	r0, [pc, #56]	; (8006da0 <getCurrentPatternValue+0x58>)
 8006d66:	4613      	mov	r3, r2
 8006d68:	005b      	lsls	r3, r3, #1
 8006d6a:	4413      	add	r3, r2
 8006d6c:	00db      	lsls	r3, r3, #3
 8006d6e:	4403      	add	r3, r0
 8006d70:	3308      	adds	r3, #8
 8006d72:	881b      	ldrh	r3, [r3, #0]
 8006d74:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	6819      	ldr	r1, [r3, #0]
 8006d7c:	79fa      	ldrb	r2, [r7, #7]
 8006d7e:	4808      	ldr	r0, [pc, #32]	; (8006da0 <getCurrentPatternValue+0x58>)
 8006d80:	4613      	mov	r3, r2
 8006d82:	005b      	lsls	r3, r3, #1
 8006d84:	4413      	add	r3, r2
 8006d86:	00db      	lsls	r3, r3, #3
 8006d88:	4403      	add	r3, r0
 8006d8a:	3304      	adds	r3, #4
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	005b      	lsls	r3, r3, #1
 8006d90:	440b      	add	r3, r1
 8006d92:	881b      	ldrh	r3, [r3, #0]
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr
 8006da0:	2000032c 	.word	0x2000032c

08006da4 <getCurrentPatternLength>:

static inline uint16_t getCurrentPatternLength(uint8_t index)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	4603      	mov	r3, r0
 8006dac:	71fb      	strb	r3, [r7, #7]
	return leds[index].sequence->patterns[leds[index].current_pattern]->patternData->size;
 8006dae:	79fa      	ldrb	r2, [r7, #7]
 8006db0:	490c      	ldr	r1, [pc, #48]	; (8006de4 <getCurrentPatternLength+0x40>)
 8006db2:	4613      	mov	r3, r2
 8006db4:	005b      	lsls	r3, r3, #1
 8006db6:	4413      	add	r3, r2
 8006db8:	00db      	lsls	r3, r3, #3
 8006dba:	440b      	add	r3, r1
 8006dbc:	6819      	ldr	r1, [r3, #0]
 8006dbe:	79fa      	ldrb	r2, [r7, #7]
 8006dc0:	4808      	ldr	r0, [pc, #32]	; (8006de4 <getCurrentPatternLength+0x40>)
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	005b      	lsls	r3, r3, #1
 8006dc6:	4413      	add	r3, r2
 8006dc8:	00db      	lsls	r3, r3, #3
 8006dca:	4403      	add	r3, r0
 8006dcc:	3308      	adds	r3, #8
 8006dce:	881b      	ldrh	r3, [r3, #0]
 8006dd0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	889b      	ldrh	r3, [r3, #4]
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr
 8006de4:	2000032c 	.word	0x2000032c

08006de8 <getCurrentPatternStartingPosition>:

static inline uint16_t getCurrentPatternStartingPosition(uint8_t index)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	4603      	mov	r3, r0
 8006df0:	71fb      	strb	r3, [r7, #7]
	return leds[index].sequence->patterns[leds[index].current_pattern]->startPosition;
 8006df2:	79fa      	ldrb	r2, [r7, #7]
 8006df4:	490c      	ldr	r1, [pc, #48]	; (8006e28 <getCurrentPatternStartingPosition+0x40>)
 8006df6:	4613      	mov	r3, r2
 8006df8:	005b      	lsls	r3, r3, #1
 8006dfa:	4413      	add	r3, r2
 8006dfc:	00db      	lsls	r3, r3, #3
 8006dfe:	440b      	add	r3, r1
 8006e00:	6819      	ldr	r1, [r3, #0]
 8006e02:	79fa      	ldrb	r2, [r7, #7]
 8006e04:	4808      	ldr	r0, [pc, #32]	; (8006e28 <getCurrentPatternStartingPosition+0x40>)
 8006e06:	4613      	mov	r3, r2
 8006e08:	005b      	lsls	r3, r3, #1
 8006e0a:	4413      	add	r3, r2
 8006e0c:	00db      	lsls	r3, r3, #3
 8006e0e:	4403      	add	r3, r0
 8006e10:	3308      	adds	r3, #8
 8006e12:	881b      	ldrh	r3, [r3, #0]
 8006e14:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006e18:	899b      	ldrh	r3, [r3, #12]
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	370c      	adds	r7, #12
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr
 8006e26:	bf00      	nop
 8006e28:	2000032c 	.word	0x2000032c

08006e2c <getCurrentPatternDuration>:

static inline uint32_t getCurrentPatternDuration(uint8_t index)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	4603      	mov	r3, r0
 8006e34:	71fb      	strb	r3, [r7, #7]
	return leds[index].sequence->patterns[leds[index].current_pattern]->duration;
 8006e36:	79fa      	ldrb	r2, [r7, #7]
 8006e38:	490c      	ldr	r1, [pc, #48]	; (8006e6c <getCurrentPatternDuration+0x40>)
 8006e3a:	4613      	mov	r3, r2
 8006e3c:	005b      	lsls	r3, r3, #1
 8006e3e:	4413      	add	r3, r2
 8006e40:	00db      	lsls	r3, r3, #3
 8006e42:	440b      	add	r3, r1
 8006e44:	6819      	ldr	r1, [r3, #0]
 8006e46:	79fa      	ldrb	r2, [r7, #7]
 8006e48:	4808      	ldr	r0, [pc, #32]	; (8006e6c <getCurrentPatternDuration+0x40>)
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	005b      	lsls	r3, r3, #1
 8006e4e:	4413      	add	r3, r2
 8006e50:	00db      	lsls	r3, r3, #3
 8006e52:	4403      	add	r3, r0
 8006e54:	3308      	adds	r3, #8
 8006e56:	881b      	ldrh	r3, [r3, #0]
 8006e58:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006e5c:	689b      	ldr	r3, [r3, #8]
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	370c      	adds	r7, #12
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr
 8006e6a:	bf00      	nop
 8006e6c:	2000032c 	.word	0x2000032c

08006e70 <LED_startLedSequence>:

void LED_startLedSequence(uint8_t ledIndex)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b082      	sub	sp, #8
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	4603      	mov	r3, r0
 8006e78:	71fb      	strb	r3, [r7, #7]
	if(leds[ledIndex].sequence != NULL)
 8006e7a:	79fa      	ldrb	r2, [r7, #7]
 8006e7c:	492c      	ldr	r1, [pc, #176]	; (8006f30 <LED_startLedSequence+0xc0>)
 8006e7e:	4613      	mov	r3, r2
 8006e80:	005b      	lsls	r3, r3, #1
 8006e82:	4413      	add	r3, r2
 8006e84:	00db      	lsls	r3, r3, #3
 8006e86:	440b      	add	r3, r1
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d04b      	beq.n	8006f26 <LED_startLedSequence+0xb6>
	{
		leds[ledIndex].current_pattern = 0;
 8006e8e:	79fa      	ldrb	r2, [r7, #7]
 8006e90:	4927      	ldr	r1, [pc, #156]	; (8006f30 <LED_startLedSequence+0xc0>)
 8006e92:	4613      	mov	r3, r2
 8006e94:	005b      	lsls	r3, r3, #1
 8006e96:	4413      	add	r3, r2
 8006e98:	00db      	lsls	r3, r3, #3
 8006e9a:	440b      	add	r3, r1
 8006e9c:	3308      	adds	r3, #8
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	801a      	strh	r2, [r3, #0]
		leds[ledIndex].interval_count = 0;
 8006ea2:	79fa      	ldrb	r2, [r7, #7]
 8006ea4:	4922      	ldr	r1, [pc, #136]	; (8006f30 <LED_startLedSequence+0xc0>)
 8006ea6:	4613      	mov	r3, r2
 8006ea8:	005b      	lsls	r3, r3, #1
 8006eaa:	4413      	add	r3, r2
 8006eac:	00db      	lsls	r3, r3, #3
 8006eae:	440b      	add	r3, r1
 8006eb0:	330c      	adds	r3, #12
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	601a      	str	r2, [r3, #0]
		leds[ledIndex].pattern_duration_count = 0;
 8006eb6:	79fa      	ldrb	r2, [r7, #7]
 8006eb8:	491d      	ldr	r1, [pc, #116]	; (8006f30 <LED_startLedSequence+0xc0>)
 8006eba:	4613      	mov	r3, r2
 8006ebc:	005b      	lsls	r3, r3, #1
 8006ebe:	4413      	add	r3, r2
 8006ec0:	00db      	lsls	r3, r3, #3
 8006ec2:	440b      	add	r3, r1
 8006ec4:	3310      	adds	r3, #16
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	601a      	str	r2, [r3, #0]
		leds[ledIndex].pattern_position = getCurrentPatternStartingPosition(ledIndex);
 8006eca:	79fb      	ldrb	r3, [r7, #7]
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f7ff ff8b 	bl	8006de8 <getCurrentPatternStartingPosition>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	79fa      	ldrb	r2, [r7, #7]
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	4915      	ldr	r1, [pc, #84]	; (8006f30 <LED_startLedSequence+0xc0>)
 8006eda:	4613      	mov	r3, r2
 8006edc:	005b      	lsls	r3, r3, #1
 8006ede:	4413      	add	r3, r2
 8006ee0:	00db      	lsls	r3, r3, #3
 8006ee2:	440b      	add	r3, r1
 8006ee4:	3304      	adds	r3, #4
 8006ee6:	6018      	str	r0, [r3, #0]

		leds[ledIndex].sequence_on = 1;
 8006ee8:	79fa      	ldrb	r2, [r7, #7]
 8006eea:	4911      	ldr	r1, [pc, #68]	; (8006f30 <LED_startLedSequence+0xc0>)
 8006eec:	4613      	mov	r3, r2
 8006eee:	005b      	lsls	r3, r3, #1
 8006ef0:	4413      	add	r3, r2
 8006ef2:	00db      	lsls	r3, r3, #3
 8006ef4:	440b      	add	r3, r1
 8006ef6:	3314      	adds	r3, #20
 8006ef8:	2201      	movs	r2, #1
 8006efa:	701a      	strb	r2, [r3, #0]
		leds[ledIndex].sequence_repeat = 0;
 8006efc:	79fa      	ldrb	r2, [r7, #7]
 8006efe:	490c      	ldr	r1, [pc, #48]	; (8006f30 <LED_startLedSequence+0xc0>)
 8006f00:	4613      	mov	r3, r2
 8006f02:	005b      	lsls	r3, r3, #1
 8006f04:	4413      	add	r3, r2
 8006f06:	00db      	lsls	r3, r3, #3
 8006f08:	440b      	add	r3, r1
 8006f0a:	3315      	adds	r3, #21
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	701a      	strb	r2, [r3, #0]


		LED_changePWM_Duty(ledIndex, getCurrentPatternValue(ledIndex));
 8006f10:	79fb      	ldrb	r3, [r7, #7]
 8006f12:	4618      	mov	r0, r3
 8006f14:	f7ff ff18 	bl	8006d48 <getCurrentPatternValue>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	79fb      	ldrb	r3, [r7, #7]
 8006f1e:	4611      	mov	r1, r2
 8006f20:	4618      	mov	r0, r3
 8006f22:	f000 f941 	bl	80071a8 <LED_changePWM_Duty>
	}
}
 8006f26:	bf00      	nop
 8006f28:	3708      	adds	r7, #8
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	2000032c 	.word	0x2000032c

08006f34 <LED_stopLedSequence>:

void LED_stopLedSequence(uint8_t ledIndex)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b082      	sub	sp, #8
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	71fb      	strb	r3, [r7, #7]
	if(leds[ledIndex].sequence != NULL)
 8006f3e:	79fa      	ldrb	r2, [r7, #7]
 8006f40:	490d      	ldr	r1, [pc, #52]	; (8006f78 <LED_stopLedSequence+0x44>)
 8006f42:	4613      	mov	r3, r2
 8006f44:	005b      	lsls	r3, r3, #1
 8006f46:	4413      	add	r3, r2
 8006f48:	00db      	lsls	r3, r3, #3
 8006f4a:	440b      	add	r3, r1
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d009      	beq.n	8006f66 <LED_stopLedSequence+0x32>
	{
		leds[ledIndex].sequence_on = 0;
 8006f52:	79fa      	ldrb	r2, [r7, #7]
 8006f54:	4908      	ldr	r1, [pc, #32]	; (8006f78 <LED_stopLedSequence+0x44>)
 8006f56:	4613      	mov	r3, r2
 8006f58:	005b      	lsls	r3, r3, #1
 8006f5a:	4413      	add	r3, r2
 8006f5c:	00db      	lsls	r3, r3, #3
 8006f5e:	440b      	add	r3, r1
 8006f60:	3314      	adds	r3, #20
 8006f62:	2200      	movs	r2, #0
 8006f64:	701a      	strb	r2, [r3, #0]
	}

	LED_changePWM_Duty(ledIndex, 0);
 8006f66:	79fb      	ldrb	r3, [r7, #7]
 8006f68:	2100      	movs	r1, #0
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f000 f91c 	bl	80071a8 <LED_changePWM_Duty>
}
 8006f70:	bf00      	nop
 8006f72:	3708      	adds	r7, #8
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	2000032c 	.word	0x2000032c

08006f7c <LED_timer_interval_irq>:

void LED_timer_interval_irq()
{
 8006f7c:	b590      	push	{r4, r7, lr}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
	uint8_t i;

	// Loop on all Leds
	for(i = 0; i < MAX_LED_CHANNELS; i++)
 8006f82:	2300      	movs	r3, #0
 8006f84:	71fb      	strb	r3, [r7, #7]
 8006f86:	e104      	b.n	8007192 <LED_timer_interval_irq+0x216>
	{
		if(leds[i].sequence_on)
 8006f88:	79fa      	ldrb	r2, [r7, #7]
 8006f8a:	4986      	ldr	r1, [pc, #536]	; (80071a4 <LED_timer_interval_irq+0x228>)
 8006f8c:	4613      	mov	r3, r2
 8006f8e:	005b      	lsls	r3, r3, #1
 8006f90:	4413      	add	r3, r2
 8006f92:	00db      	lsls	r3, r3, #3
 8006f94:	440b      	add	r3, r1
 8006f96:	3314      	adds	r3, #20
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	f000 80f6 	beq.w	800718c <LED_timer_interval_irq+0x210>
		{
			// Counter between patterns
			leds[i].pattern_duration_count++;
 8006fa0:	79fa      	ldrb	r2, [r7, #7]
 8006fa2:	4980      	ldr	r1, [pc, #512]	; (80071a4 <LED_timer_interval_irq+0x228>)
 8006fa4:	4613      	mov	r3, r2
 8006fa6:	005b      	lsls	r3, r3, #1
 8006fa8:	4413      	add	r3, r2
 8006faa:	00db      	lsls	r3, r3, #3
 8006fac:	440b      	add	r3, r1
 8006fae:	3310      	adds	r3, #16
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	1c59      	adds	r1, r3, #1
 8006fb4:	487b      	ldr	r0, [pc, #492]	; (80071a4 <LED_timer_interval_irq+0x228>)
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	005b      	lsls	r3, r3, #1
 8006fba:	4413      	add	r3, r2
 8006fbc:	00db      	lsls	r3, r3, #3
 8006fbe:	4403      	add	r3, r0
 8006fc0:	3310      	adds	r3, #16
 8006fc2:	6019      	str	r1, [r3, #0]

			///////////////////////////////////////////
			if(getCurrentPatternDuration(i) == 0){
 8006fc4:	79fb      	ldrb	r3, [r7, #7]
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f7ff ff30 	bl	8006e2c <getCurrentPatternDuration>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	f000 80dc 	beq.w	800718c <LED_timer_interval_irq+0x210>
				//Do Nothing
			}
			else if(leds[i].pattern_duration_count >= getCurrentPatternDuration(i))
 8006fd4:	79fa      	ldrb	r2, [r7, #7]
 8006fd6:	4973      	ldr	r1, [pc, #460]	; (80071a4 <LED_timer_interval_irq+0x228>)
 8006fd8:	4613      	mov	r3, r2
 8006fda:	005b      	lsls	r3, r3, #1
 8006fdc:	4413      	add	r3, r2
 8006fde:	00db      	lsls	r3, r3, #3
 8006fe0:	440b      	add	r3, r1
 8006fe2:	3310      	adds	r3, #16
 8006fe4:	681c      	ldr	r4, [r3, #0]
 8006fe6:	79fb      	ldrb	r3, [r7, #7]
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f7ff ff1f 	bl	8006e2c <getCurrentPatternDuration>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	429c      	cmp	r4, r3
 8006ff2:	d368      	bcc.n	80070c6 <LED_timer_interval_irq+0x14a>
			{
				leds[i].pattern_duration_count = 0;
 8006ff4:	79fa      	ldrb	r2, [r7, #7]
 8006ff6:	496b      	ldr	r1, [pc, #428]	; (80071a4 <LED_timer_interval_irq+0x228>)
 8006ff8:	4613      	mov	r3, r2
 8006ffa:	005b      	lsls	r3, r3, #1
 8006ffc:	4413      	add	r3, r2
 8006ffe:	00db      	lsls	r3, r3, #3
 8007000:	440b      	add	r3, r1
 8007002:	3310      	adds	r3, #16
 8007004:	2200      	movs	r2, #0
 8007006:	601a      	str	r2, [r3, #0]

				// Load the next pattern
				leds[i].current_pattern++;
 8007008:	79fa      	ldrb	r2, [r7, #7]
 800700a:	4966      	ldr	r1, [pc, #408]	; (80071a4 <LED_timer_interval_irq+0x228>)
 800700c:	4613      	mov	r3, r2
 800700e:	005b      	lsls	r3, r3, #1
 8007010:	4413      	add	r3, r2
 8007012:	00db      	lsls	r3, r3, #3
 8007014:	440b      	add	r3, r1
 8007016:	3308      	adds	r3, #8
 8007018:	881b      	ldrh	r3, [r3, #0]
 800701a:	3301      	adds	r3, #1
 800701c:	b298      	uxth	r0, r3
 800701e:	4961      	ldr	r1, [pc, #388]	; (80071a4 <LED_timer_interval_irq+0x228>)
 8007020:	4613      	mov	r3, r2
 8007022:	005b      	lsls	r3, r3, #1
 8007024:	4413      	add	r3, r2
 8007026:	00db      	lsls	r3, r3, #3
 8007028:	440b      	add	r3, r1
 800702a:	3308      	adds	r3, #8
 800702c:	4602      	mov	r2, r0
 800702e:	801a      	strh	r2, [r3, #0]
				if(leds[i].current_pattern >= leds[i].sequence->patterns_count)
 8007030:	79fa      	ldrb	r2, [r7, #7]
 8007032:	495c      	ldr	r1, [pc, #368]	; (80071a4 <LED_timer_interval_irq+0x228>)
 8007034:	4613      	mov	r3, r2
 8007036:	005b      	lsls	r3, r3, #1
 8007038:	4413      	add	r3, r2
 800703a:	00db      	lsls	r3, r3, #3
 800703c:	440b      	add	r3, r1
 800703e:	3308      	adds	r3, #8
 8007040:	8819      	ldrh	r1, [r3, #0]
 8007042:	79fa      	ldrb	r2, [r7, #7]
 8007044:	4857      	ldr	r0, [pc, #348]	; (80071a4 <LED_timer_interval_irq+0x228>)
 8007046:	4613      	mov	r3, r2
 8007048:	005b      	lsls	r3, r3, #1
 800704a:	4413      	add	r3, r2
 800704c:	00db      	lsls	r3, r3, #3
 800704e:	4403      	add	r3, r0
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007056:	b29b      	uxth	r3, r3
 8007058:	4299      	cmp	r1, r3
 800705a:	d30f      	bcc.n	800707c <LED_timer_interval_irq+0x100>
				{
					leds[i].sequence_on = 0;
 800705c:	79fa      	ldrb	r2, [r7, #7]
 800705e:	4951      	ldr	r1, [pc, #324]	; (80071a4 <LED_timer_interval_irq+0x228>)
 8007060:	4613      	mov	r3, r2
 8007062:	005b      	lsls	r3, r3, #1
 8007064:	4413      	add	r3, r2
 8007066:	00db      	lsls	r3, r3, #3
 8007068:	440b      	add	r3, r1
 800706a:	3314      	adds	r3, #20
 800706c:	2200      	movs	r2, #0
 800706e:	701a      	strb	r2, [r3, #0]
					LED_changePWM_Duty(i, 0);
 8007070:	79fb      	ldrb	r3, [r7, #7]
 8007072:	2100      	movs	r1, #0
 8007074:	4618      	mov	r0, r3
 8007076:	f000 f897 	bl	80071a8 <LED_changePWM_Duty>
 800707a:	e087      	b.n	800718c <LED_timer_interval_irq+0x210>
				}
				else
				{
					leds[i].interval_count = 0;
 800707c:	79fa      	ldrb	r2, [r7, #7]
 800707e:	4949      	ldr	r1, [pc, #292]	; (80071a4 <LED_timer_interval_irq+0x228>)
 8007080:	4613      	mov	r3, r2
 8007082:	005b      	lsls	r3, r3, #1
 8007084:	4413      	add	r3, r2
 8007086:	00db      	lsls	r3, r3, #3
 8007088:	440b      	add	r3, r1
 800708a:	330c      	adds	r3, #12
 800708c:	2200      	movs	r2, #0
 800708e:	601a      	str	r2, [r3, #0]
					leds[i].pattern_position = getCurrentPatternStartingPosition(i);
 8007090:	79fb      	ldrb	r3, [r7, #7]
 8007092:	4618      	mov	r0, r3
 8007094:	f7ff fea8 	bl	8006de8 <getCurrentPatternStartingPosition>
 8007098:	4603      	mov	r3, r0
 800709a:	79fa      	ldrb	r2, [r7, #7]
 800709c:	4618      	mov	r0, r3
 800709e:	4941      	ldr	r1, [pc, #260]	; (80071a4 <LED_timer_interval_irq+0x228>)
 80070a0:	4613      	mov	r3, r2
 80070a2:	005b      	lsls	r3, r3, #1
 80070a4:	4413      	add	r3, r2
 80070a6:	00db      	lsls	r3, r3, #3
 80070a8:	440b      	add	r3, r1
 80070aa:	3304      	adds	r3, #4
 80070ac:	6018      	str	r0, [r3, #0]

					// Apply new value
					LED_changePWM_Duty(i, getCurrentPatternValue(i));
 80070ae:	79fb      	ldrb	r3, [r7, #7]
 80070b0:	4618      	mov	r0, r3
 80070b2:	f7ff fe49 	bl	8006d48 <getCurrentPatternValue>
 80070b6:	4603      	mov	r3, r0
 80070b8:	461a      	mov	r2, r3
 80070ba:	79fb      	ldrb	r3, [r7, #7]
 80070bc:	4611      	mov	r1, r2
 80070be:	4618      	mov	r0, r3
 80070c0:	f000 f872 	bl	80071a8 <LED_changePWM_Duty>
 80070c4:	e062      	b.n	800718c <LED_timer_interval_irq+0x210>
				}
			}
			else
			{
				// Position in pattern
				leds[i].interval_count++;
 80070c6:	79fa      	ldrb	r2, [r7, #7]
 80070c8:	4936      	ldr	r1, [pc, #216]	; (80071a4 <LED_timer_interval_irq+0x228>)
 80070ca:	4613      	mov	r3, r2
 80070cc:	005b      	lsls	r3, r3, #1
 80070ce:	4413      	add	r3, r2
 80070d0:	00db      	lsls	r3, r3, #3
 80070d2:	440b      	add	r3, r1
 80070d4:	330c      	adds	r3, #12
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	1c59      	adds	r1, r3, #1
 80070da:	4832      	ldr	r0, [pc, #200]	; (80071a4 <LED_timer_interval_irq+0x228>)
 80070dc:	4613      	mov	r3, r2
 80070de:	005b      	lsls	r3, r3, #1
 80070e0:	4413      	add	r3, r2
 80070e2:	00db      	lsls	r3, r3, #3
 80070e4:	4403      	add	r3, r0
 80070e6:	330c      	adds	r3, #12
 80070e8:	6019      	str	r1, [r3, #0]

				// Next pattern position
				if(leds[i].interval_count >= getCurrentPatternInterval(i))
 80070ea:	79fa      	ldrb	r2, [r7, #7]
 80070ec:	492d      	ldr	r1, [pc, #180]	; (80071a4 <LED_timer_interval_irq+0x228>)
 80070ee:	4613      	mov	r3, r2
 80070f0:	005b      	lsls	r3, r3, #1
 80070f2:	4413      	add	r3, r2
 80070f4:	00db      	lsls	r3, r3, #3
 80070f6:	440b      	add	r3, r1
 80070f8:	330c      	adds	r3, #12
 80070fa:	681c      	ldr	r4, [r3, #0]
 80070fc:	79fb      	ldrb	r3, [r7, #7]
 80070fe:	4618      	mov	r0, r3
 8007100:	f7ff fe00 	bl	8006d04 <getCurrentPatternInterval>
 8007104:	4603      	mov	r3, r0
 8007106:	429c      	cmp	r4, r3
 8007108:	d340      	bcc.n	800718c <LED_timer_interval_irq+0x210>
				{
					leds[i].interval_count = 0;
 800710a:	79fa      	ldrb	r2, [r7, #7]
 800710c:	4925      	ldr	r1, [pc, #148]	; (80071a4 <LED_timer_interval_irq+0x228>)
 800710e:	4613      	mov	r3, r2
 8007110:	005b      	lsls	r3, r3, #1
 8007112:	4413      	add	r3, r2
 8007114:	00db      	lsls	r3, r3, #3
 8007116:	440b      	add	r3, r1
 8007118:	330c      	adds	r3, #12
 800711a:	2200      	movs	r2, #0
 800711c:	601a      	str	r2, [r3, #0]

					leds[i].pattern_position++;
 800711e:	79fa      	ldrb	r2, [r7, #7]
 8007120:	4920      	ldr	r1, [pc, #128]	; (80071a4 <LED_timer_interval_irq+0x228>)
 8007122:	4613      	mov	r3, r2
 8007124:	005b      	lsls	r3, r3, #1
 8007126:	4413      	add	r3, r2
 8007128:	00db      	lsls	r3, r3, #3
 800712a:	440b      	add	r3, r1
 800712c:	3304      	adds	r3, #4
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	1c59      	adds	r1, r3, #1
 8007132:	481c      	ldr	r0, [pc, #112]	; (80071a4 <LED_timer_interval_irq+0x228>)
 8007134:	4613      	mov	r3, r2
 8007136:	005b      	lsls	r3, r3, #1
 8007138:	4413      	add	r3, r2
 800713a:	00db      	lsls	r3, r3, #3
 800713c:	4403      	add	r3, r0
 800713e:	3304      	adds	r3, #4
 8007140:	6019      	str	r1, [r3, #0]

					// Loop inside the pattern until it is completed
					if(leds[i].pattern_position >= getCurrentPatternLength(i))
 8007142:	79fa      	ldrb	r2, [r7, #7]
 8007144:	4917      	ldr	r1, [pc, #92]	; (80071a4 <LED_timer_interval_irq+0x228>)
 8007146:	4613      	mov	r3, r2
 8007148:	005b      	lsls	r3, r3, #1
 800714a:	4413      	add	r3, r2
 800714c:	00db      	lsls	r3, r3, #3
 800714e:	440b      	add	r3, r1
 8007150:	3304      	adds	r3, #4
 8007152:	681c      	ldr	r4, [r3, #0]
 8007154:	79fb      	ldrb	r3, [r7, #7]
 8007156:	4618      	mov	r0, r3
 8007158:	f7ff fe24 	bl	8006da4 <getCurrentPatternLength>
 800715c:	4603      	mov	r3, r0
 800715e:	429c      	cmp	r4, r3
 8007160:	d309      	bcc.n	8007176 <LED_timer_interval_irq+0x1fa>
					{
						leds[i].pattern_position = 0;
 8007162:	79fa      	ldrb	r2, [r7, #7]
 8007164:	490f      	ldr	r1, [pc, #60]	; (80071a4 <LED_timer_interval_irq+0x228>)
 8007166:	4613      	mov	r3, r2
 8007168:	005b      	lsls	r3, r3, #1
 800716a:	4413      	add	r3, r2
 800716c:	00db      	lsls	r3, r3, #3
 800716e:	440b      	add	r3, r1
 8007170:	3304      	adds	r3, #4
 8007172:	2200      	movs	r2, #0
 8007174:	601a      	str	r2, [r3, #0]
					}

					LED_changePWM_Duty(i, getCurrentPatternValue(i));
 8007176:	79fb      	ldrb	r3, [r7, #7]
 8007178:	4618      	mov	r0, r3
 800717a:	f7ff fde5 	bl	8006d48 <getCurrentPatternValue>
 800717e:	4603      	mov	r3, r0
 8007180:	461a      	mov	r2, r3
 8007182:	79fb      	ldrb	r3, [r7, #7]
 8007184:	4611      	mov	r1, r2
 8007186:	4618      	mov	r0, r3
 8007188:	f000 f80e 	bl	80071a8 <LED_changePWM_Duty>
	for(i = 0; i < MAX_LED_CHANNELS; i++)
 800718c:	79fb      	ldrb	r3, [r7, #7]
 800718e:	3301      	adds	r3, #1
 8007190:	71fb      	strb	r3, [r7, #7]
 8007192:	79fb      	ldrb	r3, [r7, #7]
 8007194:	2b07      	cmp	r3, #7
 8007196:	f67f aef7 	bls.w	8006f88 <LED_timer_interval_irq+0xc>
				}
			}
		}
	}
}
 800719a:	bf00      	nop
 800719c:	bf00      	nop
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd90      	pop	{r4, r7, pc}
 80071a4:	2000032c 	.word	0x2000032c

080071a8 <LED_changePWM_Duty>:



void LED_changePWM_Duty(uint8_t led, uint16_t duty)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	4603      	mov	r3, r0
 80071b0:	460a      	mov	r2, r1
 80071b2:	71fb      	strb	r3, [r7, #7]
 80071b4:	4613      	mov	r3, r2
 80071b6:	80bb      	strh	r3, [r7, #4]
	switch(led)
 80071b8:	79fb      	ldrb	r3, [r7, #7]
 80071ba:	2b07      	cmp	r3, #7
 80071bc:	d846      	bhi.n	800724c <LED_changePWM_Duty+0xa4>
 80071be:	a201      	add	r2, pc, #4	; (adr r2, 80071c4 <LED_changePWM_Duty+0x1c>)
 80071c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c4:	080071e5 	.word	0x080071e5
 80071c8:	080071f3 	.word	0x080071f3
 80071cc:	08007201 	.word	0x08007201
 80071d0:	0800720f 	.word	0x0800720f
 80071d4:	08007219 	.word	0x08007219
 80071d8:	08007223 	.word	0x08007223
 80071dc:	08007231 	.word	0x08007231
 80071e0:	0800723f 	.word	0x0800723f
	{
	case 0:
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, duty);
 80071e4:	4b1d      	ldr	r3, [pc, #116]	; (800725c <LED_changePWM_Duty+0xb4>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	3334      	adds	r3, #52	; 0x34
 80071ea:	330c      	adds	r3, #12
 80071ec:	88ba      	ldrh	r2, [r7, #4]
 80071ee:	601a      	str	r2, [r3, #0]
		break;
 80071f0:	e02d      	b.n	800724e <LED_changePWM_Duty+0xa6>
	case 1:
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, duty);
 80071f2:	4b1a      	ldr	r3, [pc, #104]	; (800725c <LED_changePWM_Duty+0xb4>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	3334      	adds	r3, #52	; 0x34
 80071f8:	3308      	adds	r3, #8
 80071fa:	88ba      	ldrh	r2, [r7, #4]
 80071fc:	601a      	str	r2, [r3, #0]
		break;
 80071fe:	e026      	b.n	800724e <LED_changePWM_Duty+0xa6>
	case 2:
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, duty);
 8007200:	4b16      	ldr	r3, [pc, #88]	; (800725c <LED_changePWM_Duty+0xb4>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	3334      	adds	r3, #52	; 0x34
 8007206:	3304      	adds	r3, #4
 8007208:	88ba      	ldrh	r2, [r7, #4]
 800720a:	601a      	str	r2, [r3, #0]
		break;
 800720c:	e01f      	b.n	800724e <LED_changePWM_Duty+0xa6>
	case 3:
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty);
 800720e:	4b13      	ldr	r3, [pc, #76]	; (800725c <LED_changePWM_Duty+0xb4>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	88ba      	ldrh	r2, [r7, #4]
 8007214:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8007216:	e01a      	b.n	800724e <LED_changePWM_Duty+0xa6>
	case 4:
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty);
 8007218:	4b11      	ldr	r3, [pc, #68]	; (8007260 <LED_changePWM_Duty+0xb8>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	88ba      	ldrh	r2, [r7, #4]
 800721e:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8007220:	e015      	b.n	800724e <LED_changePWM_Duty+0xa6>
	case 5:
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, duty);
 8007222:	4b0f      	ldr	r3, [pc, #60]	; (8007260 <LED_changePWM_Duty+0xb8>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	3334      	adds	r3, #52	; 0x34
 8007228:	3304      	adds	r3, #4
 800722a:	88ba      	ldrh	r2, [r7, #4]
 800722c:	601a      	str	r2, [r3, #0]
		break;
 800722e:	e00e      	b.n	800724e <LED_changePWM_Duty+0xa6>
	case 6:
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty);
 8007230:	4b0b      	ldr	r3, [pc, #44]	; (8007260 <LED_changePWM_Duty+0xb8>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	3334      	adds	r3, #52	; 0x34
 8007236:	3308      	adds	r3, #8
 8007238:	88ba      	ldrh	r2, [r7, #4]
 800723a:	601a      	str	r2, [r3, #0]
		break;
 800723c:	e007      	b.n	800724e <LED_changePWM_Duty+0xa6>
	case 7:
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, duty);
 800723e:	4b08      	ldr	r3, [pc, #32]	; (8007260 <LED_changePWM_Duty+0xb8>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	3334      	adds	r3, #52	; 0x34
 8007244:	330c      	adds	r3, #12
 8007246:	88ba      	ldrh	r2, [r7, #4]
 8007248:	601a      	str	r2, [r3, #0]
		break;
 800724a:	e000      	b.n	800724e <LED_changePWM_Duty+0xa6>
	default:
		break;
 800724c:	bf00      	nop
	}
}
 800724e:	bf00      	nop
 8007250:	370c      	adds	r7, #12
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	200004e0 	.word	0x200004e0
 8007260:	2000051c 	.word	0x2000051c

08007264 <tim6_IRQ>:
/* USER CODE BEGIN 0 */

uint8_t tim6_irq_flag = 0;

void tim6_IRQ()
{
 8007264:	b580      	push	{r7, lr}
 8007266:	af00      	add	r7, sp, #0
	// Called every millisecond
	LED_timer_interval_irq();
 8007268:	f7ff fe88 	bl	8006f7c <LED_timer_interval_irq>
}
 800726c:	bf00      	nop
 800726e:	bd80      	pop	{r7, pc}

08007270 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007274:	f7f9 f98e 	bl	8000594 <HAL_Init>

  /* USER CODE BEGIN Init */

  // Turn off the power output to the LEDs while configuring
  HAL_GPIO_WritePin(EN_15V_GPIO_Port, EN_15V_Pin, GPIO_PIN_RESET);
 8007278:	2200      	movs	r2, #0
 800727a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800727e:	480d      	ldr	r0, [pc, #52]	; (80072b4 <main+0x44>)
 8007280:	f7f9 fcf2 	bl	8000c68 <HAL_GPIO_WritePin>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007284:	f000 f818 	bl	80072b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007288:	f000 fad0 	bl	800782c <MX_GPIO_Init>
  MX_I2C1_Init();
 800728c:	f000 f89c 	bl	80073c8 <MX_I2C1_Init>
  MX_I2S3_Init();
 8007290:	f000 f8cc 	bl	800742c <MX_I2S3_Init>
  MX_SPI1_Init();
 8007294:	f000 f8fe 	bl	8007494 <MX_SPI1_Init>
  MX_TIM1_Init();
 8007298:	f000 f938 	bl	800750c <MX_TIM1_Init>
  MX_TIM2_Init();
 800729c:	f000 f9f8 	bl	8007690 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80072a0:	f001 ff08 	bl	80090b4 <MX_USB_DEVICE_Init>
  MX_TIM6_Init();
 80072a4:	f000 fa8c 	bl	80077c0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  UserCode_Init();
 80072a8:	f7ff fc68 	bl	8006b7c <UserCode_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  UserCode_While();
 80072ac:	f7ff fcb0 	bl	8006c10 <UserCode_While>
 80072b0:	e7fc      	b.n	80072ac <main+0x3c>
 80072b2:	bf00      	nop
 80072b4:	40020800 	.word	0x40020800

080072b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b098      	sub	sp, #96	; 0x60
 80072bc:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 80072be:	2300      	movs	r3, #0
 80072c0:	60bb      	str	r3, [r7, #8]
 80072c2:	4b3d      	ldr	r3, [pc, #244]	; (80073b8 <SystemClock_Config+0x100>)
 80072c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c6:	4a3c      	ldr	r2, [pc, #240]	; (80073b8 <SystemClock_Config+0x100>)
 80072c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072cc:	6413      	str	r3, [r2, #64]	; 0x40
 80072ce:	4b3a      	ldr	r3, [pc, #232]	; (80073b8 <SystemClock_Config+0x100>)
 80072d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072d6:	60bb      	str	r3, [r7, #8]
 80072d8:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80072da:	2300      	movs	r3, #0
 80072dc:	607b      	str	r3, [r7, #4]
 80072de:	4b37      	ldr	r3, [pc, #220]	; (80073bc <SystemClock_Config+0x104>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a36      	ldr	r2, [pc, #216]	; (80073bc <SystemClock_Config+0x104>)
 80072e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80072e8:	6013      	str	r3, [r2, #0]
 80072ea:	4b34      	ldr	r3, [pc, #208]	; (80073bc <SystemClock_Config+0x104>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072f2:	607b      	str	r3, [r7, #4]
 80072f4:	687b      	ldr	r3, [r7, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80072f6:	2301      	movs	r3, #1
 80072f8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80072fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80072fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007300:	2302      	movs	r3, #2
 8007302:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007304:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007308:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800730a:	2308      	movs	r3, #8
 800730c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 800730e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8007312:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007314:	2302      	movs	r3, #2
 8007316:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8007318:	2307      	movs	r3, #7
 800731a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800731c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007320:	4618      	mov	r0, r3
 8007322:	f7fb fb27 	bl	8002974 <HAL_RCC_OscConfig>
 8007326:	4603      	mov	r3, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d003      	beq.n	8007334 <SystemClock_Config+0x7c>
  {
    _Error_Handler(__FILE__, __LINE__);
 800732c:	21c7      	movs	r1, #199	; 0xc7
 800732e:	4824      	ldr	r0, [pc, #144]	; (80073c0 <SystemClock_Config+0x108>)
 8007330:	f000 fb78 	bl	8007a24 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007334:	230f      	movs	r3, #15
 8007336:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007338:	2302      	movs	r3, #2
 800733a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800733c:	2300      	movs	r3, #0
 800733e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007340:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007344:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007346:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800734a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800734c:	f107 031c 	add.w	r3, r7, #28
 8007350:	2105      	movs	r1, #5
 8007352:	4618      	mov	r0, r3
 8007354:	f7fb fd4c 	bl	8002df0 <HAL_RCC_ClockConfig>
 8007358:	4603      	mov	r3, r0
 800735a:	2b00      	cmp	r3, #0
 800735c:	d003      	beq.n	8007366 <SystemClock_Config+0xae>
  {
    _Error_Handler(__FILE__, __LINE__);
 800735e:	21d5      	movs	r1, #213	; 0xd5
 8007360:	4817      	ldr	r0, [pc, #92]	; (80073c0 <SystemClock_Config+0x108>)
 8007362:	f000 fb5f 	bl	8007a24 <_Error_Handler>
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8007366:	2301      	movs	r3, #1
 8007368:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800736a:	23c0      	movs	r3, #192	; 0xc0
 800736c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800736e:	2302      	movs	r3, #2
 8007370:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007372:	f107 030c 	add.w	r3, r7, #12
 8007376:	4618      	mov	r0, r3
 8007378:	f7fb ff42 	bl	8003200 <HAL_RCCEx_PeriphCLKConfig>
 800737c:	4603      	mov	r3, r0
 800737e:	2b00      	cmp	r3, #0
 8007380:	d003      	beq.n	800738a <SystemClock_Config+0xd2>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007382:	21dd      	movs	r1, #221	; 0xdd
 8007384:	480e      	ldr	r0, [pc, #56]	; (80073c0 <SystemClock_Config+0x108>)
 8007386:	f000 fb4d 	bl	8007a24 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800738a:	f7fb ff19 	bl	80031c0 <HAL_RCC_GetHCLKFreq>
 800738e:	4603      	mov	r3, r0
 8007390:	4a0c      	ldr	r2, [pc, #48]	; (80073c4 <SystemClock_Config+0x10c>)
 8007392:	fba2 2303 	umull	r2, r3, r2, r3
 8007396:	099b      	lsrs	r3, r3, #6
 8007398:	4618      	mov	r0, r3
 800739a:	f7f9 fa92 	bl	80008c2 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800739e:	2004      	movs	r0, #4
 80073a0:	f7f9 fa9c 	bl	80008dc <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80073a4:	2200      	movs	r2, #0
 80073a6:	2100      	movs	r1, #0
 80073a8:	f04f 30ff 	mov.w	r0, #4294967295
 80073ac:	f7f9 fa5f 	bl	800086e <HAL_NVIC_SetPriority>
}
 80073b0:	bf00      	nop
 80073b2:	3760      	adds	r7, #96	; 0x60
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	40023800 	.word	0x40023800
 80073bc:	40007000 	.word	0x40007000
 80073c0:	0800ad70 	.word	0x0800ad70
 80073c4:	10624dd3 	.word	0x10624dd3

080073c8 <MX_I2C1_Init>:

/* I2C1 init function */
static void MX_I2C1_Init(void)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80073cc:	4b13      	ldr	r3, [pc, #76]	; (800741c <MX_I2C1_Init+0x54>)
 80073ce:	4a14      	ldr	r2, [pc, #80]	; (8007420 <MX_I2C1_Init+0x58>)
 80073d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80073d2:	4b12      	ldr	r3, [pc, #72]	; (800741c <MX_I2C1_Init+0x54>)
 80073d4:	4a13      	ldr	r2, [pc, #76]	; (8007424 <MX_I2C1_Init+0x5c>)
 80073d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80073d8:	4b10      	ldr	r3, [pc, #64]	; (800741c <MX_I2C1_Init+0x54>)
 80073da:	2200      	movs	r2, #0
 80073dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80073de:	4b0f      	ldr	r3, [pc, #60]	; (800741c <MX_I2C1_Init+0x54>)
 80073e0:	2200      	movs	r2, #0
 80073e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80073e4:	4b0d      	ldr	r3, [pc, #52]	; (800741c <MX_I2C1_Init+0x54>)
 80073e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80073ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80073ec:	4b0b      	ldr	r3, [pc, #44]	; (800741c <MX_I2C1_Init+0x54>)
 80073ee:	2200      	movs	r2, #0
 80073f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80073f2:	4b0a      	ldr	r3, [pc, #40]	; (800741c <MX_I2C1_Init+0x54>)
 80073f4:	2200      	movs	r2, #0
 80073f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80073f8:	4b08      	ldr	r3, [pc, #32]	; (800741c <MX_I2C1_Init+0x54>)
 80073fa:	2200      	movs	r2, #0
 80073fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80073fe:	4b07      	ldr	r3, [pc, #28]	; (800741c <MX_I2C1_Init+0x54>)
 8007400:	2200      	movs	r2, #0
 8007402:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007404:	4805      	ldr	r0, [pc, #20]	; (800741c <MX_I2C1_Init+0x54>)
 8007406:	f7f9 fc49 	bl	8000c9c <HAL_I2C_Init>
 800740a:	4603      	mov	r3, r0
 800740c:	2b00      	cmp	r3, #0
 800740e:	d003      	beq.n	8007418 <MX_I2C1_Init+0x50>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007410:	21fb      	movs	r1, #251	; 0xfb
 8007412:	4805      	ldr	r0, [pc, #20]	; (8007428 <MX_I2C1_Init+0x60>)
 8007414:	f000 fb06 	bl	8007a24 <_Error_Handler>
  }

}
 8007418:	bf00      	nop
 800741a:	bd80      	pop	{r7, pc}
 800741c:	200003ec 	.word	0x200003ec
 8007420:	40005400 	.word	0x40005400
 8007424:	000186a0 	.word	0x000186a0
 8007428:	0800ad70 	.word	0x0800ad70

0800742c <MX_I2S3_Init>:

/* I2S3 init function */
static void MX_I2S3_Init(void)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	af00      	add	r7, sp, #0

  hi2s3.Instance = SPI3;
 8007430:	4b14      	ldr	r3, [pc, #80]	; (8007484 <MX_I2S3_Init+0x58>)
 8007432:	4a15      	ldr	r2, [pc, #84]	; (8007488 <MX_I2S3_Init+0x5c>)
 8007434:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8007436:	4b13      	ldr	r3, [pc, #76]	; (8007484 <MX_I2S3_Init+0x58>)
 8007438:	f44f 7200 	mov.w	r2, #512	; 0x200
 800743c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800743e:	4b11      	ldr	r3, [pc, #68]	; (8007484 <MX_I2S3_Init+0x58>)
 8007440:	2200      	movs	r2, #0
 8007442:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8007444:	4b0f      	ldr	r3, [pc, #60]	; (8007484 <MX_I2S3_Init+0x58>)
 8007446:	2200      	movs	r2, #0
 8007448:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800744a:	4b0e      	ldr	r3, [pc, #56]	; (8007484 <MX_I2S3_Init+0x58>)
 800744c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007450:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8007452:	4b0c      	ldr	r3, [pc, #48]	; (8007484 <MX_I2S3_Init+0x58>)
 8007454:	4a0d      	ldr	r2, [pc, #52]	; (800748c <MX_I2S3_Init+0x60>)
 8007456:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8007458:	4b0a      	ldr	r3, [pc, #40]	; (8007484 <MX_I2S3_Init+0x58>)
 800745a:	2200      	movs	r2, #0
 800745c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800745e:	4b09      	ldr	r3, [pc, #36]	; (8007484 <MX_I2S3_Init+0x58>)
 8007460:	2200      	movs	r2, #0
 8007462:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8007464:	4b07      	ldr	r3, [pc, #28]	; (8007484 <MX_I2S3_Init+0x58>)
 8007466:	2200      	movs	r2, #0
 8007468:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800746a:	4806      	ldr	r0, [pc, #24]	; (8007484 <MX_I2S3_Init+0x58>)
 800746c:	f7f9 fcf8 	bl	8000e60 <HAL_I2S_Init>
 8007470:	4603      	mov	r3, r0
 8007472:	2b00      	cmp	r3, #0
 8007474:	d004      	beq.n	8007480 <MX_I2S3_Init+0x54>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007476:	f240 110f 	movw	r1, #271	; 0x10f
 800747a:	4805      	ldr	r0, [pc, #20]	; (8007490 <MX_I2S3_Init+0x64>)
 800747c:	f000 fad2 	bl	8007a24 <_Error_Handler>
  }

}
 8007480:	bf00      	nop
 8007482:	bd80      	pop	{r7, pc}
 8007484:	20000440 	.word	0x20000440
 8007488:	40003c00 	.word	0x40003c00
 800748c:	00017700 	.word	0x00017700
 8007490:	0800ad70 	.word	0x0800ad70

08007494 <MX_SPI1_Init>:

/* SPI1 init function */
static void MX_SPI1_Init(void)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	af00      	add	r7, sp, #0

  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8007498:	4b19      	ldr	r3, [pc, #100]	; (8007500 <MX_SPI1_Init+0x6c>)
 800749a:	4a1a      	ldr	r2, [pc, #104]	; (8007504 <MX_SPI1_Init+0x70>)
 800749c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800749e:	4b18      	ldr	r3, [pc, #96]	; (8007500 <MX_SPI1_Init+0x6c>)
 80074a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80074a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80074a6:	4b16      	ldr	r3, [pc, #88]	; (8007500 <MX_SPI1_Init+0x6c>)
 80074a8:	2200      	movs	r2, #0
 80074aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80074ac:	4b14      	ldr	r3, [pc, #80]	; (8007500 <MX_SPI1_Init+0x6c>)
 80074ae:	2200      	movs	r2, #0
 80074b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80074b2:	4b13      	ldr	r3, [pc, #76]	; (8007500 <MX_SPI1_Init+0x6c>)
 80074b4:	2200      	movs	r2, #0
 80074b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80074b8:	4b11      	ldr	r3, [pc, #68]	; (8007500 <MX_SPI1_Init+0x6c>)
 80074ba:	2200      	movs	r2, #0
 80074bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80074be:	4b10      	ldr	r3, [pc, #64]	; (8007500 <MX_SPI1_Init+0x6c>)
 80074c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80074c6:	4b0e      	ldr	r3, [pc, #56]	; (8007500 <MX_SPI1_Init+0x6c>)
 80074c8:	2200      	movs	r2, #0
 80074ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80074cc:	4b0c      	ldr	r3, [pc, #48]	; (8007500 <MX_SPI1_Init+0x6c>)
 80074ce:	2200      	movs	r2, #0
 80074d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80074d2:	4b0b      	ldr	r3, [pc, #44]	; (8007500 <MX_SPI1_Init+0x6c>)
 80074d4:	2200      	movs	r2, #0
 80074d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80074d8:	4b09      	ldr	r3, [pc, #36]	; (8007500 <MX_SPI1_Init+0x6c>)
 80074da:	2200      	movs	r2, #0
 80074dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80074de:	4b08      	ldr	r3, [pc, #32]	; (8007500 <MX_SPI1_Init+0x6c>)
 80074e0:	220a      	movs	r2, #10
 80074e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80074e4:	4806      	ldr	r0, [pc, #24]	; (8007500 <MX_SPI1_Init+0x6c>)
 80074e6:	f7fb ffcb 	bl	8003480 <HAL_SPI_Init>
 80074ea:	4603      	mov	r3, r0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d004      	beq.n	80074fa <MX_SPI1_Init+0x66>
  {
    _Error_Handler(__FILE__, __LINE__);
 80074f0:	f240 1127 	movw	r1, #295	; 0x127
 80074f4:	4804      	ldr	r0, [pc, #16]	; (8007508 <MX_SPI1_Init+0x74>)
 80074f6:	f000 fa95 	bl	8007a24 <_Error_Handler>
  }

}
 80074fa:	bf00      	nop
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	20000488 	.word	0x20000488
 8007504:	40013000 	.word	0x40013000
 8007508:	0800ad70 	.word	0x0800ad70

0800750c <MX_TIM1_Init>:

/* TIM1 init function */
static void MX_TIM1_Init(void)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b094      	sub	sp, #80	; 0x50
 8007510:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

  htim1.Instance = TIM1;
 8007512:	4b5c      	ldr	r3, [pc, #368]	; (8007684 <MX_TIM1_Init+0x178>)
 8007514:	4a5c      	ldr	r2, [pc, #368]	; (8007688 <MX_TIM1_Init+0x17c>)
 8007516:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8007518:	4b5a      	ldr	r3, [pc, #360]	; (8007684 <MX_TIM1_Init+0x178>)
 800751a:	2200      	movs	r2, #0
 800751c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800751e:	4b59      	ldr	r3, [pc, #356]	; (8007684 <MX_TIM1_Init+0x178>)
 8007520:	2200      	movs	r2, #0
 8007522:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8007524:	4b57      	ldr	r3, [pc, #348]	; (8007684 <MX_TIM1_Init+0x178>)
 8007526:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800752a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800752c:	4b55      	ldr	r3, [pc, #340]	; (8007684 <MX_TIM1_Init+0x178>)
 800752e:	2200      	movs	r2, #0
 8007530:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007532:	4b54      	ldr	r3, [pc, #336]	; (8007684 <MX_TIM1_Init+0x178>)
 8007534:	2200      	movs	r2, #0
 8007536:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8007538:	4852      	ldr	r0, [pc, #328]	; (8007684 <MX_TIM1_Init+0x178>)
 800753a:	f7fc f805 	bl	8003548 <HAL_TIM_Base_Init>
 800753e:	4603      	mov	r3, r0
 8007540:	2b00      	cmp	r3, #0
 8007542:	d004      	beq.n	800754e <MX_TIM1_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007544:	f240 113d 	movw	r1, #317	; 0x13d
 8007548:	4850      	ldr	r0, [pc, #320]	; (800768c <MX_TIM1_Init+0x180>)
 800754a:	f000 fa6b 	bl	8007a24 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800754e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007552:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8007554:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007558:	4619      	mov	r1, r3
 800755a:	484a      	ldr	r0, [pc, #296]	; (8007684 <MX_TIM1_Init+0x178>)
 800755c:	f7fc fa82 	bl	8003a64 <HAL_TIM_ConfigClockSource>
 8007560:	4603      	mov	r3, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d004      	beq.n	8007570 <MX_TIM1_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007566:	f240 1143 	movw	r1, #323	; 0x143
 800756a:	4848      	ldr	r0, [pc, #288]	; (800768c <MX_TIM1_Init+0x180>)
 800756c:	f000 fa5a 	bl	8007a24 <_Error_Handler>
  }

  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8007570:	4844      	ldr	r0, [pc, #272]	; (8007684 <MX_TIM1_Init+0x178>)
 8007572:	f7fc f84a 	bl	800360a <HAL_TIM_PWM_Init>
 8007576:	4603      	mov	r3, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	d004      	beq.n	8007586 <MX_TIM1_Init+0x7a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800757c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007580:	4842      	ldr	r0, [pc, #264]	; (800768c <MX_TIM1_Init+0x180>)
 8007582:	f000 fa4f 	bl	8007a24 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007586:	2300      	movs	r3, #0
 8007588:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800758a:	2300      	movs	r3, #0
 800758c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800758e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007592:	4619      	mov	r1, r3
 8007594:	483b      	ldr	r0, [pc, #236]	; (8007684 <MX_TIM1_Init+0x178>)
 8007596:	f7fc febe 	bl	8004316 <HAL_TIMEx_MasterConfigSynchronization>
 800759a:	4603      	mov	r3, r0
 800759c:	2b00      	cmp	r3, #0
 800759e:	d004      	beq.n	80075aa <MX_TIM1_Init+0x9e>
  {
    _Error_Handler(__FILE__, __LINE__);
 80075a0:	f240 114f 	movw	r1, #335	; 0x14f
 80075a4:	4839      	ldr	r0, [pc, #228]	; (800768c <MX_TIM1_Init+0x180>)
 80075a6:	f000 fa3d 	bl	8007a24 <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80075aa:	2360      	movs	r3, #96	; 0x60
 80075ac:	61fb      	str	r3, [r7, #28]
  sConfigOC.Pulse = 0;
 80075ae:	2300      	movs	r3, #0
 80075b0:	623b      	str	r3, [r7, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80075b2:	2300      	movs	r3, #0
 80075b4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80075b6:	2300      	movs	r3, #0
 80075b8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80075ba:	2300      	movs	r3, #0
 80075bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80075be:	2300      	movs	r3, #0
 80075c0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80075c2:	2300      	movs	r3, #0
 80075c4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80075c6:	f107 031c 	add.w	r3, r7, #28
 80075ca:	2200      	movs	r2, #0
 80075cc:	4619      	mov	r1, r3
 80075ce:	482d      	ldr	r0, [pc, #180]	; (8007684 <MX_TIM1_Init+0x178>)
 80075d0:	f7fc f982 	bl	80038d8 <HAL_TIM_PWM_ConfigChannel>
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d004      	beq.n	80075e4 <MX_TIM1_Init+0xd8>
  {
    _Error_Handler(__FILE__, __LINE__);
 80075da:	f240 115b 	movw	r1, #347	; 0x15b
 80075de:	482b      	ldr	r0, [pc, #172]	; (800768c <MX_TIM1_Init+0x180>)
 80075e0:	f000 fa20 	bl	8007a24 <_Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80075e4:	f107 031c 	add.w	r3, r7, #28
 80075e8:	2204      	movs	r2, #4
 80075ea:	4619      	mov	r1, r3
 80075ec:	4825      	ldr	r0, [pc, #148]	; (8007684 <MX_TIM1_Init+0x178>)
 80075ee:	f7fc f973 	bl	80038d8 <HAL_TIM_PWM_ConfigChannel>
 80075f2:	4603      	mov	r3, r0
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d004      	beq.n	8007602 <MX_TIM1_Init+0xf6>
  {
    _Error_Handler(__FILE__, __LINE__);
 80075f8:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80075fc:	4823      	ldr	r0, [pc, #140]	; (800768c <MX_TIM1_Init+0x180>)
 80075fe:	f000 fa11 	bl	8007a24 <_Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8007602:	f107 031c 	add.w	r3, r7, #28
 8007606:	2208      	movs	r2, #8
 8007608:	4619      	mov	r1, r3
 800760a:	481e      	ldr	r0, [pc, #120]	; (8007684 <MX_TIM1_Init+0x178>)
 800760c:	f7fc f964 	bl	80038d8 <HAL_TIM_PWM_ConfigChannel>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d004      	beq.n	8007620 <MX_TIM1_Init+0x114>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007616:	f240 1165 	movw	r1, #357	; 0x165
 800761a:	481c      	ldr	r0, [pc, #112]	; (800768c <MX_TIM1_Init+0x180>)
 800761c:	f000 fa02 	bl	8007a24 <_Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8007620:	f107 031c 	add.w	r3, r7, #28
 8007624:	220c      	movs	r2, #12
 8007626:	4619      	mov	r1, r3
 8007628:	4816      	ldr	r0, [pc, #88]	; (8007684 <MX_TIM1_Init+0x178>)
 800762a:	f7fc f955 	bl	80038d8 <HAL_TIM_PWM_ConfigChannel>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d004      	beq.n	800763e <MX_TIM1_Init+0x132>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007634:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 8007638:	4814      	ldr	r0, [pc, #80]	; (800768c <MX_TIM1_Init+0x180>)
 800763a:	f000 f9f3 	bl	8007a24 <_Error_Handler>
  }

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800763e:	2300      	movs	r3, #0
 8007640:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8007642:	2300      	movs	r3, #0
 8007644:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8007646:	2300      	movs	r3, #0
 8007648:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800764a:	2300      	movs	r3, #0
 800764c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800764e:	2300      	movs	r3, #0
 8007650:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8007652:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007656:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8007658:	2300      	movs	r3, #0
 800765a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800765c:	463b      	mov	r3, r7
 800765e:	4619      	mov	r1, r3
 8007660:	4808      	ldr	r0, [pc, #32]	; (8007684 <MX_TIM1_Init+0x178>)
 8007662:	f7fc fe9d 	bl	80043a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8007666:	4603      	mov	r3, r0
 8007668:	2b00      	cmp	r3, #0
 800766a:	d004      	beq.n	8007676 <MX_TIM1_Init+0x16a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800766c:	f44f 71bb 	mov.w	r1, #374	; 0x176
 8007670:	4806      	ldr	r0, [pc, #24]	; (800768c <MX_TIM1_Init+0x180>)
 8007672:	f000 f9d7 	bl	8007a24 <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim1);
 8007676:	4803      	ldr	r0, [pc, #12]	; (8007684 <MX_TIM1_Init+0x178>)
 8007678:	f000 fd62 	bl	8008140 <HAL_TIM_MspPostInit>

}
 800767c:	bf00      	nop
 800767e:	3750      	adds	r7, #80	; 0x50
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}
 8007684:	200004e0 	.word	0x200004e0
 8007688:	40010000 	.word	0x40010000
 800768c:	0800ad70 	.word	0x0800ad70

08007690 <MX_TIM2_Init>:
/* TIM2 init function */
static void MX_TIM2_Init(void)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b08e      	sub	sp, #56	; 0x38
 8007694:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim2.Instance = TIM2;
 8007696:	4b48      	ldr	r3, [pc, #288]	; (80077b8 <MX_TIM2_Init+0x128>)
 8007698:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800769c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800769e:	4b46      	ldr	r3, [pc, #280]	; (80077b8 <MX_TIM2_Init+0x128>)
 80076a0:	2200      	movs	r2, #0
 80076a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80076a4:	4b44      	ldr	r3, [pc, #272]	; (80077b8 <MX_TIM2_Init+0x128>)
 80076a6:	2200      	movs	r2, #0
 80076a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80076aa:	4b43      	ldr	r3, [pc, #268]	; (80077b8 <MX_TIM2_Init+0x128>)
 80076ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80076b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80076b2:	4b41      	ldr	r3, [pc, #260]	; (80077b8 <MX_TIM2_Init+0x128>)
 80076b4:	2200      	movs	r2, #0
 80076b6:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80076b8:	483f      	ldr	r0, [pc, #252]	; (80077b8 <MX_TIM2_Init+0x128>)
 80076ba:	f7fb ff45 	bl	8003548 <HAL_TIM_Base_Init>
 80076be:	4603      	mov	r3, r0
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d004      	beq.n	80076ce <MX_TIM2_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 80076c4:	f240 118b 	movw	r1, #395	; 0x18b
 80076c8:	483c      	ldr	r0, [pc, #240]	; (80077bc <MX_TIM2_Init+0x12c>)
 80076ca:	f000 f9ab 	bl	8007a24 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80076ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80076d2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80076d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80076d8:	4619      	mov	r1, r3
 80076da:	4837      	ldr	r0, [pc, #220]	; (80077b8 <MX_TIM2_Init+0x128>)
 80076dc:	f7fc f9c2 	bl	8003a64 <HAL_TIM_ConfigClockSource>
 80076e0:	4603      	mov	r3, r0
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d004      	beq.n	80076f0 <MX_TIM2_Init+0x60>
  {
    _Error_Handler(__FILE__, __LINE__);
 80076e6:	f240 1191 	movw	r1, #401	; 0x191
 80076ea:	4834      	ldr	r0, [pc, #208]	; (80077bc <MX_TIM2_Init+0x12c>)
 80076ec:	f000 f99a 	bl	8007a24 <_Error_Handler>
  }

  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80076f0:	4831      	ldr	r0, [pc, #196]	; (80077b8 <MX_TIM2_Init+0x128>)
 80076f2:	f7fb ff8a 	bl	800360a <HAL_TIM_PWM_Init>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d004      	beq.n	8007706 <MX_TIM2_Init+0x76>
  {
    _Error_Handler(__FILE__, __LINE__);
 80076fc:	f44f 71cb 	mov.w	r1, #406	; 0x196
 8007700:	482e      	ldr	r0, [pc, #184]	; (80077bc <MX_TIM2_Init+0x12c>)
 8007702:	f000 f98f 	bl	8007a24 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007706:	2300      	movs	r3, #0
 8007708:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800770a:	2300      	movs	r3, #0
 800770c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800770e:	f107 0320 	add.w	r3, r7, #32
 8007712:	4619      	mov	r1, r3
 8007714:	4828      	ldr	r0, [pc, #160]	; (80077b8 <MX_TIM2_Init+0x128>)
 8007716:	f7fc fdfe 	bl	8004316 <HAL_TIMEx_MasterConfigSynchronization>
 800771a:	4603      	mov	r3, r0
 800771c:	2b00      	cmp	r3, #0
 800771e:	d004      	beq.n	800772a <MX_TIM2_Init+0x9a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007720:	f240 119d 	movw	r1, #413	; 0x19d
 8007724:	4825      	ldr	r0, [pc, #148]	; (80077bc <MX_TIM2_Init+0x12c>)
 8007726:	f000 f97d 	bl	8007a24 <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800772a:	2360      	movs	r3, #96	; 0x60
 800772c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800772e:	2300      	movs	r3, #0
 8007730:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007732:	2300      	movs	r3, #0
 8007734:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007736:	2300      	movs	r3, #0
 8007738:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800773a:	1d3b      	adds	r3, r7, #4
 800773c:	2200      	movs	r2, #0
 800773e:	4619      	mov	r1, r3
 8007740:	481d      	ldr	r0, [pc, #116]	; (80077b8 <MX_TIM2_Init+0x128>)
 8007742:	f7fc f8c9 	bl	80038d8 <HAL_TIM_PWM_ConfigChannel>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d004      	beq.n	8007756 <MX_TIM2_Init+0xc6>
  {
    _Error_Handler(__FILE__, __LINE__);
 800774c:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 8007750:	481a      	ldr	r0, [pc, #104]	; (80077bc <MX_TIM2_Init+0x12c>)
 8007752:	f000 f967 	bl	8007a24 <_Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007756:	1d3b      	adds	r3, r7, #4
 8007758:	2204      	movs	r2, #4
 800775a:	4619      	mov	r1, r3
 800775c:	4816      	ldr	r0, [pc, #88]	; (80077b8 <MX_TIM2_Init+0x128>)
 800775e:	f7fc f8bb 	bl	80038d8 <HAL_TIM_PWM_ConfigChannel>
 8007762:	4603      	mov	r3, r0
 8007764:	2b00      	cmp	r3, #0
 8007766:	d004      	beq.n	8007772 <MX_TIM2_Init+0xe2>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007768:	f240 11ab 	movw	r1, #427	; 0x1ab
 800776c:	4813      	ldr	r0, [pc, #76]	; (80077bc <MX_TIM2_Init+0x12c>)
 800776e:	f000 f959 	bl	8007a24 <_Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8007772:	1d3b      	adds	r3, r7, #4
 8007774:	2208      	movs	r2, #8
 8007776:	4619      	mov	r1, r3
 8007778:	480f      	ldr	r0, [pc, #60]	; (80077b8 <MX_TIM2_Init+0x128>)
 800777a:	f7fc f8ad 	bl	80038d8 <HAL_TIM_PWM_ConfigChannel>
 800777e:	4603      	mov	r3, r0
 8007780:	2b00      	cmp	r3, #0
 8007782:	d004      	beq.n	800778e <MX_TIM2_Init+0xfe>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007784:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8007788:	480c      	ldr	r0, [pc, #48]	; (80077bc <MX_TIM2_Init+0x12c>)
 800778a:	f000 f94b 	bl	8007a24 <_Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800778e:	1d3b      	adds	r3, r7, #4
 8007790:	220c      	movs	r2, #12
 8007792:	4619      	mov	r1, r3
 8007794:	4808      	ldr	r0, [pc, #32]	; (80077b8 <MX_TIM2_Init+0x128>)
 8007796:	f7fc f89f 	bl	80038d8 <HAL_TIM_PWM_ConfigChannel>
 800779a:	4603      	mov	r3, r0
 800779c:	2b00      	cmp	r3, #0
 800779e:	d004      	beq.n	80077aa <MX_TIM2_Init+0x11a>
  {
    _Error_Handler(__FILE__, __LINE__);
 80077a0:	f240 11b5 	movw	r1, #437	; 0x1b5
 80077a4:	4805      	ldr	r0, [pc, #20]	; (80077bc <MX_TIM2_Init+0x12c>)
 80077a6:	f000 f93d 	bl	8007a24 <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim2);
 80077aa:	4803      	ldr	r0, [pc, #12]	; (80077b8 <MX_TIM2_Init+0x128>)
 80077ac:	f000 fcc8 	bl	8008140 <HAL_TIM_MspPostInit>

}
 80077b0:	bf00      	nop
 80077b2:	3738      	adds	r7, #56	; 0x38
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}
 80077b8:	2000051c 	.word	0x2000051c
 80077bc:	0800ad70 	.word	0x0800ad70

080077c0 <MX_TIM6_Init>:


/* TIM6 init function */
static void MX_TIM6_Init(void)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0

  TIM_MasterConfigTypeDef sMasterConfig;

  htim6.Instance = TIM6;
 80077c6:	4b16      	ldr	r3, [pc, #88]	; (8007820 <MX_TIM6_Init+0x60>)
 80077c8:	4a16      	ldr	r2, [pc, #88]	; (8007824 <MX_TIM6_Init+0x64>)
 80077ca:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1;
 80077cc:	4b14      	ldr	r3, [pc, #80]	; (8007820 <MX_TIM6_Init+0x60>)
 80077ce:	2201      	movs	r2, #1
 80077d0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80077d2:	4b13      	ldr	r3, [pc, #76]	; (8007820 <MX_TIM6_Init+0x60>)
 80077d4:	2200      	movs	r2, #0
 80077d6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 42000;
 80077d8:	4b11      	ldr	r3, [pc, #68]	; (8007820 <MX_TIM6_Init+0x60>)
 80077da:	f24a 4210 	movw	r2, #42000	; 0xa410
 80077de:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80077e0:	480f      	ldr	r0, [pc, #60]	; (8007820 <MX_TIM6_Init+0x60>)
 80077e2:	f7fb feb1 	bl	8003548 <HAL_TIM_Base_Init>
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d004      	beq.n	80077f6 <MX_TIM6_Init+0x36>
  {
    _Error_Handler(__FILE__, __LINE__);
 80077ec:	f240 11c9 	movw	r1, #457	; 0x1c9
 80077f0:	480d      	ldr	r0, [pc, #52]	; (8007828 <MX_TIM6_Init+0x68>)
 80077f2:	f000 f917 	bl	8007a24 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80077f6:	2300      	movs	r3, #0
 80077f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80077fa:	2300      	movs	r3, #0
 80077fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80077fe:	463b      	mov	r3, r7
 8007800:	4619      	mov	r1, r3
 8007802:	4807      	ldr	r0, [pc, #28]	; (8007820 <MX_TIM6_Init+0x60>)
 8007804:	f7fc fd87 	bl	8004316 <HAL_TIMEx_MasterConfigSynchronization>
 8007808:	4603      	mov	r3, r0
 800780a:	2b00      	cmp	r3, #0
 800780c:	d004      	beq.n	8007818 <MX_TIM6_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 800780e:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8007812:	4805      	ldr	r0, [pc, #20]	; (8007828 <MX_TIM6_Init+0x68>)
 8007814:	f000 f906 	bl	8007a24 <_Error_Handler>
  }

}
 8007818:	bf00      	nop
 800781a:	3708      	adds	r7, #8
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}
 8007820:	20000558 	.word	0x20000558
 8007824:	40001000 	.word	0x40001000
 8007828:	0800ad70 	.word	0x0800ad70

0800782c <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
static void MX_GPIO_Init(void)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b08c      	sub	sp, #48	; 0x30
 8007830:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007832:	2300      	movs	r3, #0
 8007834:	61bb      	str	r3, [r7, #24]
 8007836:	4b74      	ldr	r3, [pc, #464]	; (8007a08 <MX_GPIO_Init+0x1dc>)
 8007838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800783a:	4a73      	ldr	r2, [pc, #460]	; (8007a08 <MX_GPIO_Init+0x1dc>)
 800783c:	f043 0310 	orr.w	r3, r3, #16
 8007840:	6313      	str	r3, [r2, #48]	; 0x30
 8007842:	4b71      	ldr	r3, [pc, #452]	; (8007a08 <MX_GPIO_Init+0x1dc>)
 8007844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007846:	f003 0310 	and.w	r3, r3, #16
 800784a:	61bb      	str	r3, [r7, #24]
 800784c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800784e:	2300      	movs	r3, #0
 8007850:	617b      	str	r3, [r7, #20]
 8007852:	4b6d      	ldr	r3, [pc, #436]	; (8007a08 <MX_GPIO_Init+0x1dc>)
 8007854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007856:	4a6c      	ldr	r2, [pc, #432]	; (8007a08 <MX_GPIO_Init+0x1dc>)
 8007858:	f043 0304 	orr.w	r3, r3, #4
 800785c:	6313      	str	r3, [r2, #48]	; 0x30
 800785e:	4b6a      	ldr	r3, [pc, #424]	; (8007a08 <MX_GPIO_Init+0x1dc>)
 8007860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007862:	f003 0304 	and.w	r3, r3, #4
 8007866:	617b      	str	r3, [r7, #20]
 8007868:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800786a:	2300      	movs	r3, #0
 800786c:	613b      	str	r3, [r7, #16]
 800786e:	4b66      	ldr	r3, [pc, #408]	; (8007a08 <MX_GPIO_Init+0x1dc>)
 8007870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007872:	4a65      	ldr	r2, [pc, #404]	; (8007a08 <MX_GPIO_Init+0x1dc>)
 8007874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007878:	6313      	str	r3, [r2, #48]	; 0x30
 800787a:	4b63      	ldr	r3, [pc, #396]	; (8007a08 <MX_GPIO_Init+0x1dc>)
 800787c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800787e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007882:	613b      	str	r3, [r7, #16]
 8007884:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007886:	2300      	movs	r3, #0
 8007888:	60fb      	str	r3, [r7, #12]
 800788a:	4b5f      	ldr	r3, [pc, #380]	; (8007a08 <MX_GPIO_Init+0x1dc>)
 800788c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800788e:	4a5e      	ldr	r2, [pc, #376]	; (8007a08 <MX_GPIO_Init+0x1dc>)
 8007890:	f043 0301 	orr.w	r3, r3, #1
 8007894:	6313      	str	r3, [r2, #48]	; 0x30
 8007896:	4b5c      	ldr	r3, [pc, #368]	; (8007a08 <MX_GPIO_Init+0x1dc>)
 8007898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800789a:	f003 0301 	and.w	r3, r3, #1
 800789e:	60fb      	str	r3, [r7, #12]
 80078a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80078a2:	2300      	movs	r3, #0
 80078a4:	60bb      	str	r3, [r7, #8]
 80078a6:	4b58      	ldr	r3, [pc, #352]	; (8007a08 <MX_GPIO_Init+0x1dc>)
 80078a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078aa:	4a57      	ldr	r2, [pc, #348]	; (8007a08 <MX_GPIO_Init+0x1dc>)
 80078ac:	f043 0302 	orr.w	r3, r3, #2
 80078b0:	6313      	str	r3, [r2, #48]	; 0x30
 80078b2:	4b55      	ldr	r3, [pc, #340]	; (8007a08 <MX_GPIO_Init+0x1dc>)
 80078b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b6:	f003 0302 	and.w	r3, r3, #2
 80078ba:	60bb      	str	r3, [r7, #8]
 80078bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80078be:	2300      	movs	r3, #0
 80078c0:	607b      	str	r3, [r7, #4]
 80078c2:	4b51      	ldr	r3, [pc, #324]	; (8007a08 <MX_GPIO_Init+0x1dc>)
 80078c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078c6:	4a50      	ldr	r2, [pc, #320]	; (8007a08 <MX_GPIO_Init+0x1dc>)
 80078c8:	f043 0308 	orr.w	r3, r3, #8
 80078cc:	6313      	str	r3, [r2, #48]	; 0x30
 80078ce:	4b4e      	ldr	r3, [pc, #312]	; (8007a08 <MX_GPIO_Init+0x1dc>)
 80078d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d2:	f003 0308 	and.w	r3, r3, #8
 80078d6:	607b      	str	r3, [r7, #4]
 80078d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80078da:	2200      	movs	r2, #0
 80078dc:	2108      	movs	r1, #8
 80078de:	484b      	ldr	r0, [pc, #300]	; (8007a0c <MX_GPIO_Init+0x1e0>)
 80078e0:	f7f9 f9c2 	bl	8000c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_15V_GPIO_Port, EN_15V_Pin, GPIO_PIN_RESET);
 80078e4:	2200      	movs	r2, #0
 80078e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80078ea:	4849      	ldr	r0, [pc, #292]	; (8007a10 <MX_GPIO_Init+0x1e4>)
 80078ec:	f7f9 f9bc 	bl	8000c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80078f0:	2201      	movs	r2, #1
 80078f2:	2101      	movs	r1, #1
 80078f4:	4846      	ldr	r0, [pc, #280]	; (8007a10 <MX_GPIO_Init+0x1e4>)
 80078f6:	f7f9 f9b7 	bl	8000c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80078fa:	2200      	movs	r2, #0
 80078fc:	f24f 0110 	movw	r1, #61456	; 0xf010
 8007900:	4844      	ldr	r0, [pc, #272]	; (8007a14 <MX_GPIO_Init+0x1e8>)
 8007902:	f7f9 f9b1 	bl	8000c68 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8007906:	2308      	movs	r3, #8
 8007908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800790a:	2301      	movs	r3, #1
 800790c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800790e:	2300      	movs	r3, #0
 8007910:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007912:	2300      	movs	r3, #0
 8007914:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8007916:	f107 031c 	add.w	r3, r7, #28
 800791a:	4619      	mov	r1, r3
 800791c:	483b      	ldr	r0, [pc, #236]	; (8007a0c <MX_GPIO_Init+0x1e0>)
 800791e:	f7f9 f807 	bl	8000930 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_15V_Pin OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = EN_15V_Pin|OTG_FS_PowerSwitchOn_Pin;
 8007922:	f242 0301 	movw	r3, #8193	; 0x2001
 8007926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007928:	2301      	movs	r3, #1
 800792a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800792c:	2300      	movs	r3, #0
 800792e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007930:	2300      	movs	r3, #0
 8007932:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007934:	f107 031c 	add.w	r3, r7, #28
 8007938:	4619      	mov	r1, r3
 800793a:	4835      	ldr	r0, [pc, #212]	; (8007a10 <MX_GPIO_Init+0x1e4>)
 800793c:	f7f8 fff8 	bl	8000930 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8007940:	2308      	movs	r3, #8
 8007942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007944:	2302      	movs	r3, #2
 8007946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007948:	2300      	movs	r3, #0
 800794a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800794c:	2300      	movs	r3, #0
 800794e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007950:	2305      	movs	r3, #5
 8007952:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8007954:	f107 031c 	add.w	r3, r7, #28
 8007958:	4619      	mov	r1, r3
 800795a:	482d      	ldr	r0, [pc, #180]	; (8007a10 <MX_GPIO_Init+0x1e4>)
 800795c:	f7f8 ffe8 	bl	8000930 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8007960:	2301      	movs	r3, #1
 8007962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8007964:	4b2c      	ldr	r3, [pc, #176]	; (8007a18 <MX_GPIO_Init+0x1ec>)
 8007966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007968:	2300      	movs	r3, #0
 800796a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800796c:	f107 031c 	add.w	r3, r7, #28
 8007970:	4619      	mov	r1, r3
 8007972:	482a      	ldr	r0, [pc, #168]	; (8007a1c <MX_GPIO_Init+0x1f0>)
 8007974:	f7f8 ffdc 	bl	8000930 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8007978:	2304      	movs	r3, #4
 800797a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800797c:	2300      	movs	r3, #0
 800797e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007980:	2300      	movs	r3, #0
 8007982:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8007984:	f107 031c 	add.w	r3, r7, #28
 8007988:	4619      	mov	r1, r3
 800798a:	4825      	ldr	r0, [pc, #148]	; (8007a20 <MX_GPIO_Init+0x1f4>)
 800798c:	f7f8 ffd0 	bl	8000930 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8007990:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007996:	2302      	movs	r3, #2
 8007998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800799a:	2300      	movs	r3, #0
 800799c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800799e:	2300      	movs	r3, #0
 80079a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80079a2:	2305      	movs	r3, #5
 80079a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80079a6:	f107 031c 	add.w	r3, r7, #28
 80079aa:	4619      	mov	r1, r3
 80079ac:	481c      	ldr	r0, [pc, #112]	; (8007a20 <MX_GPIO_Init+0x1f4>)
 80079ae:	f7f8 ffbf 	bl	8000930 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80079b2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80079b6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80079b8:	2301      	movs	r3, #1
 80079ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079bc:	2300      	movs	r3, #0
 80079be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079c0:	2300      	movs	r3, #0
 80079c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80079c4:	f107 031c 	add.w	r3, r7, #28
 80079c8:	4619      	mov	r1, r3
 80079ca:	4812      	ldr	r0, [pc, #72]	; (8007a14 <MX_GPIO_Init+0x1e8>)
 80079cc:	f7f8 ffb0 	bl	8000930 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80079d0:	2320      	movs	r3, #32
 80079d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80079d4:	2300      	movs	r3, #0
 80079d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079d8:	2300      	movs	r3, #0
 80079da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80079dc:	f107 031c 	add.w	r3, r7, #28
 80079e0:	4619      	mov	r1, r3
 80079e2:	480c      	ldr	r0, [pc, #48]	; (8007a14 <MX_GPIO_Init+0x1e8>)
 80079e4:	f7f8 ffa4 	bl	8000930 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80079e8:	2302      	movs	r3, #2
 80079ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80079ec:	4b0a      	ldr	r3, [pc, #40]	; (8007a18 <MX_GPIO_Init+0x1ec>)
 80079ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079f0:	2300      	movs	r3, #0
 80079f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80079f4:	f107 031c 	add.w	r3, r7, #28
 80079f8:	4619      	mov	r1, r3
 80079fa:	4804      	ldr	r0, [pc, #16]	; (8007a0c <MX_GPIO_Init+0x1e0>)
 80079fc:	f7f8 ff98 	bl	8000930 <HAL_GPIO_Init>

}
 8007a00:	bf00      	nop
 8007a02:	3730      	adds	r7, #48	; 0x30
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}
 8007a08:	40023800 	.word	0x40023800
 8007a0c:	40021000 	.word	0x40021000
 8007a10:	40020800 	.word	0x40020800
 8007a14:	40020c00 	.word	0x40020c00
 8007a18:	10120000 	.word	0x10120000
 8007a1c:	40020000 	.word	0x40020000
 8007a20:	40020400 	.word	0x40020400

08007a24 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8007a2e:	e7fe      	b.n	8007a2e <_Error_Handler+0xa>

08007a30 <pattern_resetPatternCount>:
{
	currentPatternIndex = index;
}

void pattern_resetPatternCount()
{
 8007a30:	b480      	push	{r7}
 8007a32:	af00      	add	r7, sp, #0
	currentPatternCount = 0;
 8007a34:	4b03      	ldr	r3, [pc, #12]	; (8007a44 <pattern_resetPatternCount+0x14>)
 8007a36:	2200      	movs	r2, #0
 8007a38:	801a      	strh	r2, [r3, #0]
}
 8007a3a:	bf00      	nop
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr
 8007a44:	200024d4 	.word	0x200024d4

08007a48 <pattern_addNewPattern>:

void pattern_addNewPattern()
{
 8007a48:	b480      	push	{r7}
 8007a4a:	af00      	add	r7, sp, #0
	if(currentPatternIndex < MAX_PATTERNS)
 8007a4c:	4b0a      	ldr	r3, [pc, #40]	; (8007a78 <pattern_addNewPattern+0x30>)
 8007a4e:	881b      	ldrh	r3, [r3, #0]
 8007a50:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007a54:	d205      	bcs.n	8007a62 <pattern_addNewPattern+0x1a>
		currentPatternCount++;
 8007a56:	4b09      	ldr	r3, [pc, #36]	; (8007a7c <pattern_addNewPattern+0x34>)
 8007a58:	881b      	ldrh	r3, [r3, #0]
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	b29a      	uxth	r2, r3
 8007a5e:	4b07      	ldr	r3, [pc, #28]	; (8007a7c <pattern_addNewPattern+0x34>)
 8007a60:	801a      	strh	r2, [r3, #0]

	currentPatternIndex = currentPatternCount-1;
 8007a62:	4b06      	ldr	r3, [pc, #24]	; (8007a7c <pattern_addNewPattern+0x34>)
 8007a64:	881b      	ldrh	r3, [r3, #0]
 8007a66:	3b01      	subs	r3, #1
 8007a68:	b29a      	uxth	r2, r3
 8007a6a:	4b03      	ldr	r3, [pc, #12]	; (8007a78 <pattern_addNewPattern+0x30>)
 8007a6c:	801a      	strh	r2, [r3, #0]
}
 8007a6e:	bf00      	nop
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr
 8007a78:	200024d6 	.word	0x200024d6
 8007a7c:	200024d4 	.word	0x200024d4

08007a80 <pattern_setPatternDataFromIndex>:

void pattern_setPatternDataFromIndex(uint16_t index)
{
 8007a80:	b590      	push	{r4, r7, lr}
 8007a82:	b083      	sub	sp, #12
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	4603      	mov	r3, r0
 8007a88:	80fb      	strh	r3, [r7, #6]
	savedPatterns[currentPatternIndex].patternData = patternData_getPatternFromIndex(index);
 8007a8a:	4b08      	ldr	r3, [pc, #32]	; (8007aac <pattern_setPatternDataFromIndex+0x2c>)
 8007a8c:	881b      	ldrh	r3, [r3, #0]
 8007a8e:	461c      	mov	r4, r3
 8007a90:	88fb      	ldrh	r3, [r7, #6]
 8007a92:	4618      	mov	r0, r3
 8007a94:	f000 f88e 	bl	8007bb4 <patternData_getPatternFromIndex>
 8007a98:	4602      	mov	r2, r0
 8007a9a:	4905      	ldr	r1, [pc, #20]	; (8007ab0 <pattern_setPatternDataFromIndex+0x30>)
 8007a9c:	0123      	lsls	r3, r4, #4
 8007a9e:	440b      	add	r3, r1
 8007aa0:	601a      	str	r2, [r3, #0]
}
 8007aa2:	bf00      	nop
 8007aa4:	370c      	adds	r7, #12
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd90      	pop	{r4, r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	200024d6 	.word	0x200024d6
 8007ab0:	20000594 	.word	0x20000594

08007ab4 <pattern_setPatternInterval>:

void pattern_setPatternInterval(uint32_t interval)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b083      	sub	sp, #12
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
	savedPatterns[currentPatternIndex].interval = interval;
 8007abc:	4b06      	ldr	r3, [pc, #24]	; (8007ad8 <pattern_setPatternInterval+0x24>)
 8007abe:	881b      	ldrh	r3, [r3, #0]
 8007ac0:	4a06      	ldr	r2, [pc, #24]	; (8007adc <pattern_setPatternInterval+0x28>)
 8007ac2:	011b      	lsls	r3, r3, #4
 8007ac4:	4413      	add	r3, r2
 8007ac6:	3304      	adds	r3, #4
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	601a      	str	r2, [r3, #0]
}
 8007acc:	bf00      	nop
 8007ace:	370c      	adds	r7, #12
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr
 8007ad8:	200024d6 	.word	0x200024d6
 8007adc:	20000594 	.word	0x20000594

08007ae0 <pattern_setPatternDuration>:

void pattern_setPatternDuration(uint32_t duration)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
	savedPatterns[currentPatternIndex].duration = duration;
 8007ae8:	4b06      	ldr	r3, [pc, #24]	; (8007b04 <pattern_setPatternDuration+0x24>)
 8007aea:	881b      	ldrh	r3, [r3, #0]
 8007aec:	4a06      	ldr	r2, [pc, #24]	; (8007b08 <pattern_setPatternDuration+0x28>)
 8007aee:	011b      	lsls	r3, r3, #4
 8007af0:	4413      	add	r3, r2
 8007af2:	3308      	adds	r3, #8
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	601a      	str	r2, [r3, #0]
}
 8007af8:	bf00      	nop
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr
 8007b04:	200024d6 	.word	0x200024d6
 8007b08:	20000594 	.word	0x20000594

08007b0c <pattern_setPatternStartPosition>:

void pattern_setPatternStartPosition(uint16_t startPosition)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b083      	sub	sp, #12
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	4603      	mov	r3, r0
 8007b14:	80fb      	strh	r3, [r7, #6]
	savedPatterns[currentPatternIndex].startPosition = startPosition;
 8007b16:	4b07      	ldr	r3, [pc, #28]	; (8007b34 <pattern_setPatternStartPosition+0x28>)
 8007b18:	881b      	ldrh	r3, [r3, #0]
 8007b1a:	4a07      	ldr	r2, [pc, #28]	; (8007b38 <pattern_setPatternStartPosition+0x2c>)
 8007b1c:	011b      	lsls	r3, r3, #4
 8007b1e:	4413      	add	r3, r2
 8007b20:	330c      	adds	r3, #12
 8007b22:	88fa      	ldrh	r2, [r7, #6]
 8007b24:	801a      	strh	r2, [r3, #0]
}
 8007b26:	bf00      	nop
 8007b28:	370c      	adds	r7, #12
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr
 8007b32:	bf00      	nop
 8007b34:	200024d6 	.word	0x200024d6
 8007b38:	20000594 	.word	0x20000594

08007b3c <pattern_getCurrentPattern>:
	pattern_setPatternDuration(duration);
	pattern_setPatternStartPosition(startPosition);
}

Pattern_t* pattern_getCurrentPattern()
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	af00      	add	r7, sp, #0
	return &(savedPatterns[currentPatternIndex]);
 8007b40:	4b04      	ldr	r3, [pc, #16]	; (8007b54 <pattern_getCurrentPattern+0x18>)
 8007b42:	881b      	ldrh	r3, [r3, #0]
 8007b44:	011b      	lsls	r3, r3, #4
 8007b46:	4a04      	ldr	r2, [pc, #16]	; (8007b58 <pattern_getCurrentPattern+0x1c>)
 8007b48:	4413      	add	r3, r2
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr
 8007b54:	200024d6 	.word	0x200024d6
 8007b58:	20000594 	.word	0x20000594

08007b5c <patternData_setDataIndex>:
static uint16_t dataIndex;
static uint16_t data[PATTERN_DATA_SIZE];
static uint16_t dataPosition;

void patternData_setDataIndex(uint16_t index)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	4603      	mov	r3, r0
 8007b64:	80fb      	strh	r3, [r7, #6]
	// New set of data, we start from 0 again
	if(index == 0)
 8007b66:	88fb      	ldrh	r3, [r7, #6]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d102      	bne.n	8007b72 <patternData_setDataIndex+0x16>
	{
		dataPosition = 0;
 8007b6c:	4b0d      	ldr	r3, [pc, #52]	; (8007ba4 <patternData_setDataIndex+0x48>)
 8007b6e:	2200      	movs	r2, #0
 8007b70:	801a      	strh	r2, [r3, #0]
	}

	dataIndex = index;
 8007b72:	4a0d      	ldr	r2, [pc, #52]	; (8007ba8 <patternData_setDataIndex+0x4c>)
 8007b74:	88fb      	ldrh	r3, [r7, #6]
 8007b76:	8013      	strh	r3, [r2, #0]

	// Reset the length and set the starting position
	patternDatas[index].size = 0;
 8007b78:	88fb      	ldrh	r3, [r7, #6]
 8007b7a:	4a0c      	ldr	r2, [pc, #48]	; (8007bac <patternData_setDataIndex+0x50>)
 8007b7c:	00db      	lsls	r3, r3, #3
 8007b7e:	4413      	add	r3, r2
 8007b80:	2200      	movs	r2, #0
 8007b82:	809a      	strh	r2, [r3, #4]
	patternDatas[index].data = &(data[dataPosition]);
 8007b84:	4b07      	ldr	r3, [pc, #28]	; (8007ba4 <patternData_setDataIndex+0x48>)
 8007b86:	881b      	ldrh	r3, [r3, #0]
 8007b88:	461a      	mov	r2, r3
 8007b8a:	88fb      	ldrh	r3, [r7, #6]
 8007b8c:	0052      	lsls	r2, r2, #1
 8007b8e:	4908      	ldr	r1, [pc, #32]	; (8007bb0 <patternData_setDataIndex+0x54>)
 8007b90:	440a      	add	r2, r1
 8007b92:	4906      	ldr	r1, [pc, #24]	; (8007bac <patternData_setDataIndex+0x50>)
 8007b94:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
}
 8007b98:	bf00      	nop
 8007b9a:	370c      	adds	r7, #12
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr
 8007ba4:	2001b7fc 	.word	0x2001b7fc
 8007ba8:	20003158 	.word	0x20003158
 8007bac:	200024d8 	.word	0x200024d8
 8007bb0:	2000315c 	.word	0x2000315c

08007bb4 <patternData_getPatternFromIndex>:


PatternData_t* patternData_getPatternFromIndex(uint16_t index)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b083      	sub	sp, #12
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	4603      	mov	r3, r0
 8007bbc:	80fb      	strh	r3, [r7, #6]
	// We could warn the user there is something wrong instead
	if(index >= MAX_PATTERNS_DATA)
 8007bbe:	88fb      	ldrh	r3, [r7, #6]
 8007bc0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8007bc4:	d301      	bcc.n	8007bca <patternData_getPatternFromIndex+0x16>
		return &(patternDatas[0]);
 8007bc6:	4b06      	ldr	r3, [pc, #24]	; (8007be0 <patternData_getPatternFromIndex+0x2c>)
 8007bc8:	e003      	b.n	8007bd2 <patternData_getPatternFromIndex+0x1e>

	return &(patternDatas[index]);
 8007bca:	88fb      	ldrh	r3, [r7, #6]
 8007bcc:	00db      	lsls	r3, r3, #3
 8007bce:	4a04      	ldr	r2, [pc, #16]	; (8007be0 <patternData_getPatternFromIndex+0x2c>)
 8007bd0:	4413      	add	r3, r2
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	370c      	adds	r7, #12
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr
 8007bde:	bf00      	nop
 8007be0:	200024d8 	.word	0x200024d8

08007be4 <patternData_addValueToCurrentPattern>:
	}
}


void patternData_addValueToCurrentPattern(uint16_t value)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	4603      	mov	r3, r0
 8007bec:	80fb      	strh	r3, [r7, #6]
	if(dataPosition < PATTERN_DATA_SIZE)
 8007bee:	4b13      	ldr	r3, [pc, #76]	; (8007c3c <patternData_addValueToCurrentPattern+0x58>)
 8007bf0:	881b      	ldrh	r3, [r3, #0]
 8007bf2:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d81a      	bhi.n	8007c30 <patternData_addValueToCurrentPattern+0x4c>
	{
		// Fill the global data array
		data[dataPosition] = value;
 8007bfa:	4b10      	ldr	r3, [pc, #64]	; (8007c3c <patternData_addValueToCurrentPattern+0x58>)
 8007bfc:	881b      	ldrh	r3, [r3, #0]
 8007bfe:	4619      	mov	r1, r3
 8007c00:	4a0f      	ldr	r2, [pc, #60]	; (8007c40 <patternData_addValueToCurrentPattern+0x5c>)
 8007c02:	88fb      	ldrh	r3, [r7, #6]
 8007c04:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
		dataPosition++;
 8007c08:	4b0c      	ldr	r3, [pc, #48]	; (8007c3c <patternData_addValueToCurrentPattern+0x58>)
 8007c0a:	881b      	ldrh	r3, [r3, #0]
 8007c0c:	3301      	adds	r3, #1
 8007c0e:	b29a      	uxth	r2, r3
 8007c10:	4b0a      	ldr	r3, [pc, #40]	; (8007c3c <patternData_addValueToCurrentPattern+0x58>)
 8007c12:	801a      	strh	r2, [r3, #0]

		// Our pattern data only increment its size
		patternDatas[dataIndex].size++;
 8007c14:	4b0b      	ldr	r3, [pc, #44]	; (8007c44 <patternData_addValueToCurrentPattern+0x60>)
 8007c16:	881b      	ldrh	r3, [r3, #0]
 8007c18:	461a      	mov	r2, r3
 8007c1a:	490b      	ldr	r1, [pc, #44]	; (8007c48 <patternData_addValueToCurrentPattern+0x64>)
 8007c1c:	00d3      	lsls	r3, r2, #3
 8007c1e:	440b      	add	r3, r1
 8007c20:	889b      	ldrh	r3, [r3, #4]
 8007c22:	3301      	adds	r3, #1
 8007c24:	b298      	uxth	r0, r3
 8007c26:	4908      	ldr	r1, [pc, #32]	; (8007c48 <patternData_addValueToCurrentPattern+0x64>)
 8007c28:	00d3      	lsls	r3, r2, #3
 8007c2a:	440b      	add	r3, r1
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	809a      	strh	r2, [r3, #4]
	}
	else
	{
		// TODO: Warn the user we don't have enough space
	}
}
 8007c30:	bf00      	nop
 8007c32:	370c      	adds	r7, #12
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr
 8007c3c:	2001b7fc 	.word	0x2001b7fc
 8007c40:	2000315c 	.word	0x2000315c
 8007c44:	20003158 	.word	0x20003158
 8007c48:	200024d8 	.word	0x200024d8

08007c4c <sequence_setIndex>:

static Sequence_t ledSequences[MAX_SEQUENCES];
static uint8_t sequenceIndex;

void sequence_setIndex(uint8_t index)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	4603      	mov	r3, r0
 8007c54:	71fb      	strb	r3, [r7, #7]
	if(index >= MAX_SEQUENCES)
 8007c56:	79fb      	ldrb	r3, [r7, #7]
 8007c58:	2b13      	cmp	r3, #19
 8007c5a:	d903      	bls.n	8007c64 <sequence_setIndex+0x18>
		sequenceIndex = 0;
 8007c5c:	4b0b      	ldr	r3, [pc, #44]	; (8007c8c <sequence_setIndex+0x40>)
 8007c5e:	2200      	movs	r2, #0
 8007c60:	701a      	strb	r2, [r3, #0]
 8007c62:	e002      	b.n	8007c6a <sequence_setIndex+0x1e>
	else
		sequenceIndex = index;
 8007c64:	4a09      	ldr	r2, [pc, #36]	; (8007c8c <sequence_setIndex+0x40>)
 8007c66:	79fb      	ldrb	r3, [r7, #7]
 8007c68:	7013      	strb	r3, [r2, #0]

	ledSequences[sequenceIndex].patterns_count = 0;
 8007c6a:	4b08      	ldr	r3, [pc, #32]	; (8007c8c <sequence_setIndex+0x40>)
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	4619      	mov	r1, r3
 8007c70:	4a07      	ldr	r2, [pc, #28]	; (8007c90 <sequence_setIndex+0x44>)
 8007c72:	2354      	movs	r3, #84	; 0x54
 8007c74:	fb01 f303 	mul.w	r3, r1, r3
 8007c78:	4413      	add	r3, r2
 8007c7a:	3351      	adds	r3, #81	; 0x51
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	701a      	strb	r2, [r3, #0]
}
 8007c80:	bf00      	nop
 8007c82:	370c      	adds	r7, #12
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr
 8007c8c:	2001be90 	.word	0x2001be90
 8007c90:	2001b800 	.word	0x2001b800

08007c94 <sequence_setLedIndex>:

void sequence_setLedIndex(uint8_t ledIndex)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b082      	sub	sp, #8
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	71fb      	strb	r3, [r7, #7]
	ledSequences[sequenceIndex].ledIndex = ledIndex;
 8007c9e:	4b0e      	ldr	r3, [pc, #56]	; (8007cd8 <sequence_setLedIndex+0x44>)
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	4a0d      	ldr	r2, [pc, #52]	; (8007cdc <sequence_setLedIndex+0x48>)
 8007ca6:	2354      	movs	r3, #84	; 0x54
 8007ca8:	fb01 f303 	mul.w	r3, r1, r3
 8007cac:	4413      	add	r3, r2
 8007cae:	3350      	adds	r3, #80	; 0x50
 8007cb0:	79fa      	ldrb	r2, [r7, #7]
 8007cb2:	701a      	strb	r2, [r3, #0]

	// Assign our sequence to the LED
	LED_setSequence(ledIndex, &(ledSequences[sequenceIndex]));
 8007cb4:	4b08      	ldr	r3, [pc, #32]	; (8007cd8 <sequence_setLedIndex+0x44>)
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	461a      	mov	r2, r3
 8007cba:	2354      	movs	r3, #84	; 0x54
 8007cbc:	fb02 f303 	mul.w	r3, r2, r3
 8007cc0:	4a06      	ldr	r2, [pc, #24]	; (8007cdc <sequence_setLedIndex+0x48>)
 8007cc2:	441a      	add	r2, r3
 8007cc4:	79fb      	ldrb	r3, [r7, #7]
 8007cc6:	4611      	mov	r1, r2
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f7fe ffc7 	bl	8006c5c <LED_setSequence>
}
 8007cce:	bf00      	nop
 8007cd0:	3708      	adds	r7, #8
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	2001be90 	.word	0x2001be90
 8007cdc:	2001b800 	.word	0x2001b800

08007ce0 <sequence_addPattern>:

void sequence_addPattern(Pattern_t *pattern)
{
 8007ce0:	b490      	push	{r4, r7}
 8007ce2:	b082      	sub	sp, #8
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
	if(ledSequences[sequenceIndex].patterns_count < MAX_SEQUENCE_PATTERNS)
 8007ce8:	4b1d      	ldr	r3, [pc, #116]	; (8007d60 <sequence_addPattern+0x80>)
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	4619      	mov	r1, r3
 8007cee:	4a1d      	ldr	r2, [pc, #116]	; (8007d64 <sequence_addPattern+0x84>)
 8007cf0:	2354      	movs	r3, #84	; 0x54
 8007cf2:	fb01 f303 	mul.w	r3, r1, r3
 8007cf6:	4413      	add	r3, r2
 8007cf8:	3351      	adds	r3, #81	; 0x51
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	2b13      	cmp	r3, #19
 8007cfe:	d82a      	bhi.n	8007d56 <sequence_addPattern+0x76>
	{
		ledSequences[sequenceIndex].patterns[ledSequences[sequenceIndex].patterns_count] = pattern;
 8007d00:	4b17      	ldr	r3, [pc, #92]	; (8007d60 <sequence_addPattern+0x80>)
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	4618      	mov	r0, r3
 8007d06:	4b16      	ldr	r3, [pc, #88]	; (8007d60 <sequence_addPattern+0x80>)
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	4a15      	ldr	r2, [pc, #84]	; (8007d64 <sequence_addPattern+0x84>)
 8007d0e:	2354      	movs	r3, #84	; 0x54
 8007d10:	fb01 f303 	mul.w	r3, r1, r3
 8007d14:	4413      	add	r3, r2
 8007d16:	3351      	adds	r3, #81	; 0x51
 8007d18:	781b      	ldrb	r3, [r3, #0]
 8007d1a:	461c      	mov	r4, r3
 8007d1c:	4911      	ldr	r1, [pc, #68]	; (8007d64 <sequence_addPattern+0x84>)
 8007d1e:	4603      	mov	r3, r0
 8007d20:	005b      	lsls	r3, r3, #1
 8007d22:	4403      	add	r3, r0
 8007d24:	00da      	lsls	r2, r3, #3
 8007d26:	1ad2      	subs	r2, r2, r3
 8007d28:	1913      	adds	r3, r2, r4
 8007d2a:	687a      	ldr	r2, [r7, #4]
 8007d2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		ledSequences[sequenceIndex].patterns_count++;
 8007d30:	4b0b      	ldr	r3, [pc, #44]	; (8007d60 <sequence_addPattern+0x80>)
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	490b      	ldr	r1, [pc, #44]	; (8007d64 <sequence_addPattern+0x84>)
 8007d36:	2254      	movs	r2, #84	; 0x54
 8007d38:	fb03 f202 	mul.w	r2, r3, r2
 8007d3c:	440a      	add	r2, r1
 8007d3e:	3251      	adds	r2, #81	; 0x51
 8007d40:	7812      	ldrb	r2, [r2, #0]
 8007d42:	3201      	adds	r2, #1
 8007d44:	b2d0      	uxtb	r0, r2
 8007d46:	4a07      	ldr	r2, [pc, #28]	; (8007d64 <sequence_addPattern+0x84>)
 8007d48:	2154      	movs	r1, #84	; 0x54
 8007d4a:	fb01 f303 	mul.w	r3, r1, r3
 8007d4e:	4413      	add	r3, r2
 8007d50:	3351      	adds	r3, #81	; 0x51
 8007d52:	4602      	mov	r2, r0
 8007d54:	701a      	strb	r2, [r3, #0]
	}
}
 8007d56:	bf00      	nop
 8007d58:	3708      	adds	r7, #8
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bc90      	pop	{r4, r7}
 8007d5e:	4770      	bx	lr
 8007d60:	2001be90 	.word	0x2001be90
 8007d64:	2001b800 	.word	0x2001b800

08007d68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b082      	sub	sp, #8
 8007d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d6e:	2300      	movs	r3, #0
 8007d70:	607b      	str	r3, [r7, #4]
 8007d72:	4b25      	ldr	r3, [pc, #148]	; (8007e08 <HAL_MspInit+0xa0>)
 8007d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d76:	4a24      	ldr	r2, [pc, #144]	; (8007e08 <HAL_MspInit+0xa0>)
 8007d78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007d7c:	6453      	str	r3, [r2, #68]	; 0x44
 8007d7e:	4b22      	ldr	r3, [pc, #136]	; (8007e08 <HAL_MspInit+0xa0>)
 8007d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d86:	607b      	str	r3, [r7, #4]
 8007d88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	603b      	str	r3, [r7, #0]
 8007d8e:	4b1e      	ldr	r3, [pc, #120]	; (8007e08 <HAL_MspInit+0xa0>)
 8007d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d92:	4a1d      	ldr	r2, [pc, #116]	; (8007e08 <HAL_MspInit+0xa0>)
 8007d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d98:	6413      	str	r3, [r2, #64]	; 0x40
 8007d9a:	4b1b      	ldr	r3, [pc, #108]	; (8007e08 <HAL_MspInit+0xa0>)
 8007d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007da2:	603b      	str	r3, [r7, #0]
 8007da4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8007da6:	2007      	movs	r0, #7
 8007da8:	f7f8 fd56 	bl	8000858 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8007dac:	2200      	movs	r2, #0
 8007dae:	2100      	movs	r1, #0
 8007db0:	f06f 000b 	mvn.w	r0, #11
 8007db4:	f7f8 fd5b 	bl	800086e <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8007db8:	2200      	movs	r2, #0
 8007dba:	2100      	movs	r1, #0
 8007dbc:	f06f 000a 	mvn.w	r0, #10
 8007dc0:	f7f8 fd55 	bl	800086e <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	2100      	movs	r1, #0
 8007dc8:	f06f 0009 	mvn.w	r0, #9
 8007dcc:	f7f8 fd4f 	bl	800086e <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	2100      	movs	r1, #0
 8007dd4:	f06f 0004 	mvn.w	r0, #4
 8007dd8:	f7f8 fd49 	bl	800086e <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8007ddc:	2200      	movs	r2, #0
 8007dde:	2100      	movs	r1, #0
 8007de0:	f06f 0003 	mvn.w	r0, #3
 8007de4:	f7f8 fd43 	bl	800086e <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8007de8:	2200      	movs	r2, #0
 8007dea:	2100      	movs	r1, #0
 8007dec:	f06f 0001 	mvn.w	r0, #1
 8007df0:	f7f8 fd3d 	bl	800086e <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8007df4:	2200      	movs	r2, #0
 8007df6:	2100      	movs	r1, #0
 8007df8:	f04f 30ff 	mov.w	r0, #4294967295
 8007dfc:	f7f8 fd37 	bl	800086e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007e00:	bf00      	nop
 8007e02:	3708      	adds	r7, #8
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}
 8007e08:	40023800 	.word	0x40023800

08007e0c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b088      	sub	sp, #32
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a12      	ldr	r2, [pc, #72]	; (8007e64 <HAL_I2C_MspInit+0x58>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d11e      	bne.n	8007e5c <HAL_I2C_MspInit+0x50>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8007e1e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8007e22:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007e24:	2312      	movs	r3, #18
 8007e26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007e30:	2304      	movs	r3, #4
 8007e32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007e34:	f107 030c 	add.w	r3, r7, #12
 8007e38:	4619      	mov	r1, r3
 8007e3a:	480b      	ldr	r0, [pc, #44]	; (8007e68 <HAL_I2C_MspInit+0x5c>)
 8007e3c:	f7f8 fd78 	bl	8000930 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007e40:	2300      	movs	r3, #0
 8007e42:	60bb      	str	r3, [r7, #8]
 8007e44:	4b09      	ldr	r3, [pc, #36]	; (8007e6c <HAL_I2C_MspInit+0x60>)
 8007e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e48:	4a08      	ldr	r2, [pc, #32]	; (8007e6c <HAL_I2C_MspInit+0x60>)
 8007e4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007e4e:	6413      	str	r3, [r2, #64]	; 0x40
 8007e50:	4b06      	ldr	r3, [pc, #24]	; (8007e6c <HAL_I2C_MspInit+0x60>)
 8007e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007e58:	60bb      	str	r3, [r7, #8]
 8007e5a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8007e5c:	bf00      	nop
 8007e5e:	3720      	adds	r7, #32
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}
 8007e64:	40005400 	.word	0x40005400
 8007e68:	40020400 	.word	0x40020400
 8007e6c:	40023800 	.word	0x40023800

08007e70 <HAL_I2S_MspInit>:
  }

}

void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b088      	sub	sp, #32
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2s->Instance==SPI3)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a1a      	ldr	r2, [pc, #104]	; (8007ee8 <HAL_I2S_MspInit+0x78>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d12e      	bne.n	8007ee0 <HAL_I2S_MspInit+0x70>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007e82:	2300      	movs	r3, #0
 8007e84:	60bb      	str	r3, [r7, #8]
 8007e86:	4b19      	ldr	r3, [pc, #100]	; (8007eec <HAL_I2S_MspInit+0x7c>)
 8007e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e8a:	4a18      	ldr	r2, [pc, #96]	; (8007eec <HAL_I2S_MspInit+0x7c>)
 8007e8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e90:	6413      	str	r3, [r2, #64]	; 0x40
 8007e92:	4b16      	ldr	r3, [pc, #88]	; (8007eec <HAL_I2S_MspInit+0x7c>)
 8007e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e9a:	60bb      	str	r3, [r7, #8]
 8007e9c:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8007e9e:	2310      	movs	r3, #16
 8007ea0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ea2:	2302      	movs	r3, #2
 8007ea4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007eae:	2306      	movs	r3, #6
 8007eb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8007eb2:	f107 030c 	add.w	r3, r7, #12
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	480d      	ldr	r0, [pc, #52]	; (8007ef0 <HAL_I2S_MspInit+0x80>)
 8007eba:	f7f8 fd39 	bl	8000930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8007ebe:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8007ec2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ec4:	2302      	movs	r3, #2
 8007ec6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007ed0:	2306      	movs	r3, #6
 8007ed2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007ed4:	f107 030c 	add.w	r3, r7, #12
 8007ed8:	4619      	mov	r1, r3
 8007eda:	4806      	ldr	r0, [pc, #24]	; (8007ef4 <HAL_I2S_MspInit+0x84>)
 8007edc:	f7f8 fd28 	bl	8000930 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8007ee0:	bf00      	nop
 8007ee2:	3720      	adds	r7, #32
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	40003c00 	.word	0x40003c00
 8007eec:	40023800 	.word	0x40023800
 8007ef0:	40020000 	.word	0x40020000
 8007ef4:	40020800 	.word	0x40020800

08007ef8 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b088      	sub	sp, #32
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a12      	ldr	r2, [pc, #72]	; (8007f50 <HAL_SPI_MspInit+0x58>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d11d      	bne.n	8007f46 <HAL_SPI_MspInit+0x4e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	60bb      	str	r3, [r7, #8]
 8007f0e:	4b11      	ldr	r3, [pc, #68]	; (8007f54 <HAL_SPI_MspInit+0x5c>)
 8007f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f12:	4a10      	ldr	r2, [pc, #64]	; (8007f54 <HAL_SPI_MspInit+0x5c>)
 8007f14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007f18:	6453      	str	r3, [r2, #68]	; 0x44
 8007f1a:	4b0e      	ldr	r3, [pc, #56]	; (8007f54 <HAL_SPI_MspInit+0x5c>)
 8007f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f22:	60bb      	str	r3, [r7, #8]
 8007f24:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8007f26:	23e0      	movs	r3, #224	; 0xe0
 8007f28:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f2a:	2302      	movs	r3, #2
 8007f2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f32:	2300      	movs	r3, #0
 8007f34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007f36:	2305      	movs	r3, #5
 8007f38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f3a:	f107 030c 	add.w	r3, r7, #12
 8007f3e:	4619      	mov	r1, r3
 8007f40:	4805      	ldr	r0, [pc, #20]	; (8007f58 <HAL_SPI_MspInit+0x60>)
 8007f42:	f7f8 fcf5 	bl	8000930 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8007f46:	bf00      	nop
 8007f48:	3720      	adds	r7, #32
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
 8007f4e:	bf00      	nop
 8007f50:	40013000 	.word	0x40013000
 8007f54:	40023800 	.word	0x40023800
 8007f58:	40020000 	.word	0x40020000

08007f5c <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b08a      	sub	sp, #40	; 0x28
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM1)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a5c      	ldr	r2, [pc, #368]	; (80080dc <HAL_TIM_Base_MspInit+0x180>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d10e      	bne.n	8007f8c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007f6e:	2300      	movs	r3, #0
 8007f70:	627b      	str	r3, [r7, #36]	; 0x24
 8007f72:	4b5b      	ldr	r3, [pc, #364]	; (80080e0 <HAL_TIM_Base_MspInit+0x184>)
 8007f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f76:	4a5a      	ldr	r2, [pc, #360]	; (80080e0 <HAL_TIM_Base_MspInit+0x184>)
 8007f78:	f043 0301 	orr.w	r3, r3, #1
 8007f7c:	6453      	str	r3, [r2, #68]	; 0x44
 8007f7e:	4b58      	ldr	r3, [pc, #352]	; (80080e0 <HAL_TIM_Base_MspInit+0x184>)
 8007f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f82:	f003 0301 	and.w	r3, r3, #1
 8007f86:	627b      	str	r3, [r7, #36]	; 0x24
 8007f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8007f8a:	e0a2      	b.n	80080d2 <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM2)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f94:	d10e      	bne.n	8007fb4 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007f96:	2300      	movs	r3, #0
 8007f98:	623b      	str	r3, [r7, #32]
 8007f9a:	4b51      	ldr	r3, [pc, #324]	; (80080e0 <HAL_TIM_Base_MspInit+0x184>)
 8007f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f9e:	4a50      	ldr	r2, [pc, #320]	; (80080e0 <HAL_TIM_Base_MspInit+0x184>)
 8007fa0:	f043 0301 	orr.w	r3, r3, #1
 8007fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8007fa6:	4b4e      	ldr	r3, [pc, #312]	; (80080e0 <HAL_TIM_Base_MspInit+0x184>)
 8007fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007faa:	f003 0301 	and.w	r3, r3, #1
 8007fae:	623b      	str	r3, [r7, #32]
 8007fb0:	6a3b      	ldr	r3, [r7, #32]
}
 8007fb2:	e08e      	b.n	80080d2 <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM3)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a4a      	ldr	r2, [pc, #296]	; (80080e4 <HAL_TIM_Base_MspInit+0x188>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d10e      	bne.n	8007fdc <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	61fb      	str	r3, [r7, #28]
 8007fc2:	4b47      	ldr	r3, [pc, #284]	; (80080e0 <HAL_TIM_Base_MspInit+0x184>)
 8007fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fc6:	4a46      	ldr	r2, [pc, #280]	; (80080e0 <HAL_TIM_Base_MspInit+0x184>)
 8007fc8:	f043 0302 	orr.w	r3, r3, #2
 8007fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8007fce:	4b44      	ldr	r3, [pc, #272]	; (80080e0 <HAL_TIM_Base_MspInit+0x184>)
 8007fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd2:	f003 0302 	and.w	r3, r3, #2
 8007fd6:	61fb      	str	r3, [r7, #28]
 8007fd8:	69fb      	ldr	r3, [r7, #28]
}
 8007fda:	e07a      	b.n	80080d2 <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM5)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a41      	ldr	r2, [pc, #260]	; (80080e8 <HAL_TIM_Base_MspInit+0x18c>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d10e      	bne.n	8008004 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	61bb      	str	r3, [r7, #24]
 8007fea:	4b3d      	ldr	r3, [pc, #244]	; (80080e0 <HAL_TIM_Base_MspInit+0x184>)
 8007fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fee:	4a3c      	ldr	r2, [pc, #240]	; (80080e0 <HAL_TIM_Base_MspInit+0x184>)
 8007ff0:	f043 0308 	orr.w	r3, r3, #8
 8007ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8007ff6:	4b3a      	ldr	r3, [pc, #232]	; (80080e0 <HAL_TIM_Base_MspInit+0x184>)
 8007ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ffa:	f003 0308 	and.w	r3, r3, #8
 8007ffe:	61bb      	str	r3, [r7, #24]
 8008000:	69bb      	ldr	r3, [r7, #24]
}
 8008002:	e066      	b.n	80080d2 <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM6)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a38      	ldr	r2, [pc, #224]	; (80080ec <HAL_TIM_Base_MspInit+0x190>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d116      	bne.n	800803c <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800800e:	2300      	movs	r3, #0
 8008010:	617b      	str	r3, [r7, #20]
 8008012:	4b33      	ldr	r3, [pc, #204]	; (80080e0 <HAL_TIM_Base_MspInit+0x184>)
 8008014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008016:	4a32      	ldr	r2, [pc, #200]	; (80080e0 <HAL_TIM_Base_MspInit+0x184>)
 8008018:	f043 0310 	orr.w	r3, r3, #16
 800801c:	6413      	str	r3, [r2, #64]	; 0x40
 800801e:	4b30      	ldr	r3, [pc, #192]	; (80080e0 <HAL_TIM_Base_MspInit+0x184>)
 8008020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008022:	f003 0310 	and.w	r3, r3, #16
 8008026:	617b      	str	r3, [r7, #20]
 8008028:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800802a:	2200      	movs	r2, #0
 800802c:	2100      	movs	r1, #0
 800802e:	2036      	movs	r0, #54	; 0x36
 8008030:	f7f8 fc1d 	bl	800086e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8008034:	2036      	movs	r0, #54	; 0x36
 8008036:	f7f8 fc36 	bl	80008a6 <HAL_NVIC_EnableIRQ>
}
 800803a:	e04a      	b.n	80080d2 <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM8)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a2b      	ldr	r2, [pc, #172]	; (80080f0 <HAL_TIM_Base_MspInit+0x194>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d116      	bne.n	8008074 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8008046:	2300      	movs	r3, #0
 8008048:	613b      	str	r3, [r7, #16]
 800804a:	4b25      	ldr	r3, [pc, #148]	; (80080e0 <HAL_TIM_Base_MspInit+0x184>)
 800804c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800804e:	4a24      	ldr	r2, [pc, #144]	; (80080e0 <HAL_TIM_Base_MspInit+0x184>)
 8008050:	f043 0302 	orr.w	r3, r3, #2
 8008054:	6453      	str	r3, [r2, #68]	; 0x44
 8008056:	4b22      	ldr	r3, [pc, #136]	; (80080e0 <HAL_TIM_Base_MspInit+0x184>)
 8008058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800805a:	f003 0302 	and.w	r3, r3, #2
 800805e:	613b      	str	r3, [r7, #16]
 8008060:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8008062:	2200      	movs	r2, #0
 8008064:	2100      	movs	r1, #0
 8008066:	202b      	movs	r0, #43	; 0x2b
 8008068:	f7f8 fc01 	bl	800086e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800806c:	202b      	movs	r0, #43	; 0x2b
 800806e:	f7f8 fc1a 	bl	80008a6 <HAL_NVIC_EnableIRQ>
}
 8008072:	e02e      	b.n	80080d2 <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM9)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a1e      	ldr	r2, [pc, #120]	; (80080f4 <HAL_TIM_Base_MspInit+0x198>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d10e      	bne.n	800809c <HAL_TIM_Base_MspInit+0x140>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800807e:	2300      	movs	r3, #0
 8008080:	60fb      	str	r3, [r7, #12]
 8008082:	4b17      	ldr	r3, [pc, #92]	; (80080e0 <HAL_TIM_Base_MspInit+0x184>)
 8008084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008086:	4a16      	ldr	r2, [pc, #88]	; (80080e0 <HAL_TIM_Base_MspInit+0x184>)
 8008088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800808c:	6453      	str	r3, [r2, #68]	; 0x44
 800808e:	4b14      	ldr	r3, [pc, #80]	; (80080e0 <HAL_TIM_Base_MspInit+0x184>)
 8008090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008092:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008096:	60fb      	str	r3, [r7, #12]
 8008098:	68fb      	ldr	r3, [r7, #12]
}
 800809a:	e01a      	b.n	80080d2 <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM12)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a15      	ldr	r2, [pc, #84]	; (80080f8 <HAL_TIM_Base_MspInit+0x19c>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d115      	bne.n	80080d2 <HAL_TIM_Base_MspInit+0x176>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80080a6:	2300      	movs	r3, #0
 80080a8:	60bb      	str	r3, [r7, #8]
 80080aa:	4b0d      	ldr	r3, [pc, #52]	; (80080e0 <HAL_TIM_Base_MspInit+0x184>)
 80080ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ae:	4a0c      	ldr	r2, [pc, #48]	; (80080e0 <HAL_TIM_Base_MspInit+0x184>)
 80080b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080b4:	6413      	str	r3, [r2, #64]	; 0x40
 80080b6:	4b0a      	ldr	r3, [pc, #40]	; (80080e0 <HAL_TIM_Base_MspInit+0x184>)
 80080b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080be:	60bb      	str	r3, [r7, #8]
 80080c0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80080c2:	2200      	movs	r2, #0
 80080c4:	2100      	movs	r1, #0
 80080c6:	202b      	movs	r0, #43	; 0x2b
 80080c8:	f7f8 fbd1 	bl	800086e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80080cc:	202b      	movs	r0, #43	; 0x2b
 80080ce:	f7f8 fbea 	bl	80008a6 <HAL_NVIC_EnableIRQ>
}
 80080d2:	bf00      	nop
 80080d4:	3728      	adds	r7, #40	; 0x28
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	40010000 	.word	0x40010000
 80080e0:	40023800 	.word	0x40023800
 80080e4:	40000400 	.word	0x40000400
 80080e8:	40000c00 	.word	0x40000c00
 80080ec:	40001000 	.word	0x40001000
 80080f0:	40010400 	.word	0x40010400
 80080f4:	40014000 	.word	0x40014000
 80080f8:	40001800 	.word	0x40001800

080080fc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b085      	sub	sp, #20
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]

  if(htim_pwm->Instance==TIM4)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a0b      	ldr	r2, [pc, #44]	; (8008138 <HAL_TIM_PWM_MspInit+0x3c>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d10d      	bne.n	800812a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800810e:	2300      	movs	r3, #0
 8008110:	60fb      	str	r3, [r7, #12]
 8008112:	4b0a      	ldr	r3, [pc, #40]	; (800813c <HAL_TIM_PWM_MspInit+0x40>)
 8008114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008116:	4a09      	ldr	r2, [pc, #36]	; (800813c <HAL_TIM_PWM_MspInit+0x40>)
 8008118:	f043 0304 	orr.w	r3, r3, #4
 800811c:	6413      	str	r3, [r2, #64]	; 0x40
 800811e:	4b07      	ldr	r3, [pc, #28]	; (800813c <HAL_TIM_PWM_MspInit+0x40>)
 8008120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008122:	f003 0304 	and.w	r3, r3, #4
 8008126:	60fb      	str	r3, [r7, #12]
 8008128:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800812a:	bf00      	nop
 800812c:	3714      	adds	r7, #20
 800812e:	46bd      	mov	sp, r7
 8008130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008134:	4770      	bx	lr
 8008136:	bf00      	nop
 8008138:	40000800 	.word	0x40000800
 800813c:	40023800 	.word	0x40023800

08008140 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b088      	sub	sp, #32
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a57      	ldr	r2, [pc, #348]	; (80082ac <HAL_TIM_MspPostInit+0x16c>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d111      	bne.n	8008176 <HAL_TIM_MspPostInit+0x36>
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8008152:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8008156:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008158:	2302      	movs	r3, #2
 800815a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800815c:	2300      	movs	r3, #0
 800815e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008160:	2300      	movs	r3, #0
 8008162:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8008164:	2301      	movs	r3, #1
 8008166:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008168:	f107 030c 	add.w	r3, r7, #12
 800816c:	4619      	mov	r1, r3
 800816e:	4850      	ldr	r0, [pc, #320]	; (80082b0 <HAL_TIM_MspPostInit+0x170>)
 8008170:	f7f8 fbde 	bl	8000930 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8008174:	e096      	b.n	80082a4 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM2)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800817e:	d122      	bne.n	80081c6 <HAL_TIM_MspPostInit+0x86>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_15;
 8008180:	f248 0306 	movw	r3, #32774	; 0x8006
 8008184:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008186:	2302      	movs	r3, #2
 8008188:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800818a:	2300      	movs	r3, #0
 800818c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800818e:	2300      	movs	r3, #0
 8008190:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8008192:	2301      	movs	r3, #1
 8008194:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008196:	f107 030c 	add.w	r3, r7, #12
 800819a:	4619      	mov	r1, r3
 800819c:	4845      	ldr	r0, [pc, #276]	; (80082b4 <HAL_TIM_MspPostInit+0x174>)
 800819e:	f7f8 fbc7 	bl	8000930 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80081a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80081a6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081a8:	2302      	movs	r3, #2
 80081aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081ac:	2300      	movs	r3, #0
 80081ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80081b0:	2300      	movs	r3, #0
 80081b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80081b4:	2301      	movs	r3, #1
 80081b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80081b8:	f107 030c 	add.w	r3, r7, #12
 80081bc:	4619      	mov	r1, r3
 80081be:	483e      	ldr	r0, [pc, #248]	; (80082b8 <HAL_TIM_MspPostInit+0x178>)
 80081c0:	f7f8 fbb6 	bl	8000930 <HAL_GPIO_Init>
}
 80081c4:	e06e      	b.n	80082a4 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a3c      	ldr	r2, [pc, #240]	; (80082bc <HAL_TIM_MspPostInit+0x17c>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d110      	bne.n	80081f2 <HAL_TIM_MspPostInit+0xb2>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80081d0:	2333      	movs	r3, #51	; 0x33
 80081d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081d4:	2302      	movs	r3, #2
 80081d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081d8:	2300      	movs	r3, #0
 80081da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80081dc:	2300      	movs	r3, #0
 80081de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80081e0:	2302      	movs	r3, #2
 80081e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80081e4:	f107 030c 	add.w	r3, r7, #12
 80081e8:	4619      	mov	r1, r3
 80081ea:	4833      	ldr	r0, [pc, #204]	; (80082b8 <HAL_TIM_MspPostInit+0x178>)
 80081ec:	f7f8 fba0 	bl	8000930 <HAL_GPIO_Init>
}
 80081f0:	e058      	b.n	80082a4 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a32      	ldr	r2, [pc, #200]	; (80082c0 <HAL_TIM_MspPostInit+0x180>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d111      	bne.n	8008220 <HAL_TIM_MspPostInit+0xe0>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80081fc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8008200:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008202:	2302      	movs	r3, #2
 8008204:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008206:	2300      	movs	r3, #0
 8008208:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800820a:	2300      	movs	r3, #0
 800820c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800820e:	2302      	movs	r3, #2
 8008210:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008212:	f107 030c 	add.w	r3, r7, #12
 8008216:	4619      	mov	r1, r3
 8008218:	4827      	ldr	r0, [pc, #156]	; (80082b8 <HAL_TIM_MspPostInit+0x178>)
 800821a:	f7f8 fb89 	bl	8000930 <HAL_GPIO_Init>
}
 800821e:	e041      	b.n	80082a4 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a27      	ldr	r2, [pc, #156]	; (80082c4 <HAL_TIM_MspPostInit+0x184>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d110      	bne.n	800824c <HAL_TIM_MspPostInit+0x10c>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800822a:	2308      	movs	r3, #8
 800822c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800822e:	2302      	movs	r3, #2
 8008230:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008232:	2300      	movs	r3, #0
 8008234:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008236:	2300      	movs	r3, #0
 8008238:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800823a:	2302      	movs	r3, #2
 800823c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800823e:	f107 030c 	add.w	r3, r7, #12
 8008242:	4619      	mov	r1, r3
 8008244:	481b      	ldr	r0, [pc, #108]	; (80082b4 <HAL_TIM_MspPostInit+0x174>)
 8008246:	f7f8 fb73 	bl	8000930 <HAL_GPIO_Init>
}
 800824a:	e02b      	b.n	80082a4 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM8)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a1d      	ldr	r2, [pc, #116]	; (80082c8 <HAL_TIM_MspPostInit+0x188>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d111      	bne.n	800827a <HAL_TIM_MspPostInit+0x13a>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8008256:	f44f 7350 	mov.w	r3, #832	; 0x340
 800825a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800825c:	2302      	movs	r3, #2
 800825e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008260:	2300      	movs	r3, #0
 8008262:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008264:	2300      	movs	r3, #0
 8008266:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8008268:	2303      	movs	r3, #3
 800826a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800826c:	f107 030c 	add.w	r3, r7, #12
 8008270:	4619      	mov	r1, r3
 8008272:	4816      	ldr	r0, [pc, #88]	; (80082cc <HAL_TIM_MspPostInit+0x18c>)
 8008274:	f7f8 fb5c 	bl	8000930 <HAL_GPIO_Init>
}
 8008278:	e014      	b.n	80082a4 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM9)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a14      	ldr	r2, [pc, #80]	; (80082d0 <HAL_TIM_MspPostInit+0x190>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d10f      	bne.n	80082a4 <HAL_TIM_MspPostInit+0x164>
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8008284:	2360      	movs	r3, #96	; 0x60
 8008286:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008288:	2302      	movs	r3, #2
 800828a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800828c:	2300      	movs	r3, #0
 800828e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008290:	2300      	movs	r3, #0
 8008292:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8008294:	2303      	movs	r3, #3
 8008296:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008298:	f107 030c 	add.w	r3, r7, #12
 800829c:	4619      	mov	r1, r3
 800829e:	4804      	ldr	r0, [pc, #16]	; (80082b0 <HAL_TIM_MspPostInit+0x170>)
 80082a0:	f7f8 fb46 	bl	8000930 <HAL_GPIO_Init>
}
 80082a4:	bf00      	nop
 80082a6:	3720      	adds	r7, #32
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}
 80082ac:	40010000 	.word	0x40010000
 80082b0:	40021000 	.word	0x40021000
 80082b4:	40020000 	.word	0x40020000
 80082b8:	40020400 	.word	0x40020400
 80082bc:	40000400 	.word	0x40000400
 80082c0:	40000800 	.word	0x40000800
 80082c4:	40000c00 	.word	0x40000c00
 80082c8:	40010400 	.word	0x40010400
 80082cc:	40020800 	.word	0x40020800
 80082d0:	40014000 	.word	0x40014000

080082d4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80082d8:	f7f8 f9ae 	bl	8000638 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80082dc:	f7f8 fb1a 	bl	8000914 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80082e0:	bf00      	nop
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <TIM6_DAC_IRQHandler>:

/**
* @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
*/
void TIM6_DAC_IRQHandler(void)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80082e8:	4803      	ldr	r0, [pc, #12]	; (80082f8 <TIM6_DAC_IRQHandler+0x14>)
 80082ea:	f7fb f9ed 	bl	80036c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

	tim6_IRQ();
 80082ee:	f7fe ffb9 	bl	8007264 <tim6_IRQ>

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80082f2:	bf00      	nop
 80082f4:	bd80      	pop	{r7, pc}
 80082f6:	bf00      	nop
 80082f8:	20000558 	.word	0x20000558

080082fc <OTG_FS_IRQHandler>:

/**
* @brief This function handles USB On The Go FS global interrupt.
*/
void OTG_FS_IRQHandler(void)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8008300:	4802      	ldr	r0, [pc, #8]	; (800830c <OTG_FS_IRQHandler+0x10>)
 8008302:	f7f9 fbb3 	bl	8001a6c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8008306:	bf00      	nop
 8008308:	bd80      	pop	{r7, pc}
 800830a:	bf00      	nop
 800830c:	2001d784 	.word	0x2001d784

08008310 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008310:	b480      	push	{r7}
 8008312:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008314:	4b16      	ldr	r3, [pc, #88]	; (8008370 <SystemInit+0x60>)
 8008316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800831a:	4a15      	ldr	r2, [pc, #84]	; (8008370 <SystemInit+0x60>)
 800831c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008320:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8008324:	4b13      	ldr	r3, [pc, #76]	; (8008374 <SystemInit+0x64>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a12      	ldr	r2, [pc, #72]	; (8008374 <SystemInit+0x64>)
 800832a:	f043 0301 	orr.w	r3, r3, #1
 800832e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008330:	4b10      	ldr	r3, [pc, #64]	; (8008374 <SystemInit+0x64>)
 8008332:	2200      	movs	r2, #0
 8008334:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8008336:	4b0f      	ldr	r3, [pc, #60]	; (8008374 <SystemInit+0x64>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a0e      	ldr	r2, [pc, #56]	; (8008374 <SystemInit+0x64>)
 800833c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8008340:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008344:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8008346:	4b0b      	ldr	r3, [pc, #44]	; (8008374 <SystemInit+0x64>)
 8008348:	4a0b      	ldr	r2, [pc, #44]	; (8008378 <SystemInit+0x68>)
 800834a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800834c:	4b09      	ldr	r3, [pc, #36]	; (8008374 <SystemInit+0x64>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a08      	ldr	r2, [pc, #32]	; (8008374 <SystemInit+0x64>)
 8008352:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008356:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8008358:	4b06      	ldr	r3, [pc, #24]	; (8008374 <SystemInit+0x64>)
 800835a:	2200      	movs	r2, #0
 800835c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800835e:	4b04      	ldr	r3, [pc, #16]	; (8008370 <SystemInit+0x60>)
 8008360:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008364:	609a      	str	r2, [r3, #8]
#endif
}
 8008366:	bf00      	nop
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr
 8008370:	e000ed00 	.word	0xe000ed00
 8008374:	40023800 	.word	0x40023800
 8008378:	24003010 	.word	0x24003010

0800837c <jsonStringReceived>:

static JsonObject_t *currentObject;
static JsonObject_t *objectsStack[JSON_MAX_LEVELS];

static void jsonStringReceived()
{
 800837c:	b580      	push	{r7, lr}
 800837e:	af00      	add	r7, sp, #0
	if(currentObject && currentObject->stringReceived)
 8008380:	4b0c      	ldr	r3, [pc, #48]	; (80083b4 <jsonStringReceived+0x38>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d012      	beq.n	80083ae <jsonStringReceived+0x32>
 8008388:	4b0a      	ldr	r3, [pc, #40]	; (80083b4 <jsonStringReceived+0x38>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	68db      	ldr	r3, [r3, #12]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d00d      	beq.n	80083ae <jsonStringReceived+0x32>
		currentObject->stringReceived(jsonDecodedString[jsonCurrentLevel], jsonStringValueDecoded);
 8008392:	4b08      	ldr	r3, [pc, #32]	; (80083b4 <jsonStringReceived+0x38>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	68db      	ldr	r3, [r3, #12]
 8008398:	4a07      	ldr	r2, [pc, #28]	; (80083b8 <jsonStringReceived+0x3c>)
 800839a:	7812      	ldrb	r2, [r2, #0]
 800839c:	4611      	mov	r1, r2
 800839e:	2232      	movs	r2, #50	; 0x32
 80083a0:	fb01 f202 	mul.w	r2, r1, r2
 80083a4:	4905      	ldr	r1, [pc, #20]	; (80083bc <jsonStringReceived+0x40>)
 80083a6:	440a      	add	r2, r1
 80083a8:	4905      	ldr	r1, [pc, #20]	; (80083c0 <jsonStringReceived+0x44>)
 80083aa:	4610      	mov	r0, r2
 80083ac:	4798      	blx	r3
}
 80083ae:	bf00      	nop
 80083b0:	bd80      	pop	{r7, pc}
 80083b2:	bf00      	nop
 80083b4:	2001bfe0 	.word	0x2001bfe0
 80083b8:	2001bfde 	.word	0x2001bfde
 80083bc:	2001bedc 	.word	0x2001bedc
 80083c0:	2001bea8 	.word	0x2001bea8

080083c4 <jsonNumberReceived>:

static void jsonNumberReceived()
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	af00      	add	r7, sp, #0
	if(currentObject && currentObject->numberReceived)
 80083c8:	4b0c      	ldr	r3, [pc, #48]	; (80083fc <jsonNumberReceived+0x38>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d013      	beq.n	80083f8 <jsonNumberReceived+0x34>
 80083d0:	4b0a      	ldr	r3, [pc, #40]	; (80083fc <jsonNumberReceived+0x38>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d00e      	beq.n	80083f8 <jsonNumberReceived+0x34>
		currentObject->numberReceived(jsonDecodedString[jsonCurrentLevel], jsonNumberDecoded);
 80083da:	4b08      	ldr	r3, [pc, #32]	; (80083fc <jsonNumberReceived+0x38>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	4a07      	ldr	r2, [pc, #28]	; (8008400 <jsonNumberReceived+0x3c>)
 80083e2:	7812      	ldrb	r2, [r2, #0]
 80083e4:	4611      	mov	r1, r2
 80083e6:	2232      	movs	r2, #50	; 0x32
 80083e8:	fb01 f202 	mul.w	r2, r1, r2
 80083ec:	4905      	ldr	r1, [pc, #20]	; (8008404 <jsonNumberReceived+0x40>)
 80083ee:	440a      	add	r2, r1
 80083f0:	4905      	ldr	r1, [pc, #20]	; (8008408 <jsonNumberReceived+0x44>)
 80083f2:	6809      	ldr	r1, [r1, #0]
 80083f4:	4610      	mov	r0, r2
 80083f6:	4798      	blx	r3
}
 80083f8:	bf00      	nop
 80083fa:	bd80      	pop	{r7, pc}
 80083fc:	2001bfe0 	.word	0x2001bfe0
 8008400:	2001bfde 	.word	0x2001bfde
 8008404:	2001bedc 	.word	0x2001bedc
 8008408:	2001bea0 	.word	0x2001bea0

0800840c <jsonStartOfObject>:

static void jsonStartOfObject()
{
 800840c:	b580      	push	{r7, lr}
 800840e:	af00      	add	r7, sp, #0
	objectsStack[jsonCurrentLevel] = currentObject;
 8008410:	4b13      	ldr	r3, [pc, #76]	; (8008460 <jsonStartOfObject+0x54>)
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	4619      	mov	r1, r3
 8008416:	4b13      	ldr	r3, [pc, #76]	; (8008464 <jsonStartOfObject+0x58>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a13      	ldr	r2, [pc, #76]	; (8008468 <jsonStartOfObject+0x5c>)
 800841c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	if(currentObject && currentObject->objectStart)
 8008420:	4b10      	ldr	r3, [pc, #64]	; (8008464 <jsonStartOfObject+0x58>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d015      	beq.n	8008454 <jsonStartOfObject+0x48>
 8008428:	4b0e      	ldr	r3, [pc, #56]	; (8008464 <jsonStartOfObject+0x58>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d010      	beq.n	8008454 <jsonStartOfObject+0x48>
		currentObject = currentObject->objectStart(jsonDecodedString[jsonCurrentLevel]);
 8008432:	4b0c      	ldr	r3, [pc, #48]	; (8008464 <jsonStartOfObject+0x58>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a09      	ldr	r2, [pc, #36]	; (8008460 <jsonStartOfObject+0x54>)
 800843a:	7812      	ldrb	r2, [r2, #0]
 800843c:	4611      	mov	r1, r2
 800843e:	2232      	movs	r2, #50	; 0x32
 8008440:	fb01 f202 	mul.w	r2, r1, r2
 8008444:	4909      	ldr	r1, [pc, #36]	; (800846c <jsonStartOfObject+0x60>)
 8008446:	440a      	add	r2, r1
 8008448:	4610      	mov	r0, r2
 800844a:	4798      	blx	r3
 800844c:	4603      	mov	r3, r0
 800844e:	4a05      	ldr	r2, [pc, #20]	; (8008464 <jsonStartOfObject+0x58>)
 8008450:	6013      	str	r3, [r2, #0]
 8008452:	e003      	b.n	800845c <jsonStartOfObject+0x50>
	else
		currentObject = NULL;
 8008454:	4b03      	ldr	r3, [pc, #12]	; (8008464 <jsonStartOfObject+0x58>)
 8008456:	2200      	movs	r2, #0
 8008458:	601a      	str	r2, [r3, #0]
}
 800845a:	bf00      	nop
 800845c:	bf00      	nop
 800845e:	bd80      	pop	{r7, pc}
 8008460:	2001bfde 	.word	0x2001bfde
 8008464:	2001bfe0 	.word	0x2001bfe0
 8008468:	2001bfe4 	.word	0x2001bfe4
 800846c:	2001bedc 	.word	0x2001bedc

08008470 <jsonArrayStringReceived>:


static void jsonArrayStringReceived()
{
 8008470:	b580      	push	{r7, lr}
 8008472:	af00      	add	r7, sp, #0
	if(currentObject && currentObject->arrayStringReceived)
 8008474:	4b0e      	ldr	r3, [pc, #56]	; (80084b0 <jsonArrayStringReceived+0x40>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d017      	beq.n	80084ac <jsonArrayStringReceived+0x3c>
 800847c:	4b0c      	ldr	r3, [pc, #48]	; (80084b0 <jsonArrayStringReceived+0x40>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	695b      	ldr	r3, [r3, #20]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d012      	beq.n	80084ac <jsonArrayStringReceived+0x3c>
		currentObject->arrayStringReceived(jsonDecodedString[jsonCurrentLevel], jsonStringValueDecoded, jsonArrayValuePosition[jsonCurrentLevel]);
 8008486:	4b0a      	ldr	r3, [pc, #40]	; (80084b0 <jsonArrayStringReceived+0x40>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	695b      	ldr	r3, [r3, #20]
 800848c:	4a09      	ldr	r2, [pc, #36]	; (80084b4 <jsonArrayStringReceived+0x44>)
 800848e:	7812      	ldrb	r2, [r2, #0]
 8008490:	4611      	mov	r1, r2
 8008492:	2232      	movs	r2, #50	; 0x32
 8008494:	fb01 f202 	mul.w	r2, r1, r2
 8008498:	4907      	ldr	r1, [pc, #28]	; (80084b8 <jsonArrayStringReceived+0x48>)
 800849a:	1850      	adds	r0, r2, r1
 800849c:	4a05      	ldr	r2, [pc, #20]	; (80084b4 <jsonArrayStringReceived+0x44>)
 800849e:	7812      	ldrb	r2, [r2, #0]
 80084a0:	4611      	mov	r1, r2
 80084a2:	4a06      	ldr	r2, [pc, #24]	; (80084bc <jsonArrayStringReceived+0x4c>)
 80084a4:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80084a8:	4905      	ldr	r1, [pc, #20]	; (80084c0 <jsonArrayStringReceived+0x50>)
 80084aa:	4798      	blx	r3
}
 80084ac:	bf00      	nop
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	2001bfe0 	.word	0x2001bfe0
 80084b4:	2001bfde 	.word	0x2001bfde
 80084b8:	2001bedc 	.word	0x2001bedc
 80084bc:	2001be94 	.word	0x2001be94
 80084c0:	2001bea8 	.word	0x2001bea8

080084c4 <jsonArrayNumberReceived>:

static void jsonArrayNumberReceived()
{
 80084c4:	b598      	push	{r3, r4, r7, lr}
 80084c6:	af00      	add	r7, sp, #0
	if(currentObject && currentObject->arrayNumberReceived)
 80084c8:	4b0f      	ldr	r3, [pc, #60]	; (8008508 <jsonArrayNumberReceived+0x44>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d018      	beq.n	8008502 <jsonArrayNumberReceived+0x3e>
 80084d0:	4b0d      	ldr	r3, [pc, #52]	; (8008508 <jsonArrayNumberReceived+0x44>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	691b      	ldr	r3, [r3, #16]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d013      	beq.n	8008502 <jsonArrayNumberReceived+0x3e>
		currentObject->arrayNumberReceived(jsonDecodedString[jsonCurrentLevel], jsonNumberDecoded, jsonArrayValuePosition[jsonCurrentLevel]);
 80084da:	4b0b      	ldr	r3, [pc, #44]	; (8008508 <jsonArrayNumberReceived+0x44>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	691b      	ldr	r3, [r3, #16]
 80084e0:	4a0a      	ldr	r2, [pc, #40]	; (800850c <jsonArrayNumberReceived+0x48>)
 80084e2:	7812      	ldrb	r2, [r2, #0]
 80084e4:	4611      	mov	r1, r2
 80084e6:	2232      	movs	r2, #50	; 0x32
 80084e8:	fb01 f202 	mul.w	r2, r1, r2
 80084ec:	4908      	ldr	r1, [pc, #32]	; (8008510 <jsonArrayNumberReceived+0x4c>)
 80084ee:	1850      	adds	r0, r2, r1
 80084f0:	4a08      	ldr	r2, [pc, #32]	; (8008514 <jsonArrayNumberReceived+0x50>)
 80084f2:	6811      	ldr	r1, [r2, #0]
 80084f4:	4a05      	ldr	r2, [pc, #20]	; (800850c <jsonArrayNumberReceived+0x48>)
 80084f6:	7812      	ldrb	r2, [r2, #0]
 80084f8:	4614      	mov	r4, r2
 80084fa:	4a07      	ldr	r2, [pc, #28]	; (8008518 <jsonArrayNumberReceived+0x54>)
 80084fc:	f832 2014 	ldrh.w	r2, [r2, r4, lsl #1]
 8008500:	4798      	blx	r3
}
 8008502:	bf00      	nop
 8008504:	bd98      	pop	{r3, r4, r7, pc}
 8008506:	bf00      	nop
 8008508:	2001bfe0 	.word	0x2001bfe0
 800850c:	2001bfde 	.word	0x2001bfde
 8008510:	2001bedc 	.word	0x2001bedc
 8008514:	2001bea0 	.word	0x2001bea0
 8008518:	2001be94 	.word	0x2001be94

0800851c <jsonArrayStartOfObject>:

static void jsonArrayStartOfObject()
{
 800851c:	b580      	push	{r7, lr}
 800851e:	af00      	add	r7, sp, #0
	objectsStack[jsonCurrentLevel] = currentObject;
 8008520:	4b16      	ldr	r3, [pc, #88]	; (800857c <jsonArrayStartOfObject+0x60>)
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	4619      	mov	r1, r3
 8008526:	4b16      	ldr	r3, [pc, #88]	; (8008580 <jsonArrayStartOfObject+0x64>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a16      	ldr	r2, [pc, #88]	; (8008584 <jsonArrayStartOfObject+0x68>)
 800852c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	if(currentObject && currentObject->arrayObjectStart)
 8008530:	4b13      	ldr	r3, [pc, #76]	; (8008580 <jsonArrayStartOfObject+0x64>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d01b      	beq.n	8008570 <jsonArrayStartOfObject+0x54>
 8008538:	4b11      	ldr	r3, [pc, #68]	; (8008580 <jsonArrayStartOfObject+0x64>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d016      	beq.n	8008570 <jsonArrayStartOfObject+0x54>
		currentObject = currentObject->arrayObjectStart(jsonDecodedString[jsonCurrentLevel], jsonArrayValuePosition[jsonCurrentLevel]);
 8008542:	4b0f      	ldr	r3, [pc, #60]	; (8008580 <jsonArrayStartOfObject+0x64>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	4a0c      	ldr	r2, [pc, #48]	; (800857c <jsonArrayStartOfObject+0x60>)
 800854a:	7812      	ldrb	r2, [r2, #0]
 800854c:	4611      	mov	r1, r2
 800854e:	2232      	movs	r2, #50	; 0x32
 8008550:	fb01 f202 	mul.w	r2, r1, r2
 8008554:	490c      	ldr	r1, [pc, #48]	; (8008588 <jsonArrayStartOfObject+0x6c>)
 8008556:	440a      	add	r2, r1
 8008558:	4908      	ldr	r1, [pc, #32]	; (800857c <jsonArrayStartOfObject+0x60>)
 800855a:	7809      	ldrb	r1, [r1, #0]
 800855c:	4608      	mov	r0, r1
 800855e:	490b      	ldr	r1, [pc, #44]	; (800858c <jsonArrayStartOfObject+0x70>)
 8008560:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
 8008564:	4610      	mov	r0, r2
 8008566:	4798      	blx	r3
 8008568:	4603      	mov	r3, r0
 800856a:	4a05      	ldr	r2, [pc, #20]	; (8008580 <jsonArrayStartOfObject+0x64>)
 800856c:	6013      	str	r3, [r2, #0]
 800856e:	e003      	b.n	8008578 <jsonArrayStartOfObject+0x5c>
	else
		currentObject = NULL;
 8008570:	4b03      	ldr	r3, [pc, #12]	; (8008580 <jsonArrayStartOfObject+0x64>)
 8008572:	2200      	movs	r2, #0
 8008574:	601a      	str	r2, [r3, #0]
}
 8008576:	bf00      	nop
 8008578:	bf00      	nop
 800857a:	bd80      	pop	{r7, pc}
 800857c:	2001bfde 	.word	0x2001bfde
 8008580:	2001bfe0 	.word	0x2001bfe0
 8008584:	2001bfe4 	.word	0x2001bfe4
 8008588:	2001bedc 	.word	0x2001bedc
 800858c:	2001be94 	.word	0x2001be94

08008590 <jsonParseObject>:


// We will receive all characters since an object has been detected. The first character will be "{" and we have to detect the end and report back
static enum JsonObjectResult jsonParseObject(char c, uint8_t currentLevel)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b082      	sub	sp, #8
 8008594:	af00      	add	r7, sp, #0
 8008596:	4603      	mov	r3, r0
 8008598:	460a      	mov	r2, r1
 800859a:	71fb      	strb	r3, [r7, #7]
 800859c:	4613      	mov	r3, r2
 800859e:	71bb      	strb	r3, [r7, #6]
	switch(jsonObjectStates[currentLevel])
 80085a0:	79bb      	ldrb	r3, [r7, #6]
 80085a2:	4aa5      	ldr	r2, [pc, #660]	; (8008838 <jsonParseObject+0x2a8>)
 80085a4:	5cd3      	ldrb	r3, [r2, r3]
 80085a6:	3b02      	subs	r3, #2
 80085a8:	2b0a      	cmp	r3, #10
 80085aa:	f200 81a3 	bhi.w	80088f4 <jsonParseObject+0x364>
 80085ae:	a201      	add	r2, pc, #4	; (adr r2, 80085b4 <jsonParseObject+0x24>)
 80085b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085b4:	080085e1 	.word	0x080085e1
 80085b8:	08008603 	.word	0x08008603
 80085bc:	080086d9 	.word	0x080086d9
 80085c0:	0800865b 	.word	0x0800865b
 80085c4:	0800866d 	.word	0x0800866d
 80085c8:	0800871d 	.word	0x0800871d
 80085cc:	080088d3 	.word	0x080088d3
 80085d0:	08008779 	.word	0x08008779
 80085d4:	080087cd 	.word	0x080087cd
 80085d8:	08008811 	.word	0x08008811
 80085dc:	08008897 	.word	0x08008897
	{
	// Wait for start of string
	case JSON_START:
		if(c == '"')
 80085e0:	79fb      	ldrb	r3, [r7, #7]
 80085e2:	2b22      	cmp	r3, #34	; 0x22
 80085e4:	d107      	bne.n	80085f6 <jsonParseObject+0x66>
		{
			// Start of a string
			jsonObjectStates[currentLevel] = JSON_NAME_STRING_DECODING;
 80085e6:	79bb      	ldrb	r3, [r7, #6]
 80085e8:	4a93      	ldr	r2, [pc, #588]	; (8008838 <jsonParseObject+0x2a8>)
 80085ea:	2103      	movs	r1, #3
 80085ec:	54d1      	strb	r1, [r2, r3]
			jsonDecodedStringPosition = 0;
 80085ee:	4b93      	ldr	r3, [pc, #588]	; (800883c <jsonParseObject+0x2ac>)
 80085f0:	2200      	movs	r2, #0
 80085f2:	701a      	strb	r2, [r3, #0]
		}
		else if(c == '}')
		{
			return JSON_END_OF_OBJECT;
		}
		break;
 80085f4:	e183      	b.n	80088fe <jsonParseObject+0x36e>
		else if(c == '}')
 80085f6:	79fb      	ldrb	r3, [r7, #7]
 80085f8:	2b7d      	cmp	r3, #125	; 0x7d
 80085fa:	f040 8180 	bne.w	80088fe <jsonParseObject+0x36e>
			return JSON_END_OF_OBJECT;
 80085fe:	2301      	movs	r3, #1
 8008600:	e193      	b.n	800892a <jsonParseObject+0x39a>

	case JSON_NAME_STRING_DECODING:
		if(c == '"')
 8008602:	79fb      	ldrb	r3, [r7, #7]
 8008604:	2b22      	cmp	r3, #34	; 0x22
 8008606:	d110      	bne.n	800862a <jsonParseObject+0x9a>
		{
			// Add end of string character
			jsonDecodedString[currentLevel][jsonDecodedStringPosition] = '\0';
 8008608:	79bb      	ldrb	r3, [r7, #6]
 800860a:	4a8c      	ldr	r2, [pc, #560]	; (800883c <jsonParseObject+0x2ac>)
 800860c:	7812      	ldrb	r2, [r2, #0]
 800860e:	4610      	mov	r0, r2
 8008610:	4a8b      	ldr	r2, [pc, #556]	; (8008840 <jsonParseObject+0x2b0>)
 8008612:	2132      	movs	r1, #50	; 0x32
 8008614:	fb01 f303 	mul.w	r3, r1, r3
 8008618:	4413      	add	r3, r2
 800861a:	4403      	add	r3, r0
 800861c:	2200      	movs	r2, #0
 800861e:	701a      	strb	r2, [r3, #0]

			jsonObjectStates[currentLevel] = JSON_WAIT_SEPARATOR;
 8008620:	79bb      	ldrb	r3, [r7, #6]
 8008622:	4a85      	ldr	r2, [pc, #532]	; (8008838 <jsonParseObject+0x2a8>)
 8008624:	2105      	movs	r1, #5
 8008626:	54d1      	strb	r1, [r2, r3]
			{
				jsonDecodedString[currentLevel][jsonDecodedStringPosition] = c;
				jsonDecodedStringPosition++;
			}
		}
		break;
 8008628:	e16b      	b.n	8008902 <jsonParseObject+0x372>
			if(jsonDecodedStringPosition < JSON_MAX_STRING_LENGTH - 1)
 800862a:	4b84      	ldr	r3, [pc, #528]	; (800883c <jsonParseObject+0x2ac>)
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	2b30      	cmp	r3, #48	; 0x30
 8008630:	f200 8167 	bhi.w	8008902 <jsonParseObject+0x372>
				jsonDecodedString[currentLevel][jsonDecodedStringPosition] = c;
 8008634:	79bb      	ldrb	r3, [r7, #6]
 8008636:	4a81      	ldr	r2, [pc, #516]	; (800883c <jsonParseObject+0x2ac>)
 8008638:	7812      	ldrb	r2, [r2, #0]
 800863a:	4610      	mov	r0, r2
 800863c:	4a80      	ldr	r2, [pc, #512]	; (8008840 <jsonParseObject+0x2b0>)
 800863e:	2132      	movs	r1, #50	; 0x32
 8008640:	fb01 f303 	mul.w	r3, r1, r3
 8008644:	4413      	add	r3, r2
 8008646:	4403      	add	r3, r0
 8008648:	79fa      	ldrb	r2, [r7, #7]
 800864a:	701a      	strb	r2, [r3, #0]
				jsonDecodedStringPosition++;
 800864c:	4b7b      	ldr	r3, [pc, #492]	; (800883c <jsonParseObject+0x2ac>)
 800864e:	781b      	ldrb	r3, [r3, #0]
 8008650:	3301      	adds	r3, #1
 8008652:	b2da      	uxtb	r2, r3
 8008654:	4b79      	ldr	r3, [pc, #484]	; (800883c <jsonParseObject+0x2ac>)
 8008656:	701a      	strb	r2, [r3, #0]
		break;
 8008658:	e153      	b.n	8008902 <jsonParseObject+0x372>

	case JSON_WAIT_SEPARATOR:
		if(c == ':')
 800865a:	79fb      	ldrb	r3, [r7, #7]
 800865c:	2b3a      	cmp	r3, #58	; 0x3a
 800865e:	f040 8152 	bne.w	8008906 <jsonParseObject+0x376>
		{
			jsonObjectStates[currentLevel] = JSON_CHOOSE_VALUE_TYPE;
 8008662:	79bb      	ldrb	r3, [r7, #6]
 8008664:	4a74      	ldr	r2, [pc, #464]	; (8008838 <jsonParseObject+0x2a8>)
 8008666:	2106      	movs	r1, #6
 8008668:	54d1      	strb	r1, [r2, r3]
		}
		break;
 800866a:	e14c      	b.n	8008906 <jsonParseObject+0x376>

	case JSON_CHOOSE_VALUE_TYPE:
		if(c == '{')
 800866c:	79fb      	ldrb	r3, [r7, #7]
 800866e:	2b7b      	cmp	r3, #123	; 0x7b
 8008670:	d105      	bne.n	800867e <jsonParseObject+0xee>
		{
			jsonObjectStates[currentLevel] = JSON_END_OR_NEW_VALUE;
 8008672:	79bb      	ldrb	r3, [r7, #6]
 8008674:	4a70      	ldr	r2, [pc, #448]	; (8008838 <jsonParseObject+0x2a8>)
 8008676:	2108      	movs	r1, #8
 8008678:	54d1      	strb	r1, [r2, r3]
			return JSON_NEW_OBJECT;
 800867a:	2302      	movs	r3, #2
 800867c:	e155      	b.n	800892a <jsonParseObject+0x39a>
		}
		else if(c == '"')
 800867e:	79fb      	ldrb	r3, [r7, #7]
 8008680:	2b22      	cmp	r3, #34	; 0x22
 8008682:	d107      	bne.n	8008694 <jsonParseObject+0x104>
		{
			jsonObjectStates[currentLevel] = JSON_STRING_DECODING;
 8008684:	79bb      	ldrb	r3, [r7, #6]
 8008686:	4a6c      	ldr	r2, [pc, #432]	; (8008838 <jsonParseObject+0x2a8>)
 8008688:	2104      	movs	r1, #4
 800868a:	54d1      	strb	r1, [r2, r3]
			jsonStringValueDecodedPosition = 0;
 800868c:	4b6d      	ldr	r3, [pc, #436]	; (8008844 <jsonParseObject+0x2b4>)
 800868e:	2200      	movs	r2, #0
 8008690:	701a      	strb	r2, [r3, #0]
		{
			jsonObjectStates[currentLevel] = JSON_NUMBER_DECODING;
			// Store the first digit in the decoded value (-48 : refer to ASCII table)
			jsonNumberDecoded = c - 48;
		}
		break;
 8008692:	e13a      	b.n	800890a <jsonParseObject+0x37a>
		else if(c == '[')
 8008694:	79fb      	ldrb	r3, [r7, #7]
 8008696:	2b5b      	cmp	r3, #91	; 0x5b
 8008698:	d10c      	bne.n	80086b4 <jsonParseObject+0x124>
			jsonObjectStates[currentLevel] = JSON_ARRAY_CHOOSE_VALUE_TYPE;
 800869a:	79bb      	ldrb	r3, [r7, #6]
 800869c:	4a66      	ldr	r2, [pc, #408]	; (8008838 <jsonParseObject+0x2a8>)
 800869e:	2109      	movs	r1, #9
 80086a0:	54d1      	strb	r1, [r2, r3]
			jsonArrayValuePosition[currentLevel] = 0;
 80086a2:	79bb      	ldrb	r3, [r7, #6]
 80086a4:	4a68      	ldr	r2, [pc, #416]	; (8008848 <jsonParseObject+0x2b8>)
 80086a6:	2100      	movs	r1, #0
 80086a8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			jsonNumberDecoded = 0;
 80086ac:	4b67      	ldr	r3, [pc, #412]	; (800884c <jsonParseObject+0x2bc>)
 80086ae:	2200      	movs	r2, #0
 80086b0:	601a      	str	r2, [r3, #0]
		break;
 80086b2:	e12a      	b.n	800890a <jsonParseObject+0x37a>
		else if(c >= '0' && c <= '9')
 80086b4:	79fb      	ldrb	r3, [r7, #7]
 80086b6:	2b2f      	cmp	r3, #47	; 0x2f
 80086b8:	f240 8127 	bls.w	800890a <jsonParseObject+0x37a>
 80086bc:	79fb      	ldrb	r3, [r7, #7]
 80086be:	2b39      	cmp	r3, #57	; 0x39
 80086c0:	f200 8123 	bhi.w	800890a <jsonParseObject+0x37a>
			jsonObjectStates[currentLevel] = JSON_NUMBER_DECODING;
 80086c4:	79bb      	ldrb	r3, [r7, #6]
 80086c6:	4a5c      	ldr	r2, [pc, #368]	; (8008838 <jsonParseObject+0x2a8>)
 80086c8:	2107      	movs	r1, #7
 80086ca:	54d1      	strb	r1, [r2, r3]
			jsonNumberDecoded = c - 48;
 80086cc:	79fb      	ldrb	r3, [r7, #7]
 80086ce:	3b30      	subs	r3, #48	; 0x30
 80086d0:	461a      	mov	r2, r3
 80086d2:	4b5e      	ldr	r3, [pc, #376]	; (800884c <jsonParseObject+0x2bc>)
 80086d4:	601a      	str	r2, [r3, #0]
		break;
 80086d6:	e118      	b.n	800890a <jsonParseObject+0x37a>

	case JSON_STRING_DECODING:
		if(c == '"')
 80086d8:	79fb      	ldrb	r3, [r7, #7]
 80086da:	2b22      	cmp	r3, #34	; 0x22
 80086dc:	d10c      	bne.n	80086f8 <jsonParseObject+0x168>
		{
			// Add end of string character
			jsonStringValueDecoded[jsonStringValueDecodedPosition] = '\0';
 80086de:	4b59      	ldr	r3, [pc, #356]	; (8008844 <jsonParseObject+0x2b4>)
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	461a      	mov	r2, r3
 80086e4:	4b5a      	ldr	r3, [pc, #360]	; (8008850 <jsonParseObject+0x2c0>)
 80086e6:	2100      	movs	r1, #0
 80086e8:	5499      	strb	r1, [r3, r2]

			// Validate data
			jsonStringReceived();
 80086ea:	f7ff fe47 	bl	800837c <jsonStringReceived>

			jsonObjectStates[currentLevel] = JSON_END_OR_NEW_VALUE;
 80086ee:	79bb      	ldrb	r3, [r7, #6]
 80086f0:	4a51      	ldr	r2, [pc, #324]	; (8008838 <jsonParseObject+0x2a8>)
 80086f2:	2108      	movs	r1, #8
 80086f4:	54d1      	strb	r1, [r2, r3]
			{
				jsonStringValueDecoded[jsonStringValueDecodedPosition] = c;
				jsonStringValueDecodedPosition++;
			}
		}
		break;
 80086f6:	e10a      	b.n	800890e <jsonParseObject+0x37e>
			if(jsonStringValueDecodedPosition < JSON_MAX_STRING_LENGTH - 1)
 80086f8:	4b52      	ldr	r3, [pc, #328]	; (8008844 <jsonParseObject+0x2b4>)
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	2b30      	cmp	r3, #48	; 0x30
 80086fe:	f200 8106 	bhi.w	800890e <jsonParseObject+0x37e>
				jsonStringValueDecoded[jsonStringValueDecodedPosition] = c;
 8008702:	4b50      	ldr	r3, [pc, #320]	; (8008844 <jsonParseObject+0x2b4>)
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	4619      	mov	r1, r3
 8008708:	4a51      	ldr	r2, [pc, #324]	; (8008850 <jsonParseObject+0x2c0>)
 800870a:	79fb      	ldrb	r3, [r7, #7]
 800870c:	5453      	strb	r3, [r2, r1]
				jsonStringValueDecodedPosition++;
 800870e:	4b4d      	ldr	r3, [pc, #308]	; (8008844 <jsonParseObject+0x2b4>)
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	3301      	adds	r3, #1
 8008714:	b2da      	uxtb	r2, r3
 8008716:	4b4b      	ldr	r3, [pc, #300]	; (8008844 <jsonParseObject+0x2b4>)
 8008718:	701a      	strb	r2, [r3, #0]
		break;
 800871a:	e0f8      	b.n	800890e <jsonParseObject+0x37e>

	case JSON_NUMBER_DECODING:
		// A new value will be given for this level
		if(c == ',')
 800871c:	79fb      	ldrb	r3, [r7, #7]
 800871e:	2b2c      	cmp	r3, #44	; 0x2c
 8008720:	d106      	bne.n	8008730 <jsonParseObject+0x1a0>
		{
			// Validate number
			jsonNumberReceived();
 8008722:	f7ff fe4f 	bl	80083c4 <jsonNumberReceived>

			jsonObjectStates[currentLevel] = JSON_START;
 8008726:	79bb      	ldrb	r3, [r7, #6]
 8008728:	4a43      	ldr	r2, [pc, #268]	; (8008838 <jsonParseObject+0x2a8>)
 800872a:	2102      	movs	r1, #2
 800872c:	54d1      	strb	r1, [r2, r3]
		{
			jsonNumberDecoded *= 10;
			// Subtract 48 to c to get the actual number value (ASCII table)
			jsonNumberDecoded += (c - 48);
		}
		break;
 800872e:	e0f0      	b.n	8008912 <jsonParseObject+0x382>
		else if(c == '}')
 8008730:	79fb      	ldrb	r3, [r7, #7]
 8008732:	2b7d      	cmp	r3, #125	; 0x7d
 8008734:	d107      	bne.n	8008746 <jsonParseObject+0x1b6>
			jsonNumberReceived();
 8008736:	f7ff fe45 	bl	80083c4 <jsonNumberReceived>
			jsonObjectStates[currentLevel] = JSON_START;
 800873a:	79bb      	ldrb	r3, [r7, #6]
 800873c:	4a3e      	ldr	r2, [pc, #248]	; (8008838 <jsonParseObject+0x2a8>)
 800873e:	2102      	movs	r1, #2
 8008740:	54d1      	strb	r1, [r2, r3]
			return JSON_END_OF_OBJECT;
 8008742:	2301      	movs	r3, #1
 8008744:	e0f1      	b.n	800892a <jsonParseObject+0x39a>
		else if(c >= '0' && c <= '9')
 8008746:	79fb      	ldrb	r3, [r7, #7]
 8008748:	2b2f      	cmp	r3, #47	; 0x2f
 800874a:	f240 80e2 	bls.w	8008912 <jsonParseObject+0x382>
 800874e:	79fb      	ldrb	r3, [r7, #7]
 8008750:	2b39      	cmp	r3, #57	; 0x39
 8008752:	f200 80de 	bhi.w	8008912 <jsonParseObject+0x382>
			jsonNumberDecoded *= 10;
 8008756:	4b3d      	ldr	r3, [pc, #244]	; (800884c <jsonParseObject+0x2bc>)
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	4613      	mov	r3, r2
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	4413      	add	r3, r2
 8008760:	005b      	lsls	r3, r3, #1
 8008762:	461a      	mov	r2, r3
 8008764:	4b39      	ldr	r3, [pc, #228]	; (800884c <jsonParseObject+0x2bc>)
 8008766:	601a      	str	r2, [r3, #0]
			jsonNumberDecoded += (c - 48);
 8008768:	79fa      	ldrb	r2, [r7, #7]
 800876a:	4b38      	ldr	r3, [pc, #224]	; (800884c <jsonParseObject+0x2bc>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4413      	add	r3, r2
 8008770:	3b30      	subs	r3, #48	; 0x30
 8008772:	4a36      	ldr	r2, [pc, #216]	; (800884c <jsonParseObject+0x2bc>)
 8008774:	6013      	str	r3, [r2, #0]
		break;
 8008776:	e0cc      	b.n	8008912 <jsonParseObject+0x382>


	case JSON_ARRAY_CHOOSE_VALUE_TYPE:
		if(c == '{')
 8008778:	79fb      	ldrb	r3, [r7, #7]
 800877a:	2b7b      	cmp	r3, #123	; 0x7b
 800877c:	d105      	bne.n	800878a <jsonParseObject+0x1fa>
		{
			jsonObjectStates[currentLevel] = JSON_ARRAY_END_OR_NEW_VALUE;
 800877e:	79bb      	ldrb	r3, [r7, #6]
 8008780:	4a2d      	ldr	r2, [pc, #180]	; (8008838 <jsonParseObject+0x2a8>)
 8008782:	210c      	movs	r1, #12
 8008784:	54d1      	strb	r1, [r2, r3]
			return JSON_NEW_OBJECT;
 8008786:	2302      	movs	r3, #2
 8008788:	e0cf      	b.n	800892a <jsonParseObject+0x39a>
		}
		else if(c == '"')
 800878a:	79fb      	ldrb	r3, [r7, #7]
 800878c:	2b22      	cmp	r3, #34	; 0x22
 800878e:	d107      	bne.n	80087a0 <jsonParseObject+0x210>
		{
			jsonObjectStates[currentLevel] = JSON_ARRAY_STRING_DECODING;
 8008790:	79bb      	ldrb	r3, [r7, #6]
 8008792:	4a29      	ldr	r2, [pc, #164]	; (8008838 <jsonParseObject+0x2a8>)
 8008794:	210a      	movs	r1, #10
 8008796:	54d1      	strb	r1, [r2, r3]
			jsonStringValueDecodedPosition = 0;
 8008798:	4b2a      	ldr	r3, [pc, #168]	; (8008844 <jsonParseObject+0x2b4>)
 800879a:	2200      	movs	r2, #0
 800879c:	701a      	strb	r2, [r3, #0]
		{
			jsonObjectStates[currentLevel] = JSON_ARRAY_NUMBER_DECODING;
			// Store the first digit in the decoded value (-48 : refer to ASCII table)
			jsonNumberDecoded = c - 48;
		}
		break;
 800879e:	e0ba      	b.n	8008916 <jsonParseObject+0x386>
		else if(c == '[')
 80087a0:	79fb      	ldrb	r3, [r7, #7]
 80087a2:	2b5b      	cmp	r3, #91	; 0x5b
 80087a4:	f000 80b7 	beq.w	8008916 <jsonParseObject+0x386>
		else if(c >= '0' && c <= '9')
 80087a8:	79fb      	ldrb	r3, [r7, #7]
 80087aa:	2b2f      	cmp	r3, #47	; 0x2f
 80087ac:	f240 80b3 	bls.w	8008916 <jsonParseObject+0x386>
 80087b0:	79fb      	ldrb	r3, [r7, #7]
 80087b2:	2b39      	cmp	r3, #57	; 0x39
 80087b4:	f200 80af 	bhi.w	8008916 <jsonParseObject+0x386>
			jsonObjectStates[currentLevel] = JSON_ARRAY_NUMBER_DECODING;
 80087b8:	79bb      	ldrb	r3, [r7, #6]
 80087ba:	4a1f      	ldr	r2, [pc, #124]	; (8008838 <jsonParseObject+0x2a8>)
 80087bc:	210b      	movs	r1, #11
 80087be:	54d1      	strb	r1, [r2, r3]
			jsonNumberDecoded = c - 48;
 80087c0:	79fb      	ldrb	r3, [r7, #7]
 80087c2:	3b30      	subs	r3, #48	; 0x30
 80087c4:	461a      	mov	r2, r3
 80087c6:	4b21      	ldr	r3, [pc, #132]	; (800884c <jsonParseObject+0x2bc>)
 80087c8:	601a      	str	r2, [r3, #0]
		break;
 80087ca:	e0a4      	b.n	8008916 <jsonParseObject+0x386>

	case JSON_ARRAY_STRING_DECODING:
		if(c == '"')
 80087cc:	79fb      	ldrb	r3, [r7, #7]
 80087ce:	2b22      	cmp	r3, #34	; 0x22
 80087d0:	d10c      	bne.n	80087ec <jsonParseObject+0x25c>
		{
			// Add end of string character
			jsonStringValueDecoded[jsonStringValueDecodedPosition] = '\0';
 80087d2:	4b1c      	ldr	r3, [pc, #112]	; (8008844 <jsonParseObject+0x2b4>)
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	461a      	mov	r2, r3
 80087d8:	4b1d      	ldr	r3, [pc, #116]	; (8008850 <jsonParseObject+0x2c0>)
 80087da:	2100      	movs	r1, #0
 80087dc:	5499      	strb	r1, [r3, r2]

			// Validate data
			jsonArrayStringReceived();
 80087de:	f7ff fe47 	bl	8008470 <jsonArrayStringReceived>

			jsonObjectStates[currentLevel] = JSON_ARRAY_END_OR_NEW_VALUE;
 80087e2:	79bb      	ldrb	r3, [r7, #6]
 80087e4:	4a14      	ldr	r2, [pc, #80]	; (8008838 <jsonParseObject+0x2a8>)
 80087e6:	210c      	movs	r1, #12
 80087e8:	54d1      	strb	r1, [r2, r3]
			{
				jsonStringValueDecoded[jsonStringValueDecodedPosition] = c;
				jsonStringValueDecodedPosition++;
			}
		}
		break;
 80087ea:	e096      	b.n	800891a <jsonParseObject+0x38a>
			if(jsonStringValueDecodedPosition < JSON_MAX_STRING_LENGTH - 1)
 80087ec:	4b15      	ldr	r3, [pc, #84]	; (8008844 <jsonParseObject+0x2b4>)
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	2b30      	cmp	r3, #48	; 0x30
 80087f2:	f200 8092 	bhi.w	800891a <jsonParseObject+0x38a>
				jsonStringValueDecoded[jsonStringValueDecodedPosition] = c;
 80087f6:	4b13      	ldr	r3, [pc, #76]	; (8008844 <jsonParseObject+0x2b4>)
 80087f8:	781b      	ldrb	r3, [r3, #0]
 80087fa:	4619      	mov	r1, r3
 80087fc:	4a14      	ldr	r2, [pc, #80]	; (8008850 <jsonParseObject+0x2c0>)
 80087fe:	79fb      	ldrb	r3, [r7, #7]
 8008800:	5453      	strb	r3, [r2, r1]
				jsonStringValueDecodedPosition++;
 8008802:	4b10      	ldr	r3, [pc, #64]	; (8008844 <jsonParseObject+0x2b4>)
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	3301      	adds	r3, #1
 8008808:	b2da      	uxtb	r2, r3
 800880a:	4b0e      	ldr	r3, [pc, #56]	; (8008844 <jsonParseObject+0x2b4>)
 800880c:	701a      	strb	r2, [r3, #0]
		break;
 800880e:	e084      	b.n	800891a <jsonParseObject+0x38a>

	case JSON_ARRAY_NUMBER_DECODING:
		// A new value will be given for this level
		if(c == ',')
 8008810:	79fb      	ldrb	r3, [r7, #7]
 8008812:	2b2c      	cmp	r3, #44	; 0x2c
 8008814:	d11e      	bne.n	8008854 <jsonParseObject+0x2c4>
		{
			// Validate number
			jsonArrayNumberReceived();
 8008816:	f7ff fe55 	bl	80084c4 <jsonArrayNumberReceived>
			jsonObjectStates[currentLevel] = JSON_ARRAY_CHOOSE_VALUE_TYPE;
 800881a:	79bb      	ldrb	r3, [r7, #6]
 800881c:	4a06      	ldr	r2, [pc, #24]	; (8008838 <jsonParseObject+0x2a8>)
 800881e:	2109      	movs	r1, #9
 8008820:	54d1      	strb	r1, [r2, r3]
			jsonArrayValuePosition[currentLevel]++;
 8008822:	79bb      	ldrb	r3, [r7, #6]
 8008824:	4a08      	ldr	r2, [pc, #32]	; (8008848 <jsonParseObject+0x2b8>)
 8008826:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800882a:	3201      	adds	r2, #1
 800882c:	b291      	uxth	r1, r2
 800882e:	4a06      	ldr	r2, [pc, #24]	; (8008848 <jsonParseObject+0x2b8>)
 8008830:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		{
			jsonNumberDecoded *= 10;
			// Subtract 48 to c to get the actual number value (ASCII table)
			jsonNumberDecoded += (c - 48);
		}
		break;
 8008834:	e073      	b.n	800891e <jsonParseObject+0x38e>
 8008836:	bf00      	nop
 8008838:	2001bfd8 	.word	0x2001bfd8
 800883c:	2001bfd6 	.word	0x2001bfd6
 8008840:	2001bedc 	.word	0x2001bedc
 8008844:	2001bea4 	.word	0x2001bea4
 8008848:	2001be94 	.word	0x2001be94
 800884c:	2001bea0 	.word	0x2001bea0
 8008850:	2001bea8 	.word	0x2001bea8
		else if(c == ']')
 8008854:	79fb      	ldrb	r3, [r7, #7]
 8008856:	2b5d      	cmp	r3, #93	; 0x5d
 8008858:	d106      	bne.n	8008868 <jsonParseObject+0x2d8>
			jsonArrayNumberReceived();
 800885a:	f7ff fe33 	bl	80084c4 <jsonArrayNumberReceived>
			jsonObjectStates[currentLevel] = JSON_END_OR_NEW_VALUE;
 800885e:	79bb      	ldrb	r3, [r7, #6]
 8008860:	4a34      	ldr	r2, [pc, #208]	; (8008934 <jsonParseObject+0x3a4>)
 8008862:	2108      	movs	r1, #8
 8008864:	54d1      	strb	r1, [r2, r3]
		break;
 8008866:	e05a      	b.n	800891e <jsonParseObject+0x38e>
		else if(c >= '0' && c <= '9')
 8008868:	79fb      	ldrb	r3, [r7, #7]
 800886a:	2b2f      	cmp	r3, #47	; 0x2f
 800886c:	d957      	bls.n	800891e <jsonParseObject+0x38e>
 800886e:	79fb      	ldrb	r3, [r7, #7]
 8008870:	2b39      	cmp	r3, #57	; 0x39
 8008872:	d854      	bhi.n	800891e <jsonParseObject+0x38e>
			jsonNumberDecoded *= 10;
 8008874:	4b30      	ldr	r3, [pc, #192]	; (8008938 <jsonParseObject+0x3a8>)
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	4613      	mov	r3, r2
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	4413      	add	r3, r2
 800887e:	005b      	lsls	r3, r3, #1
 8008880:	461a      	mov	r2, r3
 8008882:	4b2d      	ldr	r3, [pc, #180]	; (8008938 <jsonParseObject+0x3a8>)
 8008884:	601a      	str	r2, [r3, #0]
			jsonNumberDecoded += (c - 48);
 8008886:	79fa      	ldrb	r2, [r7, #7]
 8008888:	4b2b      	ldr	r3, [pc, #172]	; (8008938 <jsonParseObject+0x3a8>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4413      	add	r3, r2
 800888e:	3b30      	subs	r3, #48	; 0x30
 8008890:	4a29      	ldr	r2, [pc, #164]	; (8008938 <jsonParseObject+0x3a8>)
 8008892:	6013      	str	r3, [r2, #0]
		break;
 8008894:	e043      	b.n	800891e <jsonParseObject+0x38e>

	case JSON_ARRAY_END_OR_NEW_VALUE:

		if(c == ']')
 8008896:	79fb      	ldrb	r3, [r7, #7]
 8008898:	2b5d      	cmp	r3, #93	; 0x5d
 800889a:	d109      	bne.n	80088b0 <jsonParseObject+0x320>
		{
			jsonObjectStates[currentLevel] = JSON_END_OR_NEW_VALUE;
 800889c:	79bb      	ldrb	r3, [r7, #6]
 800889e:	4a25      	ldr	r2, [pc, #148]	; (8008934 <jsonParseObject+0x3a4>)
 80088a0:	2108      	movs	r1, #8
 80088a2:	54d1      	strb	r1, [r2, r3]
			jsonArrayValuePosition[currentLevel] = 0;
 80088a4:	79bb      	ldrb	r3, [r7, #6]
 80088a6:	4a25      	ldr	r2, [pc, #148]	; (800893c <jsonParseObject+0x3ac>)
 80088a8:	2100      	movs	r1, #0
 80088aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		else if(c == ',')
		{
			jsonObjectStates[currentLevel] = JSON_ARRAY_CHOOSE_VALUE_TYPE;
			jsonArrayValuePosition[currentLevel]++;
		}
		break;
 80088ae:	e038      	b.n	8008922 <jsonParseObject+0x392>
		else if(c == ',')
 80088b0:	79fb      	ldrb	r3, [r7, #7]
 80088b2:	2b2c      	cmp	r3, #44	; 0x2c
 80088b4:	d135      	bne.n	8008922 <jsonParseObject+0x392>
			jsonObjectStates[currentLevel] = JSON_ARRAY_CHOOSE_VALUE_TYPE;
 80088b6:	79bb      	ldrb	r3, [r7, #6]
 80088b8:	4a1e      	ldr	r2, [pc, #120]	; (8008934 <jsonParseObject+0x3a4>)
 80088ba:	2109      	movs	r1, #9
 80088bc:	54d1      	strb	r1, [r2, r3]
			jsonArrayValuePosition[currentLevel]++;
 80088be:	79bb      	ldrb	r3, [r7, #6]
 80088c0:	4a1e      	ldr	r2, [pc, #120]	; (800893c <jsonParseObject+0x3ac>)
 80088c2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80088c6:	3201      	adds	r2, #1
 80088c8:	b291      	uxth	r1, r2
 80088ca:	4a1c      	ldr	r2, [pc, #112]	; (800893c <jsonParseObject+0x3ac>)
 80088cc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		break;
 80088d0:	e027      	b.n	8008922 <jsonParseObject+0x392>


	case JSON_END_OR_NEW_VALUE:
		// A new value will be given for this level
		if(c == ',')
 80088d2:	79fb      	ldrb	r3, [r7, #7]
 80088d4:	2b2c      	cmp	r3, #44	; 0x2c
 80088d6:	d104      	bne.n	80088e2 <jsonParseObject+0x352>
		{
			jsonObjectStates[currentLevel] = JSON_START;
 80088d8:	79bb      	ldrb	r3, [r7, #6]
 80088da:	4a16      	ldr	r2, [pc, #88]	; (8008934 <jsonParseObject+0x3a4>)
 80088dc:	2102      	movs	r1, #2
 80088de:	54d1      	strb	r1, [r2, r3]
		else if(c == '}')
		{
			jsonObjectStates[currentLevel] = JSON_START;
			return JSON_END_OF_OBJECT;
		}
		break;
 80088e0:	e021      	b.n	8008926 <jsonParseObject+0x396>
		else if(c == '}')
 80088e2:	79fb      	ldrb	r3, [r7, #7]
 80088e4:	2b7d      	cmp	r3, #125	; 0x7d
 80088e6:	d11e      	bne.n	8008926 <jsonParseObject+0x396>
			jsonObjectStates[currentLevel] = JSON_START;
 80088e8:	79bb      	ldrb	r3, [r7, #6]
 80088ea:	4a12      	ldr	r2, [pc, #72]	; (8008934 <jsonParseObject+0x3a4>)
 80088ec:	2102      	movs	r1, #2
 80088ee:	54d1      	strb	r1, [r2, r3]
			return JSON_END_OF_OBJECT;
 80088f0:	2301      	movs	r3, #1
 80088f2:	e01a      	b.n	800892a <jsonParseObject+0x39a>

	default:
		jsonObjectStates[currentLevel] = JSON_IDLE;
 80088f4:	79bb      	ldrb	r3, [r7, #6]
 80088f6:	4a0f      	ldr	r2, [pc, #60]	; (8008934 <jsonParseObject+0x3a4>)
 80088f8:	2100      	movs	r1, #0
 80088fa:	54d1      	strb	r1, [r2, r3]
		break;
 80088fc:	e014      	b.n	8008928 <jsonParseObject+0x398>
		break;
 80088fe:	bf00      	nop
 8008900:	e012      	b.n	8008928 <jsonParseObject+0x398>
		break;
 8008902:	bf00      	nop
 8008904:	e010      	b.n	8008928 <jsonParseObject+0x398>
		break;
 8008906:	bf00      	nop
 8008908:	e00e      	b.n	8008928 <jsonParseObject+0x398>
		break;
 800890a:	bf00      	nop
 800890c:	e00c      	b.n	8008928 <jsonParseObject+0x398>
		break;
 800890e:	bf00      	nop
 8008910:	e00a      	b.n	8008928 <jsonParseObject+0x398>
		break;
 8008912:	bf00      	nop
 8008914:	e008      	b.n	8008928 <jsonParseObject+0x398>
		break;
 8008916:	bf00      	nop
 8008918:	e006      	b.n	8008928 <jsonParseObject+0x398>
		break;
 800891a:	bf00      	nop
 800891c:	e004      	b.n	8008928 <jsonParseObject+0x398>
		break;
 800891e:	bf00      	nop
 8008920:	e002      	b.n	8008928 <jsonParseObject+0x398>
		break;
 8008922:	bf00      	nop
 8008924:	e000      	b.n	8008928 <jsonParseObject+0x398>
		break;
 8008926:	bf00      	nop
	}

	return JSON_OK;
 8008928:	2300      	movs	r3, #0
}
 800892a:	4618      	mov	r0, r3
 800892c:	3708      	adds	r7, #8
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
 8008932:	bf00      	nop
 8008934:	2001bfd8 	.word	0x2001bfd8
 8008938:	2001bea0 	.word	0x2001bea0
 800893c:	2001be94 	.word	0x2001be94

08008940 <jsonDecoding>:


void jsonDecoding(uint8_t* buf, uint16_t len)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	460b      	mov	r3, r1
 800894a:	807b      	strh	r3, [r7, #2]
	uint16_t index;

	// Decode the partial json data
	for(index = 0; index < len; index++)
 800894c:	2300      	movs	r3, #0
 800894e:	81fb      	strh	r3, [r7, #14]
 8008950:	e06e      	b.n	8008a30 <jsonDecoding+0xf0>
	{
		// We only detect the main object at this stage, the decoding is done inside jsonParseObject
		char c = buf[index];
 8008952:	89fb      	ldrh	r3, [r7, #14]
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	4413      	add	r3, r2
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	737b      	strb	r3, [r7, #13]
		uint8_t result;

		switch(jsonMainDecoderState)
 800895c:	4b39      	ldr	r3, [pc, #228]	; (8008a44 <jsonDecoding+0x104>)
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d002      	beq.n	800896a <jsonDecoding+0x2a>
 8008964:	2b01      	cmp	r3, #1
 8008966:	d016      	beq.n	8008996 <jsonDecoding+0x56>
 8008968:	e058      	b.n	8008a1c <jsonDecoding+0xdc>
		{
		case JSON_IDLE:
			if(c == '{')
 800896a:	7b7b      	ldrb	r3, [r7, #13]
 800896c:	2b7b      	cmp	r3, #123	; 0x7b
 800896e:	d159      	bne.n	8008a24 <jsonDecoding+0xe4>
			{
				// Start of a json file
				jsonMainDecoderState = JSON_MAIN_OBJECT;
 8008970:	4b34      	ldr	r3, [pc, #208]	; (8008a44 <jsonDecoding+0x104>)
 8008972:	2201      	movs	r2, #1
 8008974:	701a      	strb	r2, [r3, #0]
				currentObject = &jsonMainObject;
 8008976:	4b34      	ldr	r3, [pc, #208]	; (8008a48 <jsonDecoding+0x108>)
 8008978:	4a34      	ldr	r2, [pc, #208]	; (8008a4c <jsonDecoding+0x10c>)
 800897a:	601a      	str	r2, [r3, #0]

				// Initialise the first object level
				jsonCurrentLevel = 0;
 800897c:	4b34      	ldr	r3, [pc, #208]	; (8008a50 <jsonDecoding+0x110>)
 800897e:	2200      	movs	r2, #0
 8008980:	701a      	strb	r2, [r3, #0]
				jsonObjectStates[jsonCurrentLevel] = JSON_START;
 8008982:	4b33      	ldr	r3, [pc, #204]	; (8008a50 <jsonDecoding+0x110>)
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	461a      	mov	r2, r3
 8008988:	4b32      	ldr	r3, [pc, #200]	; (8008a54 <jsonDecoding+0x114>)
 800898a:	2102      	movs	r1, #2
 800898c:	5499      	strb	r1, [r3, r2]
				jsonArrayValuePosition[0] = 0;
 800898e:	4b32      	ldr	r3, [pc, #200]	; (8008a58 <jsonDecoding+0x118>)
 8008990:	2200      	movs	r2, #0
 8008992:	801a      	strh	r2, [r3, #0]
			}
			break;
 8008994:	e046      	b.n	8008a24 <jsonDecoding+0xe4>

		case JSON_MAIN_OBJECT:
			result = jsonParseObject(c, jsonCurrentLevel);
 8008996:	4b2e      	ldr	r3, [pc, #184]	; (8008a50 <jsonDecoding+0x110>)
 8008998:	781a      	ldrb	r2, [r3, #0]
 800899a:	7b7b      	ldrb	r3, [r7, #13]
 800899c:	4611      	mov	r1, r2
 800899e:	4618      	mov	r0, r3
 80089a0:	f7ff fdf6 	bl	8008590 <jsonParseObject>
 80089a4:	4603      	mov	r3, r0
 80089a6:	733b      	strb	r3, [r7, #12]

			// The current object has finished
			if(result == JSON_END_OF_OBJECT)
 80089a8:	7b3b      	ldrb	r3, [r7, #12]
 80089aa:	2b01      	cmp	r3, #1
 80089ac:	d116      	bne.n	80089dc <jsonDecoding+0x9c>
			{
				// End of JSON file
				if(jsonCurrentLevel == 0)
 80089ae:	4b28      	ldr	r3, [pc, #160]	; (8008a50 <jsonDecoding+0x110>)
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d103      	bne.n	80089be <jsonDecoding+0x7e>
				{
					jsonMainDecoderState = JSON_IDLE;
 80089b6:	4b23      	ldr	r3, [pc, #140]	; (8008a44 <jsonDecoding+0x104>)
 80089b8:	2200      	movs	r2, #0
 80089ba:	701a      	strb	r2, [r3, #0]
					jsonCurrentLevel++;
					jsonObjectStates[jsonCurrentLevel] = JSON_START;
				}
			}

			break;
 80089bc:	e034      	b.n	8008a28 <jsonDecoding+0xe8>
					jsonCurrentLevel--;
 80089be:	4b24      	ldr	r3, [pc, #144]	; (8008a50 <jsonDecoding+0x110>)
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	3b01      	subs	r3, #1
 80089c4:	b2da      	uxtb	r2, r3
 80089c6:	4b22      	ldr	r3, [pc, #136]	; (8008a50 <jsonDecoding+0x110>)
 80089c8:	701a      	strb	r2, [r3, #0]
					currentObject = objectsStack[jsonCurrentLevel];
 80089ca:	4b21      	ldr	r3, [pc, #132]	; (8008a50 <jsonDecoding+0x110>)
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	461a      	mov	r2, r3
 80089d0:	4b22      	ldr	r3, [pc, #136]	; (8008a5c <jsonDecoding+0x11c>)
 80089d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089d6:	4a1c      	ldr	r2, [pc, #112]	; (8008a48 <jsonDecoding+0x108>)
 80089d8:	6013      	str	r3, [r2, #0]
			break;
 80089da:	e025      	b.n	8008a28 <jsonDecoding+0xe8>
			else if(result == JSON_NEW_OBJECT)
 80089dc:	7b3b      	ldrb	r3, [r7, #12]
 80089de:	2b02      	cmp	r3, #2
 80089e0:	d122      	bne.n	8008a28 <jsonDecoding+0xe8>
				if(jsonCurrentLevel == JSON_MAX_LEVELS-1)
 80089e2:	4b1b      	ldr	r3, [pc, #108]	; (8008a50 <jsonDecoding+0x110>)
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	2b04      	cmp	r3, #4
 80089e8:	d01e      	beq.n	8008a28 <jsonDecoding+0xe8>
					if(jsonObjectStates[jsonCurrentLevel] == JSON_ARRAY_END_OR_NEW_VALUE)
 80089ea:	4b19      	ldr	r3, [pc, #100]	; (8008a50 <jsonDecoding+0x110>)
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	461a      	mov	r2, r3
 80089f0:	4b18      	ldr	r3, [pc, #96]	; (8008a54 <jsonDecoding+0x114>)
 80089f2:	5c9b      	ldrb	r3, [r3, r2]
 80089f4:	2b0c      	cmp	r3, #12
 80089f6:	d102      	bne.n	80089fe <jsonDecoding+0xbe>
						jsonArrayStartOfObject();
 80089f8:	f7ff fd90 	bl	800851c <jsonArrayStartOfObject>
 80089fc:	e001      	b.n	8008a02 <jsonDecoding+0xc2>
						jsonStartOfObject();
 80089fe:	f7ff fd05 	bl	800840c <jsonStartOfObject>
					jsonCurrentLevel++;
 8008a02:	4b13      	ldr	r3, [pc, #76]	; (8008a50 <jsonDecoding+0x110>)
 8008a04:	781b      	ldrb	r3, [r3, #0]
 8008a06:	3301      	adds	r3, #1
 8008a08:	b2da      	uxtb	r2, r3
 8008a0a:	4b11      	ldr	r3, [pc, #68]	; (8008a50 <jsonDecoding+0x110>)
 8008a0c:	701a      	strb	r2, [r3, #0]
					jsonObjectStates[jsonCurrentLevel] = JSON_START;
 8008a0e:	4b10      	ldr	r3, [pc, #64]	; (8008a50 <jsonDecoding+0x110>)
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	461a      	mov	r2, r3
 8008a14:	4b0f      	ldr	r3, [pc, #60]	; (8008a54 <jsonDecoding+0x114>)
 8008a16:	2102      	movs	r1, #2
 8008a18:	5499      	strb	r1, [r3, r2]
			break;
 8008a1a:	e005      	b.n	8008a28 <jsonDecoding+0xe8>

		default:
			jsonMainDecoderState = JSON_IDLE;
 8008a1c:	4b09      	ldr	r3, [pc, #36]	; (8008a44 <jsonDecoding+0x104>)
 8008a1e:	2200      	movs	r2, #0
 8008a20:	701a      	strb	r2, [r3, #0]
			break;
 8008a22:	e002      	b.n	8008a2a <jsonDecoding+0xea>
			break;
 8008a24:	bf00      	nop
 8008a26:	e000      	b.n	8008a2a <jsonDecoding+0xea>
			break;
 8008a28:	bf00      	nop
	for(index = 0; index < len; index++)
 8008a2a:	89fb      	ldrh	r3, [r7, #14]
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	81fb      	strh	r3, [r7, #14]
 8008a30:	89fa      	ldrh	r2, [r7, #14]
 8008a32:	887b      	ldrh	r3, [r7, #2]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d38c      	bcc.n	8008952 <jsonDecoding+0x12>
		}
	}
}
 8008a38:	bf00      	nop
 8008a3a:	bf00      	nop
 8008a3c:	3710      	adds	r7, #16
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
 8008a42:	bf00      	nop
 8008a44:	2001bfdd 	.word	0x2001bfdd
 8008a48:	2001bfe0 	.word	0x2001bfe0
 8008a4c:	20000134 	.word	0x20000134
 8008a50:	2001bfde 	.word	0x2001bfde
 8008a54:	2001bfd8 	.word	0x2001bfd8
 8008a58:	2001be94 	.word	0x2001be94
 8008a5c:	2001bfe4 	.word	0x2001bfe4

08008a60 <objectStart>:

static uint8_t ledIndex = 0;


static JsonObject_t* objectStart(char* name)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b083      	sub	sp, #12
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
	return NULL;
 8008a68:	2300      	movs	r3, #0
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	370c      	adds	r7, #12
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a74:	4770      	bx	lr

08008a76 <arrayObjectStart>:

static JsonObject_t* arrayObjectStart(char* name, uint16_t index)
{
 8008a76:	b480      	push	{r7}
 8008a78:	b083      	sub	sp, #12
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
 8008a7e:	460b      	mov	r3, r1
 8008a80:	807b      	strh	r3, [r7, #2]
	return NULL;
 8008a82:	2300      	movs	r3, #0
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	370c      	adds	r7, #12
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8e:	4770      	bx	lr

08008a90 <numberReceived>:

static void numberReceived(char* name, uint32_t number)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b082      	sub	sp, #8
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
	if(strcmp(name, "LedIndex") == 0)
 8008a9a:	490f      	ldr	r1, [pc, #60]	; (8008ad8 <numberReceived+0x48>)
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f7f7 fb97 	bl	80001d0 <strcmp>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d104      	bne.n	8008ab2 <numberReceived+0x22>
	{
		ledIndex = number;
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	b2da      	uxtb	r2, r3
 8008aac:	4b0b      	ldr	r3, [pc, #44]	; (8008adc <numberReceived+0x4c>)
 8008aae:	701a      	strb	r2, [r3, #0]
	}
	else if(strcmp(name, "Duty") == 0)
	{
		LED_changePWM_Duty(ledIndex, number);
	}
}
 8008ab0:	e00e      	b.n	8008ad0 <numberReceived+0x40>
	else if(strcmp(name, "Duty") == 0)
 8008ab2:	490b      	ldr	r1, [pc, #44]	; (8008ae0 <numberReceived+0x50>)
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f7f7 fb8b 	bl	80001d0 <strcmp>
 8008aba:	4603      	mov	r3, r0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d107      	bne.n	8008ad0 <numberReceived+0x40>
		LED_changePWM_Duty(ledIndex, number);
 8008ac0:	4b06      	ldr	r3, [pc, #24]	; (8008adc <numberReceived+0x4c>)
 8008ac2:	781b      	ldrb	r3, [r3, #0]
 8008ac4:	683a      	ldr	r2, [r7, #0]
 8008ac6:	b292      	uxth	r2, r2
 8008ac8:	4611      	mov	r1, r2
 8008aca:	4618      	mov	r0, r3
 8008acc:	f7fe fb6c 	bl	80071a8 <LED_changePWM_Duty>
}
 8008ad0:	bf00      	nop
 8008ad2:	3708      	adds	r7, #8
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}
 8008ad8:	0800ad80 	.word	0x0800ad80
 8008adc:	2001bff8 	.word	0x2001bff8
 8008ae0:	0800ad8c 	.word	0x0800ad8c

08008ae4 <stringReceived>:

static void stringReceived(char* name, char* string)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b083      	sub	sp, #12
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]

}
 8008aee:	bf00      	nop
 8008af0:	370c      	adds	r7, #12
 8008af2:	46bd      	mov	sp, r7
 8008af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af8:	4770      	bx	lr

08008afa <arrayNumberReceived>:

static void arrayNumberReceived(char* name, uint32_t number, uint16_t index)
{
 8008afa:	b480      	push	{r7}
 8008afc:	b085      	sub	sp, #20
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	60f8      	str	r0, [r7, #12]
 8008b02:	60b9      	str	r1, [r7, #8]
 8008b04:	4613      	mov	r3, r2
 8008b06:	80fb      	strh	r3, [r7, #6]

}
 8008b08:	bf00      	nop
 8008b0a:	3714      	adds	r7, #20
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr

08008b14 <arrayStringReceived>:

static void arrayStringReceived(char* name, char* string, uint16_t index)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b085      	sub	sp, #20
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	60b9      	str	r1, [r7, #8]
 8008b1e:	4613      	mov	r3, r2
 8008b20:	80fb      	strh	r3, [r7, #6]

}
 8008b22:	bf00      	nop
 8008b24:	3714      	adds	r7, #20
 8008b26:	46bd      	mov	sp, r7
 8008b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2c:	4770      	bx	lr
	...

08008b30 <jsonLed_getJsonObject>:

JsonObject_t* jsonLed_getJsonObject()
{
 8008b30:	b480      	push	{r7}
 8008b32:	af00      	add	r7, sp, #0
	return &jsonObject_Led;
 8008b34:	4b02      	ldr	r3, [pc, #8]	; (8008b40 <jsonLed_getJsonObject+0x10>)
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr
 8008b40:	2000011c 	.word	0x2000011c

08008b44 <objectStart>:
		&arrayStringReceived
};


static JsonObject_t* objectStart(char* name)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b082      	sub	sp, #8
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
	if(strcmp(name, "LED") == 0)
 8008b4c:	4907      	ldr	r1, [pc, #28]	; (8008b6c <objectStart+0x28>)
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f7f7 fb3e 	bl	80001d0 <strcmp>
 8008b54:	4603      	mov	r3, r0
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d103      	bne.n	8008b62 <objectStart+0x1e>
	{
		return jsonLed_getJsonObject();
 8008b5a:	f7ff ffe9 	bl	8008b30 <jsonLed_getJsonObject>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	e000      	b.n	8008b64 <objectStart+0x20>
	}

	return NULL;
 8008b62:	2300      	movs	r3, #0
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3708      	adds	r7, #8
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	0800ad94 	.word	0x0800ad94

08008b70 <arrayObjectStart>:

static JsonObject_t* arrayObjectStart(char* name, uint16_t index)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b082      	sub	sp, #8
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	460b      	mov	r3, r1
 8008b7a:	807b      	strh	r3, [r7, #2]
	if(strcmp(name, "PatternDatas") == 0)
 8008b7c:	4911      	ldr	r1, [pc, #68]	; (8008bc4 <arrayObjectStart+0x54>)
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f7f7 fb26 	bl	80001d0 <strcmp>
 8008b84:	4603      	mov	r3, r0
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d107      	bne.n	8008b9a <arrayObjectStart+0x2a>
	{
		jsonPatternData_setDataIndex(index);
 8008b8a:	887b      	ldrh	r3, [r7, #2]
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f000 f97d 	bl	8008e8c <jsonPatternData_setDataIndex>
		return jsonPatternData_getJsonObject();
 8008b92:	f000 f971 	bl	8008e78 <jsonPatternData_getJsonObject>
 8008b96:	4603      	mov	r3, r0
 8008b98:	e00f      	b.n	8008bba <arrayObjectStart+0x4a>
	}
	else if(strcmp(name, "Sequences") == 0)
 8008b9a:	490b      	ldr	r1, [pc, #44]	; (8008bc8 <arrayObjectStart+0x58>)
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f7f7 fb17 	bl	80001d0 <strcmp>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d107      	bne.n	8008bb8 <arrayObjectStart+0x48>
	{
		jsonSequence_setIndex(index);
 8008ba8:	887b      	ldrh	r3, [r7, #2]
 8008baa:	4618      	mov	r0, r3
 8008bac:	f000 f9ee 	bl	8008f8c <jsonSequence_setIndex>
		return jsonSequence_getJsonObject();
 8008bb0:	f000 f9e2 	bl	8008f78 <jsonSequence_getJsonObject>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	e000      	b.n	8008bba <arrayObjectStart+0x4a>
	}

	return NULL;
 8008bb8:	2300      	movs	r3, #0
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3708      	adds	r7, #8
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}
 8008bc2:	bf00      	nop
 8008bc4:	0800ad98 	.word	0x0800ad98
 8008bc8:	0800ada8 	.word	0x0800ada8

08008bcc <numberReceived>:

static void numberReceived(char* name, uint32_t number)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b084      	sub	sp, #16
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	6039      	str	r1, [r7, #0]
	if(strcmp(name, "StartSequence") == 0)
 8008bd6:	491d      	ldr	r1, [pc, #116]	; (8008c4c <numberReceived+0x80>)
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f7f7 faf9 	bl	80001d0 <strcmp>
 8008bde:	4603      	mov	r3, r0
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d105      	bne.n	8008bf0 <numberReceived+0x24>
	{
		LED_startLedSequence(number);
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	b2db      	uxtb	r3, r3
 8008be8:	4618      	mov	r0, r3
 8008bea:	f7fe f941 	bl	8006e70 <LED_startLedSequence>
		for(i = 0; i < 20; i++)
		{
			LED_stopLedSequence(i);
		}
	}
}
 8008bee:	e028      	b.n	8008c42 <numberReceived+0x76>
	else if(strcmp(name, "StartAllSequences") == 0)
 8008bf0:	4917      	ldr	r1, [pc, #92]	; (8008c50 <numberReceived+0x84>)
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f7f7 faec 	bl	80001d0 <strcmp>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d10d      	bne.n	8008c1a <numberReceived+0x4e>
		for(i = 0; i < 20; i++)
 8008bfe:	2300      	movs	r3, #0
 8008c00:	73fb      	strb	r3, [r7, #15]
 8008c02:	e006      	b.n	8008c12 <numberReceived+0x46>
			LED_startLedSequence(i);
 8008c04:	7bfb      	ldrb	r3, [r7, #15]
 8008c06:	4618      	mov	r0, r3
 8008c08:	f7fe f932 	bl	8006e70 <LED_startLedSequence>
		for(i = 0; i < 20; i++)
 8008c0c:	7bfb      	ldrb	r3, [r7, #15]
 8008c0e:	3301      	adds	r3, #1
 8008c10:	73fb      	strb	r3, [r7, #15]
 8008c12:	7bfb      	ldrb	r3, [r7, #15]
 8008c14:	2b13      	cmp	r3, #19
 8008c16:	d9f5      	bls.n	8008c04 <numberReceived+0x38>
}
 8008c18:	e013      	b.n	8008c42 <numberReceived+0x76>
	else if(strcmp(name, "StopAllSequences") == 0)
 8008c1a:	490e      	ldr	r1, [pc, #56]	; (8008c54 <numberReceived+0x88>)
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f7f7 fad7 	bl	80001d0 <strcmp>
 8008c22:	4603      	mov	r3, r0
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d10c      	bne.n	8008c42 <numberReceived+0x76>
		for(i = 0; i < 20; i++)
 8008c28:	2300      	movs	r3, #0
 8008c2a:	73bb      	strb	r3, [r7, #14]
 8008c2c:	e006      	b.n	8008c3c <numberReceived+0x70>
			LED_stopLedSequence(i);
 8008c2e:	7bbb      	ldrb	r3, [r7, #14]
 8008c30:	4618      	mov	r0, r3
 8008c32:	f7fe f97f 	bl	8006f34 <LED_stopLedSequence>
		for(i = 0; i < 20; i++)
 8008c36:	7bbb      	ldrb	r3, [r7, #14]
 8008c38:	3301      	adds	r3, #1
 8008c3a:	73bb      	strb	r3, [r7, #14]
 8008c3c:	7bbb      	ldrb	r3, [r7, #14]
 8008c3e:	2b13      	cmp	r3, #19
 8008c40:	d9f5      	bls.n	8008c2e <numberReceived+0x62>
}
 8008c42:	bf00      	nop
 8008c44:	3710      	adds	r7, #16
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
 8008c4a:	bf00      	nop
 8008c4c:	0800adb4 	.word	0x0800adb4
 8008c50:	0800adc4 	.word	0x0800adc4
 8008c54:	0800add8 	.word	0x0800add8

08008c58 <stringReceived>:

static void stringReceived(char* name, char* string)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b083      	sub	sp, #12
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	6039      	str	r1, [r7, #0]

}
 8008c62:	bf00      	nop
 8008c64:	370c      	adds	r7, #12
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr

08008c6e <arrayNumberReceived>:

static void arrayNumberReceived(char* name, uint32_t number, uint16_t index)
{
 8008c6e:	b480      	push	{r7}
 8008c70:	b085      	sub	sp, #20
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	60f8      	str	r0, [r7, #12]
 8008c76:	60b9      	str	r1, [r7, #8]
 8008c78:	4613      	mov	r3, r2
 8008c7a:	80fb      	strh	r3, [r7, #6]

}
 8008c7c:	bf00      	nop
 8008c7e:	3714      	adds	r7, #20
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr

08008c88 <arrayStringReceived>:

static void arrayStringReceived(char* name, char* string, uint16_t index)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b085      	sub	sp, #20
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	60f8      	str	r0, [r7, #12]
 8008c90:	60b9      	str	r1, [r7, #8]
 8008c92:	4613      	mov	r3, r2
 8008c94:	80fb      	strh	r3, [r7, #6]

}
 8008c96:	bf00      	nop
 8008c98:	3714      	adds	r7, #20
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca0:	4770      	bx	lr

08008ca2 <objectStart>:
		&arrayStringReceived
};


static JsonObject_t* objectStart(char* name)
{
 8008ca2:	b480      	push	{r7}
 8008ca4:	b083      	sub	sp, #12
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
	return NULL;
 8008caa:	2300      	movs	r3, #0
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	370c      	adds	r7, #12
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr

08008cb8 <arrayObjectStart>:

static JsonObject_t* arrayObjectStart(char* name, uint16_t index)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b083      	sub	sp, #12
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	460b      	mov	r3, r1
 8008cc2:	807b      	strh	r3, [r7, #2]
	return NULL;
 8008cc4:	2300      	movs	r3, #0
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	370c      	adds	r7, #12
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr
	...

08008cd4 <numberReceived>:

static void numberReceived(char* name, uint32_t number)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b082      	sub	sp, #8
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	6039      	str	r1, [r7, #0]
	if(strcmp(name, "PatternDataIndex") == 0)
 8008cde:	4919      	ldr	r1, [pc, #100]	; (8008d44 <numberReceived+0x70>)
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f7f7 fa75 	bl	80001d0 <strcmp>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d105      	bne.n	8008cf8 <numberReceived+0x24>
	{
		pattern_setPatternDataFromIndex(number);
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	b29b      	uxth	r3, r3
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f7fe fec5 	bl	8007a80 <pattern_setPatternDataFromIndex>
	}
	else if(strcmp(name, "Duration") == 0)
	{
		pattern_setPatternDuration(number);
	}
}
 8008cf6:	e021      	b.n	8008d3c <numberReceived+0x68>
	else if(strcmp(name, "Interval") == 0)
 8008cf8:	4913      	ldr	r1, [pc, #76]	; (8008d48 <numberReceived+0x74>)
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f7f7 fa68 	bl	80001d0 <strcmp>
 8008d00:	4603      	mov	r3, r0
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d103      	bne.n	8008d0e <numberReceived+0x3a>
		pattern_setPatternInterval(number);
 8008d06:	6838      	ldr	r0, [r7, #0]
 8008d08:	f7fe fed4 	bl	8007ab4 <pattern_setPatternInterval>
}
 8008d0c:	e016      	b.n	8008d3c <numberReceived+0x68>
	else if(strcmp(name, "StartPosition") == 0)
 8008d0e:	490f      	ldr	r1, [pc, #60]	; (8008d4c <numberReceived+0x78>)
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f7f7 fa5d 	bl	80001d0 <strcmp>
 8008d16:	4603      	mov	r3, r0
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d105      	bne.n	8008d28 <numberReceived+0x54>
		pattern_setPatternStartPosition(number);
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	b29b      	uxth	r3, r3
 8008d20:	4618      	mov	r0, r3
 8008d22:	f7fe fef3 	bl	8007b0c <pattern_setPatternStartPosition>
}
 8008d26:	e009      	b.n	8008d3c <numberReceived+0x68>
	else if(strcmp(name, "Duration") == 0)
 8008d28:	4909      	ldr	r1, [pc, #36]	; (8008d50 <numberReceived+0x7c>)
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f7f7 fa50 	bl	80001d0 <strcmp>
 8008d30:	4603      	mov	r3, r0
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d102      	bne.n	8008d3c <numberReceived+0x68>
		pattern_setPatternDuration(number);
 8008d36:	6838      	ldr	r0, [r7, #0]
 8008d38:	f7fe fed2 	bl	8007ae0 <pattern_setPatternDuration>
}
 8008d3c:	bf00      	nop
 8008d3e:	3708      	adds	r7, #8
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}
 8008d44:	0800adec 	.word	0x0800adec
 8008d48:	0800ae00 	.word	0x0800ae00
 8008d4c:	0800ae0c 	.word	0x0800ae0c
 8008d50:	0800ae1c 	.word	0x0800ae1c

08008d54 <stringReceived>:

static void stringReceived(char* name, char* string)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b083      	sub	sp, #12
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	6039      	str	r1, [r7, #0]

}
 8008d5e:	bf00      	nop
 8008d60:	370c      	adds	r7, #12
 8008d62:	46bd      	mov	sp, r7
 8008d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d68:	4770      	bx	lr

08008d6a <arrayNumberReceived>:

static void arrayNumberReceived(char* name, uint32_t number, uint16_t index)
{
 8008d6a:	b480      	push	{r7}
 8008d6c:	b085      	sub	sp, #20
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	60f8      	str	r0, [r7, #12]
 8008d72:	60b9      	str	r1, [r7, #8]
 8008d74:	4613      	mov	r3, r2
 8008d76:	80fb      	strh	r3, [r7, #6]

}
 8008d78:	bf00      	nop
 8008d7a:	3714      	adds	r7, #20
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr

08008d84 <arrayStringReceived>:

static void arrayStringReceived(char* name, char* string, uint16_t index)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b085      	sub	sp, #20
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	60f8      	str	r0, [r7, #12]
 8008d8c:	60b9      	str	r1, [r7, #8]
 8008d8e:	4613      	mov	r3, r2
 8008d90:	80fb      	strh	r3, [r7, #6]

}
 8008d92:	bf00      	nop
 8008d94:	3714      	adds	r7, #20
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr
	...

08008da0 <jsonPattern_getJsonObject>:

JsonObject_t* jsonPattern_getJsonObject()
{
 8008da0:	b480      	push	{r7}
 8008da2:	af00      	add	r7, sp, #0
	return &jsonObject_Pattern;
 8008da4:	4b02      	ldr	r3, [pc, #8]	; (8008db0 <jsonPattern_getJsonObject+0x10>)
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr
 8008db0:	2000014c 	.word	0x2000014c

08008db4 <jsonPattern_resetPatternCount>:
{
	pattern_setPatternIndex(index);
}

void jsonPattern_resetPatternCount()
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	af00      	add	r7, sp, #0
	pattern_resetPatternCount();
 8008db8:	f7fe fe3a 	bl	8007a30 <pattern_resetPatternCount>
}
 8008dbc:	bf00      	nop
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <jsonPattern_addNewPattern>:

void jsonPattern_addNewPattern()
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	af00      	add	r7, sp, #0
	pattern_addNewPattern();
 8008dc4:	f7fe fe40 	bl	8007a48 <pattern_addNewPattern>
}
 8008dc8:	bf00      	nop
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <objectStart>:
		&arrayStringReceived
};


static JsonObject_t* objectStart(char* name)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b083      	sub	sp, #12
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
	return NULL;
 8008dd4:	2300      	movs	r3, #0
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	370c      	adds	r7, #12
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de0:	4770      	bx	lr

08008de2 <arrayObjectStart>:

static JsonObject_t* arrayObjectStart(char* name, uint16_t index)
{
 8008de2:	b480      	push	{r7}
 8008de4:	b083      	sub	sp, #12
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6078      	str	r0, [r7, #4]
 8008dea:	460b      	mov	r3, r1
 8008dec:	807b      	strh	r3, [r7, #2]
	return NULL;
 8008dee:	2300      	movs	r3, #0
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	370c      	adds	r7, #12
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr

08008dfc <numberReceived>:

static void numberReceived(char* name, uint32_t number)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b083      	sub	sp, #12
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	6039      	str	r1, [r7, #0]

}
 8008e06:	bf00      	nop
 8008e08:	370c      	adds	r7, #12
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e10:	4770      	bx	lr

08008e12 <stringReceived>:

static void stringReceived(char* name, char* string)
{
 8008e12:	b480      	push	{r7}
 8008e14:	b083      	sub	sp, #12
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	6078      	str	r0, [r7, #4]
 8008e1a:	6039      	str	r1, [r7, #0]

}
 8008e1c:	bf00      	nop
 8008e1e:	370c      	adds	r7, #12
 8008e20:	46bd      	mov	sp, r7
 8008e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e26:	4770      	bx	lr

08008e28 <arrayNumberReceived>:

static void arrayNumberReceived(char* name, uint32_t number, uint16_t index)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b084      	sub	sp, #16
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	60f8      	str	r0, [r7, #12]
 8008e30:	60b9      	str	r1, [r7, #8]
 8008e32:	4613      	mov	r3, r2
 8008e34:	80fb      	strh	r3, [r7, #6]
	if(strcmp(name, "Data") == 0)
 8008e36:	4908      	ldr	r1, [pc, #32]	; (8008e58 <arrayNumberReceived+0x30>)
 8008e38:	68f8      	ldr	r0, [r7, #12]
 8008e3a:	f7f7 f9c9 	bl	80001d0 <strcmp>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d104      	bne.n	8008e4e <arrayNumberReceived+0x26>
	{
		patternData_addValueToCurrentPattern(number);
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	b29b      	uxth	r3, r3
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f7fe fecb 	bl	8007be4 <patternData_addValueToCurrentPattern>
	}
}
 8008e4e:	bf00      	nop
 8008e50:	3710      	adds	r7, #16
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
 8008e56:	bf00      	nop
 8008e58:	0800ae28 	.word	0x0800ae28

08008e5c <arrayStringReceived>:

static void arrayStringReceived(char* name, char* string, uint16_t index)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b085      	sub	sp, #20
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	60f8      	str	r0, [r7, #12]
 8008e64:	60b9      	str	r1, [r7, #8]
 8008e66:	4613      	mov	r3, r2
 8008e68:	80fb      	strh	r3, [r7, #6]

}
 8008e6a:	bf00      	nop
 8008e6c:	3714      	adds	r7, #20
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr
	...

08008e78 <jsonPatternData_getJsonObject>:

JsonObject_t* jsonPatternData_getJsonObject()
{
 8008e78:	b480      	push	{r7}
 8008e7a:	af00      	add	r7, sp, #0
	return &jsonObject_PatternData;
 8008e7c:	4b02      	ldr	r3, [pc, #8]	; (8008e88 <jsonPatternData_getJsonObject+0x10>)
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr
 8008e88:	20000164 	.word	0x20000164

08008e8c <jsonPatternData_setDataIndex>:


void jsonPatternData_setDataIndex(uint16_t index)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b082      	sub	sp, #8
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	4603      	mov	r3, r0
 8008e94:	80fb      	strh	r3, [r7, #6]
	patternData_setDataIndex(index);
 8008e96:	88fb      	ldrh	r3, [r7, #6]
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f7fe fe5f 	bl	8007b5c <patternData_setDataIndex>
}
 8008e9e:	bf00      	nop
 8008ea0:	3708      	adds	r7, #8
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}

08008ea6 <objectStart>:
		&arrayStringReceived
};


static JsonObject_t* objectStart(char* name)
{
 8008ea6:	b480      	push	{r7}
 8008ea8:	b083      	sub	sp, #12
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	6078      	str	r0, [r7, #4]
	return NULL;
 8008eae:	2300      	movs	r3, #0
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	370c      	adds	r7, #12
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr

08008ebc <arrayObjectStart>:

static JsonObject_t* arrayObjectStart(char* name, uint16_t index)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b082      	sub	sp, #8
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	807b      	strh	r3, [r7, #2]
	if(strcmp(name, "Patterns") == 0)
 8008ec8:	490b      	ldr	r1, [pc, #44]	; (8008ef8 <arrayObjectStart+0x3c>)
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f7f7 f980 	bl	80001d0 <strcmp>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d10b      	bne.n	8008eee <arrayObjectStart+0x32>
	{
		// Add the new pattern to the main list of patterns
		jsonPattern_addNewPattern();
 8008ed6:	f7ff ff73 	bl	8008dc0 <jsonPattern_addNewPattern>

		// Specifically add this pattern to the sequence list of patterns
		sequence_addPattern(pattern_getCurrentPattern());
 8008eda:	f7fe fe2f 	bl	8007b3c <pattern_getCurrentPattern>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f7fe fefd 	bl	8007ce0 <sequence_addPattern>

		return jsonPattern_getJsonObject();
 8008ee6:	f7ff ff5b 	bl	8008da0 <jsonPattern_getJsonObject>
 8008eea:	4603      	mov	r3, r0
 8008eec:	e000      	b.n	8008ef0 <arrayObjectStart+0x34>
	}

	return NULL;
 8008eee:	2300      	movs	r3, #0
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3708      	adds	r7, #8
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}
 8008ef8:	0800ae30 	.word	0x0800ae30

08008efc <numberReceived>:

static void numberReceived(char* name, uint32_t number)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	6039      	str	r1, [r7, #0]
	if(strcmp(name, "LedIndex") == 0)
 8008f06:	4908      	ldr	r1, [pc, #32]	; (8008f28 <numberReceived+0x2c>)
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f7f7 f961 	bl	80001d0 <strcmp>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d104      	bne.n	8008f1e <numberReceived+0x22>
	{
		sequence_setLedIndex(number);
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	b2db      	uxtb	r3, r3
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f7fe febb 	bl	8007c94 <sequence_setLedIndex>
	}
}
 8008f1e:	bf00      	nop
 8008f20:	3708      	adds	r7, #8
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
 8008f26:	bf00      	nop
 8008f28:	0800ae3c 	.word	0x0800ae3c

08008f2c <stringReceived>:

static void stringReceived(char* name, char* string)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b083      	sub	sp, #12
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	6039      	str	r1, [r7, #0]

}
 8008f36:	bf00      	nop
 8008f38:	370c      	adds	r7, #12
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr

08008f42 <arrayNumberReceived>:

static void arrayNumberReceived(char* name, uint32_t number, uint16_t index)
{
 8008f42:	b480      	push	{r7}
 8008f44:	b085      	sub	sp, #20
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	60f8      	str	r0, [r7, #12]
 8008f4a:	60b9      	str	r1, [r7, #8]
 8008f4c:	4613      	mov	r3, r2
 8008f4e:	80fb      	strh	r3, [r7, #6]

}
 8008f50:	bf00      	nop
 8008f52:	3714      	adds	r7, #20
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr

08008f5c <arrayStringReceived>:

static void arrayStringReceived(char* name, char* string, uint16_t index)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b085      	sub	sp, #20
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	60f8      	str	r0, [r7, #12]
 8008f64:	60b9      	str	r1, [r7, #8]
 8008f66:	4613      	mov	r3, r2
 8008f68:	80fb      	strh	r3, [r7, #6]

}
 8008f6a:	bf00      	nop
 8008f6c:	3714      	adds	r7, #20
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f74:	4770      	bx	lr
	...

08008f78 <jsonSequence_getJsonObject>:

JsonObject_t* jsonSequence_getJsonObject()
{
 8008f78:	b480      	push	{r7}
 8008f7a:	af00      	add	r7, sp, #0
	return &jsonObject_Sequence;
 8008f7c:	4b02      	ldr	r3, [pc, #8]	; (8008f88 <jsonSequence_getJsonObject+0x10>)
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr
 8008f88:	2000017c 	.word	0x2000017c

08008f8c <jsonSequence_setIndex>:

void jsonSequence_setIndex(uint16_t index)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b082      	sub	sp, #8
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	4603      	mov	r3, r0
 8008f94:	80fb      	strh	r3, [r7, #6]
	sequence_setIndex(index);
 8008f96:	88fb      	ldrh	r3, [r7, #6]
 8008f98:	b2db      	uxtb	r3, r3
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f7fe fe56 	bl	8007c4c <sequence_setIndex>

	// If it is the first sequence, then we reset the pattern list too
	if(index == 0)
 8008fa0:	88fb      	ldrh	r3, [r7, #6]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d101      	bne.n	8008faa <jsonSequence_setIndex+0x1e>
	{
		jsonPattern_resetPatternCount();
 8008fa6:	f7ff ff05 	bl	8008db4 <jsonPattern_resetPatternCount>
	}
}
 8008faa:	bf00      	nop
 8008fac:	3708      	adds	r7, #8
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
	...

08008fb4 <VCP_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t VCP_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b082      	sub	sp, #8
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	6039      	str	r1, [r7, #0]
	// CDC_Receive_FS  is a callback function. When data were received, the system calls this function. The received data can be accessed via Buf,and *Len
	s_RxBuffers.IsCommandDataReceived=1; //indicates data were received
 8008fbe:	4b17      	ldr	r3, [pc, #92]	; (800901c <VCP_Receive_FS+0x68>)
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	721a      	strb	r2, [r3, #8]
	s_RxBuffers.CommandsLens[s_RxBuffers.pos_receive]=*Len; //only set the length, data was directly saved to buffer
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	681a      	ldr	r2, [r3, #0]
 8008fc8:	4b14      	ldr	r3, [pc, #80]	; (800901c <VCP_Receive_FS+0x68>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	b2d1      	uxtb	r1, r2
 8008fce:	4a13      	ldr	r2, [pc, #76]	; (800901c <VCP_Receive_FS+0x68>)
 8008fd0:	4413      	add	r3, r2
 8008fd2:	460a      	mov	r2, r1
 8008fd4:	f883 2c89 	strb.w	r2, [r3, #3209]	; 0xc89

	s_RxBuffers.pos_receive++;//move to next position to receive data
 8008fd8:	4b10      	ldr	r3, [pc, #64]	; (800901c <VCP_Receive_FS+0x68>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	3301      	adds	r3, #1
 8008fde:	4a0f      	ldr	r2, [pc, #60]	; (800901c <VCP_Receive_FS+0x68>)
 8008fe0:	6013      	str	r3, [r2, #0]
	if(s_RxBuffers.pos_receive>=MaxCommandsInBuffer) //reach the last buffer, need to rewind to 0
 8008fe2:	4b0e      	ldr	r3, [pc, #56]	; (800901c <VCP_Receive_FS+0x68>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	2b0f      	cmp	r3, #15
 8008fe8:	dd02      	ble.n	8008ff0 <VCP_Receive_FS+0x3c>
	{
		s_RxBuffers.pos_receive=0;
 8008fea:	4b0c      	ldr	r3, [pc, #48]	; (800901c <VCP_Receive_FS+0x68>)
 8008fec:	2200      	movs	r2, #0
 8008fee:	601a      	str	r2, [r3, #0]
	}

	// Prepare to receive the next data
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, s_RxBuffers.UserRxBufferFS[s_RxBuffers.pos_receive]);//Set the buffer to receive incoming data
 8008ff0:	4b0a      	ldr	r3, [pc, #40]	; (800901c <VCP_Receive_FS+0x68>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	22c8      	movs	r2, #200	; 0xc8
 8008ff6:	fb02 f303 	mul.w	r3, r2, r3
 8008ffa:	3308      	adds	r3, #8
 8008ffc:	4a07      	ldr	r2, [pc, #28]	; (800901c <VCP_Receive_FS+0x68>)
 8008ffe:	4413      	add	r3, r2
 8009000:	3301      	adds	r3, #1
 8009002:	4619      	mov	r1, r3
 8009004:	4806      	ldr	r0, [pc, #24]	; (8009020 <VCP_Receive_FS+0x6c>)
 8009006:	f7fc fdf8 	bl	8005bfa <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);// Tell that you are ready to receive the next packet, otherwise you wouldn't be able to receive next data
 800900a:	4805      	ldr	r0, [pc, #20]	; (8009020 <VCP_Receive_FS+0x6c>)
 800900c:	f7fc fe09 	bl	8005c22 <USBD_CDC_ReceivePacket>

	return USBD_OK;
 8009010:	2300      	movs	r3, #0
}
 8009012:	4618      	mov	r0, r3
 8009014:	3708      	adds	r7, #8
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
 800901a:	bf00      	nop
 800901c:	2001bffc 	.word	0x2001bffc
 8009020:	2001cc98 	.word	0x2001cc98

08009024 <VCP_retrieveInputData>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval 0 means no data was received.
  */
int8_t VCP_retrieveInputData(uint8_t* Buf, uint32_t *Len)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b084      	sub	sp, #16
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	6039      	str	r1, [r7, #0]
    if(s_RxBuffers.IsCommandDataReceived==0)return 0; //no data received
 800902e:	4b20      	ldr	r3, [pc, #128]	; (80090b0 <VCP_retrieveInputData+0x8c>)
 8009030:	7a1b      	ldrb	r3, [r3, #8]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d101      	bne.n	800903a <VCP_retrieveInputData+0x16>
 8009036:	2300      	movs	r3, #0
 8009038:	e035      	b.n	80090a6 <VCP_retrieveInputData+0x82>

    int index=s_RxBuffers.pos_process;
 800903a:	4b1d      	ldr	r3, [pc, #116]	; (80090b0 <VCP_retrieveInputData+0x8c>)
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	60fb      	str	r3, [r7, #12]

    *Len=s_RxBuffers.CommandsLens[index]; //return the length
 8009040:	4a1b      	ldr	r2, [pc, #108]	; (80090b0 <VCP_retrieveInputData+0x8c>)
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	4413      	add	r3, r2
 8009046:	f603 4389 	addw	r3, r3, #3209	; 0xc89
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	461a      	mov	r2, r3
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	601a      	str	r2, [r3, #0]
    memcpy(Buf,s_RxBuffers.UserRxBufferFS[index],*Len);
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	22c8      	movs	r2, #200	; 0xc8
 8009056:	fb02 f303 	mul.w	r3, r2, r3
 800905a:	3308      	adds	r3, #8
 800905c:	4a14      	ldr	r2, [pc, #80]	; (80090b0 <VCP_retrieveInputData+0x8c>)
 800905e:	4413      	add	r3, r2
 8009060:	1c59      	adds	r1, r3, #1
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	461a      	mov	r2, r3
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 fdaf 	bl	8009bcc <memcpy>
    Buf[*Len]='\0'; //testing only. make sure there is ending char in the returned command string
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	4413      	add	r3, r2
 8009076:	2200      	movs	r2, #0
 8009078:	701a      	strb	r2, [r3, #0]

    //check if all data were processed.
    s_RxBuffers.pos_process++;
 800907a:	4b0d      	ldr	r3, [pc, #52]	; (80090b0 <VCP_retrieveInputData+0x8c>)
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	3301      	adds	r3, #1
 8009080:	4a0b      	ldr	r2, [pc, #44]	; (80090b0 <VCP_retrieveInputData+0x8c>)
 8009082:	6053      	str	r3, [r2, #4]

    if(s_RxBuffers.pos_process>=MaxCommandsInBuffer) //reach the last buffer, need to rewind to 0
 8009084:	4b0a      	ldr	r3, [pc, #40]	; (80090b0 <VCP_retrieveInputData+0x8c>)
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	2b0f      	cmp	r3, #15
 800908a:	dd02      	ble.n	8009092 <VCP_retrieveInputData+0x6e>
    {
        s_RxBuffers.pos_process=0;
 800908c:	4b08      	ldr	r3, [pc, #32]	; (80090b0 <VCP_retrieveInputData+0x8c>)
 800908e:	2200      	movs	r2, #0
 8009090:	605a      	str	r2, [r3, #4]
    }

    if(s_RxBuffers.pos_process==s_RxBuffers.pos_receive)
 8009092:	4b07      	ldr	r3, [pc, #28]	; (80090b0 <VCP_retrieveInputData+0x8c>)
 8009094:	685a      	ldr	r2, [r3, #4]
 8009096:	4b06      	ldr	r3, [pc, #24]	; (80090b0 <VCP_retrieveInputData+0x8c>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	429a      	cmp	r2, r3
 800909c:	d102      	bne.n	80090a4 <VCP_retrieveInputData+0x80>
    	s_RxBuffers.IsCommandDataReceived=0; //check if all data were processed
 800909e:	4b04      	ldr	r3, [pc, #16]	; (80090b0 <VCP_retrieveInputData+0x8c>)
 80090a0:	2200      	movs	r2, #0
 80090a2:	721a      	strb	r2, [r3, #8]

    return 1;
 80090a4:	2301      	movs	r3, #1
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3710      	adds	r7, #16
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
 80090ae:	bf00      	nop
 80090b0:	2001bffc 	.word	0x2001bffc

080090b4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 80090b8:	2200      	movs	r2, #0
 80090ba:	4908      	ldr	r1, [pc, #32]	; (80090dc <MX_USB_DEVICE_Init+0x28>)
 80090bc:	4808      	ldr	r0, [pc, #32]	; (80090e0 <MX_USB_DEVICE_Init+0x2c>)
 80090be:	f7fc fddb 	bl	8005c78 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 80090c2:	4908      	ldr	r1, [pc, #32]	; (80090e4 <MX_USB_DEVICE_Init+0x30>)
 80090c4:	4806      	ldr	r0, [pc, #24]	; (80090e0 <MX_USB_DEVICE_Init+0x2c>)
 80090c6:	f7fc fe0f 	bl	8005ce8 <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 80090ca:	4907      	ldr	r1, [pc, #28]	; (80090e8 <MX_USB_DEVICE_Init+0x34>)
 80090cc:	4804      	ldr	r0, [pc, #16]	; (80090e0 <MX_USB_DEVICE_Init+0x2c>)
 80090ce:	f7fc fd63 	bl	8005b98 <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 80090d2:	4803      	ldr	r0, [pc, #12]	; (80090e0 <MX_USB_DEVICE_Init+0x2c>)
 80090d4:	f7fc fe2e 	bl	8005d34 <USBD_Start>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80090d8:	bf00      	nop
 80090da:	bd80      	pop	{r7, pc}
 80090dc:	200001a4 	.word	0x200001a4
 80090e0:	2001cc98 	.word	0x2001cc98
 80090e4:	20000014 	.word	0x20000014
 80090e8:	20000194 	.word	0x20000194

080090ec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80090f0:	2200      	movs	r2, #0
 80090f2:	4905      	ldr	r1, [pc, #20]	; (8009108 <CDC_Init_FS+0x1c>)
 80090f4:	4805      	ldr	r0, [pc, #20]	; (800910c <CDC_Init_FS+0x20>)
 80090f6:	f7fc fd66 	bl	8005bc6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80090fa:	4905      	ldr	r1, [pc, #20]	; (8009110 <CDC_Init_FS+0x24>)
 80090fc:	4803      	ldr	r0, [pc, #12]	; (800910c <CDC_Init_FS+0x20>)
 80090fe:	f7fc fd7c 	bl	8005bfa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009102:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009104:	4618      	mov	r0, r3
 8009106:	bd80      	pop	{r7, pc}
 8009108:	2001cf84 	.word	0x2001cf84
 800910c:	2001cc98 	.word	0x2001cc98
 8009110:	2001cebc 	.word	0x2001cebc

08009114 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009114:	b480      	push	{r7}
 8009116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009118:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800911a:	4618      	mov	r0, r3
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr

08009124 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009124:	b480      	push	{r7}
 8009126:	b083      	sub	sp, #12
 8009128:	af00      	add	r7, sp, #0
 800912a:	4603      	mov	r3, r0
 800912c:	6039      	str	r1, [r7, #0]
 800912e:	71fb      	strb	r3, [r7, #7]
 8009130:	4613      	mov	r3, r2
 8009132:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009134:	79fb      	ldrb	r3, [r7, #7]
 8009136:	2b23      	cmp	r3, #35	; 0x23
 8009138:	d866      	bhi.n	8009208 <CDC_Control_FS+0xe4>
 800913a:	a201      	add	r2, pc, #4	; (adr r2, 8009140 <CDC_Control_FS+0x1c>)
 800913c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009140:	08009209 	.word	0x08009209
 8009144:	08009209 	.word	0x08009209
 8009148:	08009209 	.word	0x08009209
 800914c:	08009209 	.word	0x08009209
 8009150:	08009209 	.word	0x08009209
 8009154:	08009209 	.word	0x08009209
 8009158:	08009209 	.word	0x08009209
 800915c:	08009209 	.word	0x08009209
 8009160:	08009209 	.word	0x08009209
 8009164:	08009209 	.word	0x08009209
 8009168:	08009209 	.word	0x08009209
 800916c:	08009209 	.word	0x08009209
 8009170:	08009209 	.word	0x08009209
 8009174:	08009209 	.word	0x08009209
 8009178:	08009209 	.word	0x08009209
 800917c:	08009209 	.word	0x08009209
 8009180:	08009209 	.word	0x08009209
 8009184:	08009209 	.word	0x08009209
 8009188:	08009209 	.word	0x08009209
 800918c:	08009209 	.word	0x08009209
 8009190:	08009209 	.word	0x08009209
 8009194:	08009209 	.word	0x08009209
 8009198:	08009209 	.word	0x08009209
 800919c:	08009209 	.word	0x08009209
 80091a0:	08009209 	.word	0x08009209
 80091a4:	08009209 	.word	0x08009209
 80091a8:	08009209 	.word	0x08009209
 80091ac:	08009209 	.word	0x08009209
 80091b0:	08009209 	.word	0x08009209
 80091b4:	08009209 	.word	0x08009209
 80091b8:	08009209 	.word	0x08009209
 80091bc:	08009209 	.word	0x08009209
 80091c0:	08009209 	.word	0x08009209
 80091c4:	080091d1 	.word	0x080091d1
 80091c8:	08009209 	.word	0x08009209
 80091cc:	08009209 	.word	0x08009209
    break;

    case CDC_GET_LINE_CODING:
	   // Called when usb cable is plugged in (no terminal program)
	   // Called when terminal program connects
	   pbuf[0] = 0x20; // bits/second 115200
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	2220      	movs	r2, #32
 80091d4:	701a      	strb	r2, [r3, #0]
	   pbuf[1] = 0xc2;
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	3301      	adds	r3, #1
 80091da:	22c2      	movs	r2, #194	; 0xc2
 80091dc:	701a      	strb	r2, [r3, #0]
	   pbuf[2] = 0x01;
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	3302      	adds	r3, #2
 80091e2:	2201      	movs	r2, #1
 80091e4:	701a      	strb	r2, [r3, #0]
	   pbuf[3] = 0x00;
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	3303      	adds	r3, #3
 80091ea:	2200      	movs	r2, #0
 80091ec:	701a      	strb	r2, [r3, #0]
	   pbuf[4] = 0x00; // 1 stop bit
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	3304      	adds	r3, #4
 80091f2:	2200      	movs	r2, #0
 80091f4:	701a      	strb	r2, [r3, #0]
	   pbuf[5] = 0x00; // parity none
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	3305      	adds	r3, #5
 80091fa:	2200      	movs	r2, #0
 80091fc:	701a      	strb	r2, [r3, #0]
	   pbuf[6] = 0x08; // 8 data bits
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	3306      	adds	r3, #6
 8009202:	2208      	movs	r2, #8
 8009204:	701a      	strb	r2, [r3, #0]
    break;
 8009206:	e000      	b.n	800920a <CDC_Control_FS+0xe6>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009208:	bf00      	nop
  }

  return (USBD_OK);
 800920a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800920c:	4618      	mov	r0, r3
 800920e:	370c      	adds	r7, #12
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	4770      	bx	lr

08009218 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b082      	sub	sp, #8
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	return VCP_Receive_FS(Buf, Len);
 8009222:	6839      	ldr	r1, [r7, #0]
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f7ff fec5 	bl	8008fb4 <VCP_Receive_FS>
 800922a:	4603      	mov	r3, r0
  /* USER CODE END 6 */
}
 800922c:	4618      	mov	r0, r3
 800922e:	3708      	adds	r7, #8
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b088      	sub	sp, #32
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009244:	d139      	bne.n	80092ba <HAL_PCD_MspInit+0x86>
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009246:	f44f 7300 	mov.w	r3, #512	; 0x200
 800924a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800924c:	2300      	movs	r3, #0
 800924e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009250:	2300      	movs	r3, #0
 8009252:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009254:	f107 030c 	add.w	r3, r7, #12
 8009258:	4619      	mov	r1, r3
 800925a:	481a      	ldr	r0, [pc, #104]	; (80092c4 <HAL_PCD_MspInit+0x90>)
 800925c:	f7f7 fb68 	bl	8000930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009260:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009264:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009266:	2302      	movs	r3, #2
 8009268:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800926a:	2300      	movs	r3, #0
 800926c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800926e:	2300      	movs	r3, #0
 8009270:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009272:	230a      	movs	r3, #10
 8009274:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009276:	f107 030c 	add.w	r3, r7, #12
 800927a:	4619      	mov	r1, r3
 800927c:	4811      	ldr	r0, [pc, #68]	; (80092c4 <HAL_PCD_MspInit+0x90>)
 800927e:	f7f7 fb57 	bl	8000930 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009282:	4b11      	ldr	r3, [pc, #68]	; (80092c8 <HAL_PCD_MspInit+0x94>)
 8009284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009286:	4a10      	ldr	r2, [pc, #64]	; (80092c8 <HAL_PCD_MspInit+0x94>)
 8009288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800928c:	6353      	str	r3, [r2, #52]	; 0x34
 800928e:	2300      	movs	r3, #0
 8009290:	60bb      	str	r3, [r7, #8]
 8009292:	4b0d      	ldr	r3, [pc, #52]	; (80092c8 <HAL_PCD_MspInit+0x94>)
 8009294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009296:	4a0c      	ldr	r2, [pc, #48]	; (80092c8 <HAL_PCD_MspInit+0x94>)
 8009298:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800929c:	6453      	str	r3, [r2, #68]	; 0x44
 800929e:	4b0a      	ldr	r3, [pc, #40]	; (80092c8 <HAL_PCD_MspInit+0x94>)
 80092a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092a6:	60bb      	str	r3, [r7, #8]
 80092a8:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80092aa:	2200      	movs	r2, #0
 80092ac:	2100      	movs	r1, #0
 80092ae:	2043      	movs	r0, #67	; 0x43
 80092b0:	f7f7 fadd 	bl	800086e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80092b4:	2043      	movs	r0, #67	; 0x43
 80092b6:	f7f7 faf6 	bl	80008a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80092ba:	bf00      	nop
 80092bc:	3720      	adds	r7, #32
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
 80092c2:	bf00      	nop
 80092c4:	40020000 	.word	0x40020000
 80092c8:	40023800 	.word	0x40023800

080092cc <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b082      	sub	sp, #8
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 23ec 	ldr.w	r2, [r3, #1004]	; 0x3ec
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80092e0:	4619      	mov	r1, r3
 80092e2:	4610      	mov	r0, r2
 80092e4:	f7fc fd6f 	bl	8005dc6 <USBD_LL_SetupStage>
}
 80092e8:	bf00      	nop
 80092ea:	3708      	adds	r7, #8
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}

080092f0 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b082      	sub	sp, #8
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	460b      	mov	r3, r1
 80092fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8d3 03ec 	ldr.w	r0, [r3, #1004]	; 0x3ec
 8009302:	78fa      	ldrb	r2, [r7, #3]
 8009304:	6879      	ldr	r1, [r7, #4]
 8009306:	4613      	mov	r3, r2
 8009308:	00db      	lsls	r3, r3, #3
 800930a:	1a9b      	subs	r3, r3, r2
 800930c:	009b      	lsls	r3, r3, #2
 800930e:	440b      	add	r3, r1
 8009310:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009314:	681a      	ldr	r2, [r3, #0]
 8009316:	78fb      	ldrb	r3, [r7, #3]
 8009318:	4619      	mov	r1, r3
 800931a:	f7fc fda1 	bl	8005e60 <USBD_LL_DataOutStage>
}
 800931e:	bf00      	nop
 8009320:	3708      	adds	r7, #8
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}

08009326 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8009326:	b580      	push	{r7, lr}
 8009328:	b082      	sub	sp, #8
 800932a:	af00      	add	r7, sp, #0
 800932c:	6078      	str	r0, [r7, #4]
 800932e:	460b      	mov	r3, r1
 8009330:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8d3 03ec 	ldr.w	r0, [r3, #1004]	; 0x3ec
 8009338:	78fa      	ldrb	r2, [r7, #3]
 800933a:	6879      	ldr	r1, [r7, #4]
 800933c:	4613      	mov	r3, r2
 800933e:	00db      	lsls	r3, r3, #3
 8009340:	1a9b      	subs	r3, r3, r2
 8009342:	009b      	lsls	r3, r3, #2
 8009344:	440b      	add	r3, r1
 8009346:	3344      	adds	r3, #68	; 0x44
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	78fb      	ldrb	r3, [r7, #3]
 800934c:	4619      	mov	r1, r3
 800934e:	f7fc fde2 	bl	8005f16 <USBD_LL_DataInStage>
}
 8009352:	bf00      	nop
 8009354:	3708      	adds	r7, #8
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}

0800935a <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800935a:	b580      	push	{r7, lr}
 800935c:	b082      	sub	sp, #8
 800935e:	af00      	add	r7, sp, #0
 8009360:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8009368:	4618      	mov	r0, r3
 800936a:	f7fc fec8 	bl	80060fe <USBD_LL_SOF>
}
 800936e:	bf00      	nop
 8009370:	3708      	adds	r7, #8
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}

08009376 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8009376:	b580      	push	{r7, lr}
 8009378:	b084      	sub	sp, #16
 800937a:	af00      	add	r7, sp, #0
 800937c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800937e:	2301      	movs	r3, #1
 8009380:	73fb      	strb	r3, [r7, #15]

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	68db      	ldr	r3, [r3, #12]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d002      	beq.n	8009390 <HAL_PCD_ResetCallback+0x1a>
 800938a:	2b02      	cmp	r3, #2
 800938c:	d003      	beq.n	8009396 <HAL_PCD_ResetCallback+0x20>
 800938e:	e005      	b.n	800939c <HAL_PCD_ResetCallback+0x26>
  {
  case PCD_SPEED_HIGH:
    speed = USBD_SPEED_HIGH;
 8009390:	2300      	movs	r3, #0
 8009392:	73fb      	strb	r3, [r7, #15]
    break;
 8009394:	e005      	b.n	80093a2 <HAL_PCD_ResetCallback+0x2c>
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;
 8009396:	2301      	movs	r3, #1
 8009398:	73fb      	strb	r3, [r7, #15]
    break;
 800939a:	e002      	b.n	80093a2 <HAL_PCD_ResetCallback+0x2c>
	
  default:
    speed = USBD_SPEED_FULL;
 800939c:	2301      	movs	r3, #1
 800939e:	73fb      	strb	r3, [r7, #15]
    break;    
 80093a0:	bf00      	nop
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80093a8:	7bfa      	ldrb	r2, [r7, #15]
 80093aa:	4611      	mov	r1, r2
 80093ac:	4618      	mov	r0, r3
 80093ae:	f7fc fe70 	bl	8006092 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80093b8:	4618      	mov	r0, r3
 80093ba:	f7fc fe3b 	bl	8006034 <USBD_LL_Reset>
}
 80093be:	bf00      	nop
 80093c0:	3710      	adds	r7, #16
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
	...

080093c8 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b082      	sub	sp, #8
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80093d6:	4618      	mov	r0, r3
 80093d8:	f7fc fe6b 	bl	80060b2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	687a      	ldr	r2, [r7, #4]
 80093e8:	6812      	ldr	r2, [r2, #0]
 80093ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80093ee:	f043 0301 	orr.w	r3, r3, #1
 80093f2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6a1b      	ldr	r3, [r3, #32]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d005      	beq.n	8009408 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80093fc:	4b04      	ldr	r3, [pc, #16]	; (8009410 <HAL_PCD_SuspendCallback+0x48>)
 80093fe:	691b      	ldr	r3, [r3, #16]
 8009400:	4a03      	ldr	r2, [pc, #12]	; (8009410 <HAL_PCD_SuspendCallback+0x48>)
 8009402:	f043 0306 	orr.w	r3, r3, #6
 8009406:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009408:	bf00      	nop
 800940a:	3708      	adds	r7, #8
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}
 8009410:	e000ed00 	.word	0xe000ed00

08009414 <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8009422:	4618      	mov	r0, r3
 8009424:	f7fc fe5a 	bl	80060dc <USBD_LL_Resume>
}
 8009428:	bf00      	nop
 800942a:	3708      	adds	r7, #8
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}

08009430 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b082      	sub	sp, #8
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	460b      	mov	r3, r1
 800943a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8009442:	78fa      	ldrb	r2, [r7, #3]
 8009444:	4611      	mov	r1, r2
 8009446:	4618      	mov	r0, r3
 8009448:	f7fc fe80 	bl	800614c <USBD_LL_IsoOUTIncomplete>
}
 800944c:	bf00      	nop
 800944e:	3708      	adds	r7, #8
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}

08009454 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b082      	sub	sp, #8
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	460b      	mov	r3, r1
 800945e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8009466:	78fa      	ldrb	r2, [r7, #3]
 8009468:	4611      	mov	r1, r2
 800946a:	4618      	mov	r0, r3
 800946c:	f7fc fe61 	bl	8006132 <USBD_LL_IsoINIncomplete>
}
 8009470:	bf00      	nop
 8009472:	3708      	adds	r7, #8
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <HAL_PCD_ConnectCallback>:
  * @brief  Connect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b082      	sub	sp, #8
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8009486:	4618      	mov	r0, r3
 8009488:	f7fc fe6d 	bl	8006166 <USBD_LL_DevConnected>
}
 800948c:	bf00      	nop
 800948e:	3708      	adds	r7, #8
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b082      	sub	sp, #8
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80094a2:	4618      	mov	r0, r3
 80094a4:	f7fc fe6a 	bl	800617c <USBD_LL_DevDisconnected>
}
 80094a8:	bf00      	nop
 80094aa:	3708      	adds	r7, #8
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b082      	sub	sp, #8
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	781b      	ldrb	r3, [r3, #0]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d142      	bne.n	8009546 <USBD_LL_Init+0x96>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80094c0:	4a23      	ldr	r2, [pc, #140]	; (8009550 <USBD_LL_Init+0xa0>)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
  pdev->pData = &hpcd_USB_OTG_FS;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	4a21      	ldr	r2, [pc, #132]	; (8009550 <USBD_LL_Init+0xa0>)
 80094cc:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80094d0:	4b1f      	ldr	r3, [pc, #124]	; (8009550 <USBD_LL_Init+0xa0>)
 80094d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80094d6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80094d8:	4b1d      	ldr	r3, [pc, #116]	; (8009550 <USBD_LL_Init+0xa0>)
 80094da:	2204      	movs	r2, #4
 80094dc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80094de:	4b1c      	ldr	r3, [pc, #112]	; (8009550 <USBD_LL_Init+0xa0>)
 80094e0:	2202      	movs	r2, #2
 80094e2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80094e4:	4b1a      	ldr	r3, [pc, #104]	; (8009550 <USBD_LL_Init+0xa0>)
 80094e6:	2200      	movs	r2, #0
 80094e8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 80094ea:	4b19      	ldr	r3, [pc, #100]	; (8009550 <USBD_LL_Init+0xa0>)
 80094ec:	2200      	movs	r2, #0
 80094ee:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80094f0:	4b17      	ldr	r3, [pc, #92]	; (8009550 <USBD_LL_Init+0xa0>)
 80094f2:	2202      	movs	r2, #2
 80094f4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80094f6:	4b16      	ldr	r3, [pc, #88]	; (8009550 <USBD_LL_Init+0xa0>)
 80094f8:	2200      	movs	r2, #0
 80094fa:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80094fc:	4b14      	ldr	r3, [pc, #80]	; (8009550 <USBD_LL_Init+0xa0>)
 80094fe:	2200      	movs	r2, #0
 8009500:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009502:	4b13      	ldr	r3, [pc, #76]	; (8009550 <USBD_LL_Init+0xa0>)
 8009504:	2200      	movs	r2, #0
 8009506:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8009508:	4b11      	ldr	r3, [pc, #68]	; (8009550 <USBD_LL_Init+0xa0>)
 800950a:	2201      	movs	r2, #1
 800950c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800950e:	4b10      	ldr	r3, [pc, #64]	; (8009550 <USBD_LL_Init+0xa0>)
 8009510:	2200      	movs	r2, #0
 8009512:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009514:	480e      	ldr	r0, [pc, #56]	; (8009550 <USBD_LL_Init+0xa0>)
 8009516:	f7f8 f97f 	bl	8001818 <HAL_PCD_Init>
 800951a:	4603      	mov	r3, r0
 800951c:	2b00      	cmp	r3, #0
 800951e:	d004      	beq.n	800952a <USBD_LL_Init+0x7a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8009520:	f240 1153 	movw	r1, #339	; 0x153
 8009524:	480b      	ldr	r0, [pc, #44]	; (8009554 <USBD_LL_Init+0xa4>)
 8009526:	f7fe fa7d 	bl	8007a24 <_Error_Handler>
  }

  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800952a:	2180      	movs	r1, #128	; 0x80
 800952c:	4808      	ldr	r0, [pc, #32]	; (8009550 <USBD_LL_Init+0xa0>)
 800952e:	f7f9 fa10 	bl	8002952 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009532:	2240      	movs	r2, #64	; 0x40
 8009534:	2100      	movs	r1, #0
 8009536:	4806      	ldr	r0, [pc, #24]	; (8009550 <USBD_LL_Init+0xa0>)
 8009538:	f7f9 f9c0 	bl	80028bc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800953c:	2280      	movs	r2, #128	; 0x80
 800953e:	2101      	movs	r1, #1
 8009540:	4803      	ldr	r0, [pc, #12]	; (8009550 <USBD_LL_Init+0xa0>)
 8009542:	f7f9 f9bb 	bl	80028bc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009546:	2300      	movs	r3, #0
}
 8009548:	4618      	mov	r0, r3
 800954a:	3708      	adds	r7, #8
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}
 8009550:	2001d784 	.word	0x2001d784
 8009554:	0800ae48 	.word	0x0800ae48

08009558 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b084      	sub	sp, #16
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009560:	2300      	movs	r3, #0
 8009562:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009564:	2300      	movs	r3, #0
 8009566:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800956e:	4618      	mov	r0, r3
 8009570:	f7f8 fa59 	bl	8001a26 <HAL_PCD_Start>
 8009574:	4603      	mov	r3, r0
 8009576:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8009578:	7bbb      	ldrb	r3, [r7, #14]
 800957a:	2b03      	cmp	r3, #3
 800957c:	d816      	bhi.n	80095ac <USBD_LL_Start+0x54>
 800957e:	a201      	add	r2, pc, #4	; (adr r2, 8009584 <USBD_LL_Start+0x2c>)
 8009580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009584:	08009595 	.word	0x08009595
 8009588:	0800959b 	.word	0x0800959b
 800958c:	080095a1 	.word	0x080095a1
 8009590:	080095a7 	.word	0x080095a7
    case HAL_OK :
      usb_status = USBD_OK;
 8009594:	2300      	movs	r3, #0
 8009596:	73fb      	strb	r3, [r7, #15]
    break;
 8009598:	e00b      	b.n	80095b2 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800959a:	2302      	movs	r3, #2
 800959c:	73fb      	strb	r3, [r7, #15]
    break;
 800959e:	e008      	b.n	80095b2 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80095a0:	2301      	movs	r3, #1
 80095a2:	73fb      	strb	r3, [r7, #15]
    break;
 80095a4:	e005      	b.n	80095b2 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80095a6:	2302      	movs	r3, #2
 80095a8:	73fb      	strb	r3, [r7, #15]
    break;
 80095aa:	e002      	b.n	80095b2 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80095ac:	2302      	movs	r3, #2
 80095ae:	73fb      	strb	r3, [r7, #15]
    break;
 80095b0:	bf00      	nop
  }
  return usb_status;
 80095b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3710      	adds	r7, #16
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b084      	sub	sp, #16
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	4608      	mov	r0, r1
 80095c6:	4611      	mov	r1, r2
 80095c8:	461a      	mov	r2, r3
 80095ca:	4603      	mov	r3, r0
 80095cc:	70fb      	strb	r3, [r7, #3]
 80095ce:	460b      	mov	r3, r1
 80095d0:	70bb      	strb	r3, [r7, #2]
 80095d2:	4613      	mov	r3, r2
 80095d4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095d6:	2300      	movs	r3, #0
 80095d8:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095da:	2300      	movs	r3, #0
 80095dc:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 80095e4:	78bb      	ldrb	r3, [r7, #2]
 80095e6:	883a      	ldrh	r2, [r7, #0]
 80095e8:	78f9      	ldrb	r1, [r7, #3]
 80095ea:	f7f8 fee2 	bl	80023b2 <HAL_PCD_EP_Open>
 80095ee:	4603      	mov	r3, r0
 80095f0:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80095f2:	7bbb      	ldrb	r3, [r7, #14]
 80095f4:	2b03      	cmp	r3, #3
 80095f6:	d817      	bhi.n	8009628 <USBD_LL_OpenEP+0x6c>
 80095f8:	a201      	add	r2, pc, #4	; (adr r2, 8009600 <USBD_LL_OpenEP+0x44>)
 80095fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095fe:	bf00      	nop
 8009600:	08009611 	.word	0x08009611
 8009604:	08009617 	.word	0x08009617
 8009608:	0800961d 	.word	0x0800961d
 800960c:	08009623 	.word	0x08009623
    case HAL_OK :
      usb_status = USBD_OK;
 8009610:	2300      	movs	r3, #0
 8009612:	73fb      	strb	r3, [r7, #15]
    break;
 8009614:	e00b      	b.n	800962e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009616:	2302      	movs	r3, #2
 8009618:	73fb      	strb	r3, [r7, #15]
    break;
 800961a:	e008      	b.n	800962e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800961c:	2301      	movs	r3, #1
 800961e:	73fb      	strb	r3, [r7, #15]
    break;
 8009620:	e005      	b.n	800962e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009622:	2302      	movs	r3, #2
 8009624:	73fb      	strb	r3, [r7, #15]
    break;
 8009626:	e002      	b.n	800962e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8009628:	2302      	movs	r3, #2
 800962a:	73fb      	strb	r3, [r7, #15]
    break;
 800962c:	bf00      	nop
  }
  return usb_status;
 800962e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009630:	4618      	mov	r0, r3
 8009632:	3710      	adds	r7, #16
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b084      	sub	sp, #16
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	460b      	mov	r3, r1
 8009642:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009644:	2300      	movs	r3, #0
 8009646:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009648:	2300      	movs	r3, #0
 800964a:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8009652:	78fa      	ldrb	r2, [r7, #3]
 8009654:	4611      	mov	r1, r2
 8009656:	4618      	mov	r0, r3
 8009658:	f7f8 ff13 	bl	8002482 <HAL_PCD_EP_Close>
 800965c:	4603      	mov	r3, r0
 800965e:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 8009660:	7bbb      	ldrb	r3, [r7, #14]
 8009662:	2b03      	cmp	r3, #3
 8009664:	d816      	bhi.n	8009694 <USBD_LL_CloseEP+0x5c>
 8009666:	a201      	add	r2, pc, #4	; (adr r2, 800966c <USBD_LL_CloseEP+0x34>)
 8009668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800966c:	0800967d 	.word	0x0800967d
 8009670:	08009683 	.word	0x08009683
 8009674:	08009689 	.word	0x08009689
 8009678:	0800968f 	.word	0x0800968f
    case HAL_OK :
      usb_status = USBD_OK;
 800967c:	2300      	movs	r3, #0
 800967e:	73fb      	strb	r3, [r7, #15]
    break;
 8009680:	e00b      	b.n	800969a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009682:	2302      	movs	r3, #2
 8009684:	73fb      	strb	r3, [r7, #15]
    break;
 8009686:	e008      	b.n	800969a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009688:	2301      	movs	r3, #1
 800968a:	73fb      	strb	r3, [r7, #15]
    break;
 800968c:	e005      	b.n	800969a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800968e:	2302      	movs	r3, #2
 8009690:	73fb      	strb	r3, [r7, #15]
    break;
 8009692:	e002      	b.n	800969a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009694:	2302      	movs	r3, #2
 8009696:	73fb      	strb	r3, [r7, #15]
    break;
 8009698:	bf00      	nop
  }
  return usb_status;  
 800969a:	7bfb      	ldrb	r3, [r7, #15]
}
 800969c:	4618      	mov	r0, r3
 800969e:	3710      	adds	r7, #16
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b084      	sub	sp, #16
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	460b      	mov	r3, r1
 80096ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096b0:	2300      	movs	r3, #0
 80096b2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096b4:	2300      	movs	r3, #0
 80096b6:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80096be:	78fa      	ldrb	r2, [r7, #3]
 80096c0:	4611      	mov	r1, r2
 80096c2:	4618      	mov	r0, r3
 80096c4:	f7f8 ffd3 	bl	800266e <HAL_PCD_EP_SetStall>
 80096c8:	4603      	mov	r3, r0
 80096ca:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80096cc:	7bbb      	ldrb	r3, [r7, #14]
 80096ce:	2b03      	cmp	r3, #3
 80096d0:	d816      	bhi.n	8009700 <USBD_LL_StallEP+0x5c>
 80096d2:	a201      	add	r2, pc, #4	; (adr r2, 80096d8 <USBD_LL_StallEP+0x34>)
 80096d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096d8:	080096e9 	.word	0x080096e9
 80096dc:	080096ef 	.word	0x080096ef
 80096e0:	080096f5 	.word	0x080096f5
 80096e4:	080096fb 	.word	0x080096fb
    case HAL_OK :
      usb_status = USBD_OK;
 80096e8:	2300      	movs	r3, #0
 80096ea:	73fb      	strb	r3, [r7, #15]
    break;
 80096ec:	e00b      	b.n	8009706 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80096ee:	2302      	movs	r3, #2
 80096f0:	73fb      	strb	r3, [r7, #15]
    break;
 80096f2:	e008      	b.n	8009706 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80096f4:	2301      	movs	r3, #1
 80096f6:	73fb      	strb	r3, [r7, #15]
    break;
 80096f8:	e005      	b.n	8009706 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80096fa:	2302      	movs	r3, #2
 80096fc:	73fb      	strb	r3, [r7, #15]
    break;
 80096fe:	e002      	b.n	8009706 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009700:	2302      	movs	r3, #2
 8009702:	73fb      	strb	r3, [r7, #15]
    break;
 8009704:	bf00      	nop
  }
  return usb_status;  
 8009706:	7bfb      	ldrb	r3, [r7, #15]
}
 8009708:	4618      	mov	r0, r3
 800970a:	3710      	adds	r7, #16
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}

08009710 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b084      	sub	sp, #16
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	460b      	mov	r3, r1
 800971a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800971c:	2300      	movs	r3, #0
 800971e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009720:	2300      	movs	r3, #0
 8009722:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800972a:	78fa      	ldrb	r2, [r7, #3]
 800972c:	4611      	mov	r1, r2
 800972e:	4618      	mov	r0, r3
 8009730:	f7f8 fff8 	bl	8002724 <HAL_PCD_EP_ClrStall>
 8009734:	4603      	mov	r3, r0
 8009736:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8009738:	7bbb      	ldrb	r3, [r7, #14]
 800973a:	2b03      	cmp	r3, #3
 800973c:	d816      	bhi.n	800976c <USBD_LL_ClearStallEP+0x5c>
 800973e:	a201      	add	r2, pc, #4	; (adr r2, 8009744 <USBD_LL_ClearStallEP+0x34>)
 8009740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009744:	08009755 	.word	0x08009755
 8009748:	0800975b 	.word	0x0800975b
 800974c:	08009761 	.word	0x08009761
 8009750:	08009767 	.word	0x08009767
    case HAL_OK :
      usb_status = USBD_OK;
 8009754:	2300      	movs	r3, #0
 8009756:	73fb      	strb	r3, [r7, #15]
    break;
 8009758:	e00b      	b.n	8009772 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800975a:	2302      	movs	r3, #2
 800975c:	73fb      	strb	r3, [r7, #15]
    break;
 800975e:	e008      	b.n	8009772 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009760:	2301      	movs	r3, #1
 8009762:	73fb      	strb	r3, [r7, #15]
    break;
 8009764:	e005      	b.n	8009772 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009766:	2302      	movs	r3, #2
 8009768:	73fb      	strb	r3, [r7, #15]
    break;
 800976a:	e002      	b.n	8009772 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800976c:	2302      	movs	r3, #2
 800976e:	73fb      	strb	r3, [r7, #15]
    break;
 8009770:	bf00      	nop
  }
  return usb_status; 
 8009772:	7bfb      	ldrb	r3, [r7, #15]
}
 8009774:	4618      	mov	r0, r3
 8009776:	3710      	adds	r7, #16
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800977c:	b480      	push	{r7}
 800977e:	b085      	sub	sp, #20
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	460b      	mov	r3, r1
 8009786:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800978e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8009790:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009794:	2b00      	cmp	r3, #0
 8009796:	da0b      	bge.n	80097b0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8009798:	78fb      	ldrb	r3, [r7, #3]
 800979a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800979e:	68f9      	ldr	r1, [r7, #12]
 80097a0:	4613      	mov	r3, r2
 80097a2:	00db      	lsls	r3, r3, #3
 80097a4:	1a9b      	subs	r3, r3, r2
 80097a6:	009b      	lsls	r3, r3, #2
 80097a8:	440b      	add	r3, r1
 80097aa:	333a      	adds	r3, #58	; 0x3a
 80097ac:	781b      	ldrb	r3, [r3, #0]
 80097ae:	e00b      	b.n	80097c8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80097b0:	78fb      	ldrb	r3, [r7, #3]
 80097b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80097b6:	68f9      	ldr	r1, [r7, #12]
 80097b8:	4613      	mov	r3, r2
 80097ba:	00db      	lsls	r3, r3, #3
 80097bc:	1a9b      	subs	r3, r3, r2
 80097be:	009b      	lsls	r3, r3, #2
 80097c0:	440b      	add	r3, r1
 80097c2:	f503 73fd 	add.w	r3, r3, #506	; 0x1fa
 80097c6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	3714      	adds	r7, #20
 80097cc:	46bd      	mov	sp, r7
 80097ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d2:	4770      	bx	lr

080097d4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b084      	sub	sp, #16
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
 80097dc:	460b      	mov	r3, r1
 80097de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097e0:	2300      	movs	r3, #0
 80097e2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097e4:	2300      	movs	r3, #0
 80097e6:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80097ee:	78fa      	ldrb	r2, [r7, #3]
 80097f0:	4611      	mov	r1, r2
 80097f2:	4618      	mov	r0, r3
 80097f4:	f7f8 fdbc 	bl	8002370 <HAL_PCD_SetAddress>
 80097f8:	4603      	mov	r3, r0
 80097fa:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 80097fc:	7bbb      	ldrb	r3, [r7, #14]
 80097fe:	2b03      	cmp	r3, #3
 8009800:	d816      	bhi.n	8009830 <USBD_LL_SetUSBAddress+0x5c>
 8009802:	a201      	add	r2, pc, #4	; (adr r2, 8009808 <USBD_LL_SetUSBAddress+0x34>)
 8009804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009808:	08009819 	.word	0x08009819
 800980c:	0800981f 	.word	0x0800981f
 8009810:	08009825 	.word	0x08009825
 8009814:	0800982b 	.word	0x0800982b
    case HAL_OK :
      usb_status = USBD_OK;
 8009818:	2300      	movs	r3, #0
 800981a:	73fb      	strb	r3, [r7, #15]
    break;
 800981c:	e00b      	b.n	8009836 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800981e:	2302      	movs	r3, #2
 8009820:	73fb      	strb	r3, [r7, #15]
    break;
 8009822:	e008      	b.n	8009836 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009824:	2301      	movs	r3, #1
 8009826:	73fb      	strb	r3, [r7, #15]
    break;
 8009828:	e005      	b.n	8009836 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800982a:	2302      	movs	r3, #2
 800982c:	73fb      	strb	r3, [r7, #15]
    break;
 800982e:	e002      	b.n	8009836 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8009830:	2302      	movs	r3, #2
 8009832:	73fb      	strb	r3, [r7, #15]
    break;
 8009834:	bf00      	nop
  }
  return usb_status;  
 8009836:	7bfb      	ldrb	r3, [r7, #15]
}
 8009838:	4618      	mov	r0, r3
 800983a:	3710      	adds	r7, #16
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}

08009840 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b086      	sub	sp, #24
 8009844:	af00      	add	r7, sp, #0
 8009846:	60f8      	str	r0, [r7, #12]
 8009848:	607a      	str	r2, [r7, #4]
 800984a:	461a      	mov	r2, r3
 800984c:	460b      	mov	r3, r1
 800984e:	72fb      	strb	r3, [r7, #11]
 8009850:	4613      	mov	r3, r2
 8009852:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009854:	2300      	movs	r3, #0
 8009856:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009858:	2300      	movs	r3, #0
 800985a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8009862:	893b      	ldrh	r3, [r7, #8]
 8009864:	7af9      	ldrb	r1, [r7, #11]
 8009866:	687a      	ldr	r2, [r7, #4]
 8009868:	f7f8 feb8 	bl	80025dc <HAL_PCD_EP_Transmit>
 800986c:	4603      	mov	r3, r0
 800986e:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8009870:	7dbb      	ldrb	r3, [r7, #22]
 8009872:	2b03      	cmp	r3, #3
 8009874:	d816      	bhi.n	80098a4 <USBD_LL_Transmit+0x64>
 8009876:	a201      	add	r2, pc, #4	; (adr r2, 800987c <USBD_LL_Transmit+0x3c>)
 8009878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800987c:	0800988d 	.word	0x0800988d
 8009880:	08009893 	.word	0x08009893
 8009884:	08009899 	.word	0x08009899
 8009888:	0800989f 	.word	0x0800989f
    case HAL_OK :
      usb_status = USBD_OK;
 800988c:	2300      	movs	r3, #0
 800988e:	75fb      	strb	r3, [r7, #23]
    break;
 8009890:	e00b      	b.n	80098aa <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009892:	2302      	movs	r3, #2
 8009894:	75fb      	strb	r3, [r7, #23]
    break;
 8009896:	e008      	b.n	80098aa <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009898:	2301      	movs	r3, #1
 800989a:	75fb      	strb	r3, [r7, #23]
    break;
 800989c:	e005      	b.n	80098aa <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800989e:	2302      	movs	r3, #2
 80098a0:	75fb      	strb	r3, [r7, #23]
    break;
 80098a2:	e002      	b.n	80098aa <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 80098a4:	2302      	movs	r3, #2
 80098a6:	75fb      	strb	r3, [r7, #23]
    break;
 80098a8:	bf00      	nop
  }
  return usb_status;    
 80098aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3718      	adds	r7, #24
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b086      	sub	sp, #24
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	60f8      	str	r0, [r7, #12]
 80098bc:	607a      	str	r2, [r7, #4]
 80098be:	461a      	mov	r2, r3
 80098c0:	460b      	mov	r3, r1
 80098c2:	72fb      	strb	r3, [r7, #11]
 80098c4:	4613      	mov	r3, r2
 80098c6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098c8:	2300      	movs	r3, #0
 80098ca:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098cc:	2300      	movs	r3, #0
 80098ce:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 80098d6:	893b      	ldrh	r3, [r7, #8]
 80098d8:	7af9      	ldrb	r1, [r7, #11]
 80098da:	687a      	ldr	r2, [r7, #4]
 80098dc:	f7f8 fe1b 	bl	8002516 <HAL_PCD_EP_Receive>
 80098e0:	4603      	mov	r3, r0
 80098e2:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 80098e4:	7dbb      	ldrb	r3, [r7, #22]
 80098e6:	2b03      	cmp	r3, #3
 80098e8:	d816      	bhi.n	8009918 <USBD_LL_PrepareReceive+0x64>
 80098ea:	a201      	add	r2, pc, #4	; (adr r2, 80098f0 <USBD_LL_PrepareReceive+0x3c>)
 80098ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098f0:	08009901 	.word	0x08009901
 80098f4:	08009907 	.word	0x08009907
 80098f8:	0800990d 	.word	0x0800990d
 80098fc:	08009913 	.word	0x08009913
    case HAL_OK :
      usb_status = USBD_OK;
 8009900:	2300      	movs	r3, #0
 8009902:	75fb      	strb	r3, [r7, #23]
    break;
 8009904:	e00b      	b.n	800991e <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009906:	2302      	movs	r3, #2
 8009908:	75fb      	strb	r3, [r7, #23]
    break;
 800990a:	e008      	b.n	800991e <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800990c:	2301      	movs	r3, #1
 800990e:	75fb      	strb	r3, [r7, #23]
    break;
 8009910:	e005      	b.n	800991e <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009912:	2302      	movs	r3, #2
 8009914:	75fb      	strb	r3, [r7, #23]
    break;
 8009916:	e002      	b.n	800991e <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 8009918:	2302      	movs	r3, #2
 800991a:	75fb      	strb	r3, [r7, #23]
    break;
 800991c:	bf00      	nop
  }
  return usb_status; 
 800991e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009920:	4618      	mov	r0, r3
 8009922:	3718      	adds	r7, #24
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}

08009928 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b082      	sub	sp, #8
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	460b      	mov	r3, r1
 8009932:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800993a:	78fa      	ldrb	r2, [r7, #3]
 800993c:	4611      	mov	r1, r2
 800993e:	4618      	mov	r0, r3
 8009940:	f7f8 fe33 	bl	80025aa <HAL_PCD_EP_GetRxCount>
 8009944:	4603      	mov	r3, r0
}
 8009946:	4618      	mov	r0, r3
 8009948:	3708      	adds	r7, #8
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}
	...

08009950 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009950:	b480      	push	{r7}
 8009952:	b083      	sub	sp, #12
 8009954:	af00      	add	r7, sp, #0
 8009956:	4603      	mov	r3, r0
 8009958:	6039      	str	r1, [r7, #0]
 800995a:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	2212      	movs	r2, #18
 8009960:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009962:	4b03      	ldr	r3, [pc, #12]	; (8009970 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009964:	4618      	mov	r0, r3
 8009966:	370c      	adds	r7, #12
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr
 8009970:	200001c0 	.word	0x200001c0

08009974 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009974:	b480      	push	{r7}
 8009976:	b083      	sub	sp, #12
 8009978:	af00      	add	r7, sp, #0
 800997a:	4603      	mov	r3, r0
 800997c:	6039      	str	r1, [r7, #0]
 800997e:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	2204      	movs	r2, #4
 8009984:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009986:	4b03      	ldr	r3, [pc, #12]	; (8009994 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009988:	4618      	mov	r0, r3
 800998a:	370c      	adds	r7, #12
 800998c:	46bd      	mov	sp, r7
 800998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009992:	4770      	bx	lr
 8009994:	200001d4 	.word	0x200001d4

08009998 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b082      	sub	sp, #8
 800999c:	af00      	add	r7, sp, #0
 800999e:	4603      	mov	r3, r0
 80099a0:	6039      	str	r1, [r7, #0]
 80099a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80099a4:	79fb      	ldrb	r3, [r7, #7]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d105      	bne.n	80099b6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80099aa:	683a      	ldr	r2, [r7, #0]
 80099ac:	4907      	ldr	r1, [pc, #28]	; (80099cc <USBD_FS_ProductStrDescriptor+0x34>)
 80099ae:	4808      	ldr	r0, [pc, #32]	; (80099d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80099b0:	f7fd f805 	bl	80069be <USBD_GetString>
 80099b4:	e004      	b.n	80099c0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80099b6:	683a      	ldr	r2, [r7, #0]
 80099b8:	4904      	ldr	r1, [pc, #16]	; (80099cc <USBD_FS_ProductStrDescriptor+0x34>)
 80099ba:	4805      	ldr	r0, [pc, #20]	; (80099d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80099bc:	f7fc ffff 	bl	80069be <USBD_GetString>
  }
  return USBD_StrDesc;
 80099c0:	4b02      	ldr	r3, [pc, #8]	; (80099cc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3708      	adds	r7, #8
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}
 80099ca:	bf00      	nop
 80099cc:	2001db74 	.word	0x2001db74
 80099d0:	0800ae60 	.word	0x0800ae60

080099d4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b082      	sub	sp, #8
 80099d8:	af00      	add	r7, sp, #0
 80099da:	4603      	mov	r3, r0
 80099dc:	6039      	str	r1, [r7, #0]
 80099de:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80099e0:	683a      	ldr	r2, [r7, #0]
 80099e2:	4904      	ldr	r1, [pc, #16]	; (80099f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80099e4:	4804      	ldr	r0, [pc, #16]	; (80099f8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80099e6:	f7fc ffea 	bl	80069be <USBD_GetString>
  return USBD_StrDesc;
 80099ea:	4b02      	ldr	r3, [pc, #8]	; (80099f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3708      	adds	r7, #8
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}
 80099f4:	2001db74 	.word	0x2001db74
 80099f8:	0800ae78 	.word	0x0800ae78

080099fc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b082      	sub	sp, #8
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	4603      	mov	r3, r0
 8009a04:	6039      	str	r1, [r7, #0]
 8009a06:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009a08:	79fb      	ldrb	r3, [r7, #7]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d105      	bne.n	8009a1a <USBD_FS_SerialStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8009a0e:	683a      	ldr	r2, [r7, #0]
 8009a10:	4907      	ldr	r1, [pc, #28]	; (8009a30 <USBD_FS_SerialStrDescriptor+0x34>)
 8009a12:	4808      	ldr	r0, [pc, #32]	; (8009a34 <USBD_FS_SerialStrDescriptor+0x38>)
 8009a14:	f7fc ffd3 	bl	80069be <USBD_GetString>
 8009a18:	e004      	b.n	8009a24 <USBD_FS_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8009a1a:	683a      	ldr	r2, [r7, #0]
 8009a1c:	4904      	ldr	r1, [pc, #16]	; (8009a30 <USBD_FS_SerialStrDescriptor+0x34>)
 8009a1e:	4805      	ldr	r0, [pc, #20]	; (8009a34 <USBD_FS_SerialStrDescriptor+0x38>)
 8009a20:	f7fc ffcd 	bl	80069be <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a24:	4b02      	ldr	r3, [pc, #8]	; (8009a30 <USBD_FS_SerialStrDescriptor+0x34>)
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3708      	adds	r7, #8
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}
 8009a2e:	bf00      	nop
 8009a30:	2001db74 	.word	0x2001db74
 8009a34:	0800ae8c 	.word	0x0800ae8c

08009a38 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b082      	sub	sp, #8
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	4603      	mov	r3, r0
 8009a40:	6039      	str	r1, [r7, #0]
 8009a42:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009a44:	79fb      	ldrb	r3, [r7, #7]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d105      	bne.n	8009a56 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009a4a:	683a      	ldr	r2, [r7, #0]
 8009a4c:	4907      	ldr	r1, [pc, #28]	; (8009a6c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009a4e:	4808      	ldr	r0, [pc, #32]	; (8009a70 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009a50:	f7fc ffb5 	bl	80069be <USBD_GetString>
 8009a54:	e004      	b.n	8009a60 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009a56:	683a      	ldr	r2, [r7, #0]
 8009a58:	4904      	ldr	r1, [pc, #16]	; (8009a6c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009a5a:	4805      	ldr	r0, [pc, #20]	; (8009a70 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009a5c:	f7fc ffaf 	bl	80069be <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a60:	4b02      	ldr	r3, [pc, #8]	; (8009a6c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3708      	adds	r7, #8
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}
 8009a6a:	bf00      	nop
 8009a6c:	2001db74 	.word	0x2001db74
 8009a70:	0800ae9c 	.word	0x0800ae9c

08009a74 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b082      	sub	sp, #8
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	6039      	str	r1, [r7, #0]
 8009a7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009a80:	79fb      	ldrb	r3, [r7, #7]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d105      	bne.n	8009a92 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009a86:	683a      	ldr	r2, [r7, #0]
 8009a88:	4907      	ldr	r1, [pc, #28]	; (8009aa8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009a8a:	4808      	ldr	r0, [pc, #32]	; (8009aac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009a8c:	f7fc ff97 	bl	80069be <USBD_GetString>
 8009a90:	e004      	b.n	8009a9c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009a92:	683a      	ldr	r2, [r7, #0]
 8009a94:	4904      	ldr	r1, [pc, #16]	; (8009aa8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009a96:	4805      	ldr	r0, [pc, #20]	; (8009aac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009a98:	f7fc ff91 	bl	80069be <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a9c:	4b02      	ldr	r3, [pc, #8]	; (8009aa8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3708      	adds	r7, #8
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}
 8009aa6:	bf00      	nop
 8009aa8:	2001db74 	.word	0x2001db74
 8009aac:	0800aea8 	.word	0x0800aea8

08009ab0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009ab0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009ae8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009ab4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009ab6:	e003      	b.n	8009ac0 <LoopCopyDataInit>

08009ab8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009ab8:	4b0c      	ldr	r3, [pc, #48]	; (8009aec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009aba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009abc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009abe:	3104      	adds	r1, #4

08009ac0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009ac0:	480b      	ldr	r0, [pc, #44]	; (8009af0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009ac2:	4b0c      	ldr	r3, [pc, #48]	; (8009af4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009ac4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009ac6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009ac8:	d3f6      	bcc.n	8009ab8 <CopyDataInit>
  ldr  r2, =_sbss
 8009aca:	4a0b      	ldr	r2, [pc, #44]	; (8009af8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009acc:	e002      	b.n	8009ad4 <LoopFillZerobss>

08009ace <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009ace:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009ad0:	f842 3b04 	str.w	r3, [r2], #4

08009ad4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009ad4:	4b09      	ldr	r3, [pc, #36]	; (8009afc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009ad6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009ad8:	d3f9      	bcc.n	8009ace <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009ada:	f7fe fc19 	bl	8008310 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009ade:	f000 f841 	bl	8009b64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009ae2:	f7fd fbc5 	bl	8007270 <main>
  bx  lr    
 8009ae6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009ae8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8009aec:	0800afc4 	.word	0x0800afc4
  ldr  r0, =_sdata
 8009af0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009af4:	2000023c 	.word	0x2000023c
  ldr  r2, =_sbss
 8009af8:	2000023c 	.word	0x2000023c
  ldr  r3, = _ebss
 8009afc:	2001dd88 	.word	0x2001dd88

08009b00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009b00:	e7fe      	b.n	8009b00 <ADC_IRQHandler>
	...

08009b04 <__assert_func>:
 8009b04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009b06:	4614      	mov	r4, r2
 8009b08:	461a      	mov	r2, r3
 8009b0a:	4b09      	ldr	r3, [pc, #36]	; (8009b30 <__assert_func+0x2c>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4605      	mov	r5, r0
 8009b10:	68d8      	ldr	r0, [r3, #12]
 8009b12:	b14c      	cbz	r4, 8009b28 <__assert_func+0x24>
 8009b14:	4b07      	ldr	r3, [pc, #28]	; (8009b34 <__assert_func+0x30>)
 8009b16:	9100      	str	r1, [sp, #0]
 8009b18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009b1c:	4906      	ldr	r1, [pc, #24]	; (8009b38 <__assert_func+0x34>)
 8009b1e:	462b      	mov	r3, r5
 8009b20:	f000 f80e 	bl	8009b40 <fiprintf>
 8009b24:	f000 fd34 	bl	800a590 <abort>
 8009b28:	4b04      	ldr	r3, [pc, #16]	; (8009b3c <__assert_func+0x38>)
 8009b2a:	461c      	mov	r4, r3
 8009b2c:	e7f3      	b.n	8009b16 <__assert_func+0x12>
 8009b2e:	bf00      	nop
 8009b30:	200001d8 	.word	0x200001d8
 8009b34:	0800aee0 	.word	0x0800aee0
 8009b38:	0800aeed 	.word	0x0800aeed
 8009b3c:	0800af1b 	.word	0x0800af1b

08009b40 <fiprintf>:
 8009b40:	b40e      	push	{r1, r2, r3}
 8009b42:	b503      	push	{r0, r1, lr}
 8009b44:	4601      	mov	r1, r0
 8009b46:	ab03      	add	r3, sp, #12
 8009b48:	4805      	ldr	r0, [pc, #20]	; (8009b60 <fiprintf+0x20>)
 8009b4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b4e:	6800      	ldr	r0, [r0, #0]
 8009b50:	9301      	str	r3, [sp, #4]
 8009b52:	f000 f95b 	bl	8009e0c <_vfiprintf_r>
 8009b56:	b002      	add	sp, #8
 8009b58:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b5c:	b003      	add	sp, #12
 8009b5e:	4770      	bx	lr
 8009b60:	200001d8 	.word	0x200001d8

08009b64 <__libc_init_array>:
 8009b64:	b570      	push	{r4, r5, r6, lr}
 8009b66:	4d0d      	ldr	r5, [pc, #52]	; (8009b9c <__libc_init_array+0x38>)
 8009b68:	4c0d      	ldr	r4, [pc, #52]	; (8009ba0 <__libc_init_array+0x3c>)
 8009b6a:	1b64      	subs	r4, r4, r5
 8009b6c:	10a4      	asrs	r4, r4, #2
 8009b6e:	2600      	movs	r6, #0
 8009b70:	42a6      	cmp	r6, r4
 8009b72:	d109      	bne.n	8009b88 <__libc_init_array+0x24>
 8009b74:	4d0b      	ldr	r5, [pc, #44]	; (8009ba4 <__libc_init_array+0x40>)
 8009b76:	4c0c      	ldr	r4, [pc, #48]	; (8009ba8 <__libc_init_array+0x44>)
 8009b78:	f001 f8c6 	bl	800ad08 <_init>
 8009b7c:	1b64      	subs	r4, r4, r5
 8009b7e:	10a4      	asrs	r4, r4, #2
 8009b80:	2600      	movs	r6, #0
 8009b82:	42a6      	cmp	r6, r4
 8009b84:	d105      	bne.n	8009b92 <__libc_init_array+0x2e>
 8009b86:	bd70      	pop	{r4, r5, r6, pc}
 8009b88:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b8c:	4798      	blx	r3
 8009b8e:	3601      	adds	r6, #1
 8009b90:	e7ee      	b.n	8009b70 <__libc_init_array+0xc>
 8009b92:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b96:	4798      	blx	r3
 8009b98:	3601      	adds	r6, #1
 8009b9a:	e7f2      	b.n	8009b82 <__libc_init_array+0x1e>
 8009b9c:	0800afbc 	.word	0x0800afbc
 8009ba0:	0800afbc 	.word	0x0800afbc
 8009ba4:	0800afbc 	.word	0x0800afbc
 8009ba8:	0800afc0 	.word	0x0800afc0

08009bac <malloc>:
 8009bac:	4b02      	ldr	r3, [pc, #8]	; (8009bb8 <malloc+0xc>)
 8009bae:	4601      	mov	r1, r0
 8009bb0:	6818      	ldr	r0, [r3, #0]
 8009bb2:	f000 b88d 	b.w	8009cd0 <_malloc_r>
 8009bb6:	bf00      	nop
 8009bb8:	200001d8 	.word	0x200001d8

08009bbc <free>:
 8009bbc:	4b02      	ldr	r3, [pc, #8]	; (8009bc8 <free+0xc>)
 8009bbe:	4601      	mov	r1, r0
 8009bc0:	6818      	ldr	r0, [r3, #0]
 8009bc2:	f000 b819 	b.w	8009bf8 <_free_r>
 8009bc6:	bf00      	nop
 8009bc8:	200001d8 	.word	0x200001d8

08009bcc <memcpy>:
 8009bcc:	440a      	add	r2, r1
 8009bce:	4291      	cmp	r1, r2
 8009bd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8009bd4:	d100      	bne.n	8009bd8 <memcpy+0xc>
 8009bd6:	4770      	bx	lr
 8009bd8:	b510      	push	{r4, lr}
 8009bda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009be2:	4291      	cmp	r1, r2
 8009be4:	d1f9      	bne.n	8009bda <memcpy+0xe>
 8009be6:	bd10      	pop	{r4, pc}

08009be8 <memset>:
 8009be8:	4402      	add	r2, r0
 8009bea:	4603      	mov	r3, r0
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d100      	bne.n	8009bf2 <memset+0xa>
 8009bf0:	4770      	bx	lr
 8009bf2:	f803 1b01 	strb.w	r1, [r3], #1
 8009bf6:	e7f9      	b.n	8009bec <memset+0x4>

08009bf8 <_free_r>:
 8009bf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009bfa:	2900      	cmp	r1, #0
 8009bfc:	d044      	beq.n	8009c88 <_free_r+0x90>
 8009bfe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c02:	9001      	str	r0, [sp, #4]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	f1a1 0404 	sub.w	r4, r1, #4
 8009c0a:	bfb8      	it	lt
 8009c0c:	18e4      	addlt	r4, r4, r3
 8009c0e:	f000 fee7 	bl	800a9e0 <__malloc_lock>
 8009c12:	4a1e      	ldr	r2, [pc, #120]	; (8009c8c <_free_r+0x94>)
 8009c14:	9801      	ldr	r0, [sp, #4]
 8009c16:	6813      	ldr	r3, [r2, #0]
 8009c18:	b933      	cbnz	r3, 8009c28 <_free_r+0x30>
 8009c1a:	6063      	str	r3, [r4, #4]
 8009c1c:	6014      	str	r4, [r2, #0]
 8009c1e:	b003      	add	sp, #12
 8009c20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c24:	f000 bee2 	b.w	800a9ec <__malloc_unlock>
 8009c28:	42a3      	cmp	r3, r4
 8009c2a:	d908      	bls.n	8009c3e <_free_r+0x46>
 8009c2c:	6825      	ldr	r5, [r4, #0]
 8009c2e:	1961      	adds	r1, r4, r5
 8009c30:	428b      	cmp	r3, r1
 8009c32:	bf01      	itttt	eq
 8009c34:	6819      	ldreq	r1, [r3, #0]
 8009c36:	685b      	ldreq	r3, [r3, #4]
 8009c38:	1949      	addeq	r1, r1, r5
 8009c3a:	6021      	streq	r1, [r4, #0]
 8009c3c:	e7ed      	b.n	8009c1a <_free_r+0x22>
 8009c3e:	461a      	mov	r2, r3
 8009c40:	685b      	ldr	r3, [r3, #4]
 8009c42:	b10b      	cbz	r3, 8009c48 <_free_r+0x50>
 8009c44:	42a3      	cmp	r3, r4
 8009c46:	d9fa      	bls.n	8009c3e <_free_r+0x46>
 8009c48:	6811      	ldr	r1, [r2, #0]
 8009c4a:	1855      	adds	r5, r2, r1
 8009c4c:	42a5      	cmp	r5, r4
 8009c4e:	d10b      	bne.n	8009c68 <_free_r+0x70>
 8009c50:	6824      	ldr	r4, [r4, #0]
 8009c52:	4421      	add	r1, r4
 8009c54:	1854      	adds	r4, r2, r1
 8009c56:	42a3      	cmp	r3, r4
 8009c58:	6011      	str	r1, [r2, #0]
 8009c5a:	d1e0      	bne.n	8009c1e <_free_r+0x26>
 8009c5c:	681c      	ldr	r4, [r3, #0]
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	6053      	str	r3, [r2, #4]
 8009c62:	4421      	add	r1, r4
 8009c64:	6011      	str	r1, [r2, #0]
 8009c66:	e7da      	b.n	8009c1e <_free_r+0x26>
 8009c68:	d902      	bls.n	8009c70 <_free_r+0x78>
 8009c6a:	230c      	movs	r3, #12
 8009c6c:	6003      	str	r3, [r0, #0]
 8009c6e:	e7d6      	b.n	8009c1e <_free_r+0x26>
 8009c70:	6825      	ldr	r5, [r4, #0]
 8009c72:	1961      	adds	r1, r4, r5
 8009c74:	428b      	cmp	r3, r1
 8009c76:	bf04      	itt	eq
 8009c78:	6819      	ldreq	r1, [r3, #0]
 8009c7a:	685b      	ldreq	r3, [r3, #4]
 8009c7c:	6063      	str	r3, [r4, #4]
 8009c7e:	bf04      	itt	eq
 8009c80:	1949      	addeq	r1, r1, r5
 8009c82:	6021      	streq	r1, [r4, #0]
 8009c84:	6054      	str	r4, [r2, #4]
 8009c86:	e7ca      	b.n	8009c1e <_free_r+0x26>
 8009c88:	b003      	add	sp, #12
 8009c8a:	bd30      	pop	{r4, r5, pc}
 8009c8c:	2001dd74 	.word	0x2001dd74

08009c90 <sbrk_aligned>:
 8009c90:	b570      	push	{r4, r5, r6, lr}
 8009c92:	4e0e      	ldr	r6, [pc, #56]	; (8009ccc <sbrk_aligned+0x3c>)
 8009c94:	460c      	mov	r4, r1
 8009c96:	6831      	ldr	r1, [r6, #0]
 8009c98:	4605      	mov	r5, r0
 8009c9a:	b911      	cbnz	r1, 8009ca2 <sbrk_aligned+0x12>
 8009c9c:	f000 fba8 	bl	800a3f0 <_sbrk_r>
 8009ca0:	6030      	str	r0, [r6, #0]
 8009ca2:	4621      	mov	r1, r4
 8009ca4:	4628      	mov	r0, r5
 8009ca6:	f000 fba3 	bl	800a3f0 <_sbrk_r>
 8009caa:	1c43      	adds	r3, r0, #1
 8009cac:	d00a      	beq.n	8009cc4 <sbrk_aligned+0x34>
 8009cae:	1cc4      	adds	r4, r0, #3
 8009cb0:	f024 0403 	bic.w	r4, r4, #3
 8009cb4:	42a0      	cmp	r0, r4
 8009cb6:	d007      	beq.n	8009cc8 <sbrk_aligned+0x38>
 8009cb8:	1a21      	subs	r1, r4, r0
 8009cba:	4628      	mov	r0, r5
 8009cbc:	f000 fb98 	bl	800a3f0 <_sbrk_r>
 8009cc0:	3001      	adds	r0, #1
 8009cc2:	d101      	bne.n	8009cc8 <sbrk_aligned+0x38>
 8009cc4:	f04f 34ff 	mov.w	r4, #4294967295
 8009cc8:	4620      	mov	r0, r4
 8009cca:	bd70      	pop	{r4, r5, r6, pc}
 8009ccc:	2001dd78 	.word	0x2001dd78

08009cd0 <_malloc_r>:
 8009cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cd4:	1ccd      	adds	r5, r1, #3
 8009cd6:	f025 0503 	bic.w	r5, r5, #3
 8009cda:	3508      	adds	r5, #8
 8009cdc:	2d0c      	cmp	r5, #12
 8009cde:	bf38      	it	cc
 8009ce0:	250c      	movcc	r5, #12
 8009ce2:	2d00      	cmp	r5, #0
 8009ce4:	4607      	mov	r7, r0
 8009ce6:	db01      	blt.n	8009cec <_malloc_r+0x1c>
 8009ce8:	42a9      	cmp	r1, r5
 8009cea:	d905      	bls.n	8009cf8 <_malloc_r+0x28>
 8009cec:	230c      	movs	r3, #12
 8009cee:	603b      	str	r3, [r7, #0]
 8009cf0:	2600      	movs	r6, #0
 8009cf2:	4630      	mov	r0, r6
 8009cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cf8:	4e2e      	ldr	r6, [pc, #184]	; (8009db4 <_malloc_r+0xe4>)
 8009cfa:	f000 fe71 	bl	800a9e0 <__malloc_lock>
 8009cfe:	6833      	ldr	r3, [r6, #0]
 8009d00:	461c      	mov	r4, r3
 8009d02:	bb34      	cbnz	r4, 8009d52 <_malloc_r+0x82>
 8009d04:	4629      	mov	r1, r5
 8009d06:	4638      	mov	r0, r7
 8009d08:	f7ff ffc2 	bl	8009c90 <sbrk_aligned>
 8009d0c:	1c43      	adds	r3, r0, #1
 8009d0e:	4604      	mov	r4, r0
 8009d10:	d14d      	bne.n	8009dae <_malloc_r+0xde>
 8009d12:	6834      	ldr	r4, [r6, #0]
 8009d14:	4626      	mov	r6, r4
 8009d16:	2e00      	cmp	r6, #0
 8009d18:	d140      	bne.n	8009d9c <_malloc_r+0xcc>
 8009d1a:	6823      	ldr	r3, [r4, #0]
 8009d1c:	4631      	mov	r1, r6
 8009d1e:	4638      	mov	r0, r7
 8009d20:	eb04 0803 	add.w	r8, r4, r3
 8009d24:	f000 fb64 	bl	800a3f0 <_sbrk_r>
 8009d28:	4580      	cmp	r8, r0
 8009d2a:	d13a      	bne.n	8009da2 <_malloc_r+0xd2>
 8009d2c:	6821      	ldr	r1, [r4, #0]
 8009d2e:	3503      	adds	r5, #3
 8009d30:	1a6d      	subs	r5, r5, r1
 8009d32:	f025 0503 	bic.w	r5, r5, #3
 8009d36:	3508      	adds	r5, #8
 8009d38:	2d0c      	cmp	r5, #12
 8009d3a:	bf38      	it	cc
 8009d3c:	250c      	movcc	r5, #12
 8009d3e:	4629      	mov	r1, r5
 8009d40:	4638      	mov	r0, r7
 8009d42:	f7ff ffa5 	bl	8009c90 <sbrk_aligned>
 8009d46:	3001      	adds	r0, #1
 8009d48:	d02b      	beq.n	8009da2 <_malloc_r+0xd2>
 8009d4a:	6823      	ldr	r3, [r4, #0]
 8009d4c:	442b      	add	r3, r5
 8009d4e:	6023      	str	r3, [r4, #0]
 8009d50:	e00e      	b.n	8009d70 <_malloc_r+0xa0>
 8009d52:	6822      	ldr	r2, [r4, #0]
 8009d54:	1b52      	subs	r2, r2, r5
 8009d56:	d41e      	bmi.n	8009d96 <_malloc_r+0xc6>
 8009d58:	2a0b      	cmp	r2, #11
 8009d5a:	d916      	bls.n	8009d8a <_malloc_r+0xba>
 8009d5c:	1961      	adds	r1, r4, r5
 8009d5e:	42a3      	cmp	r3, r4
 8009d60:	6025      	str	r5, [r4, #0]
 8009d62:	bf18      	it	ne
 8009d64:	6059      	strne	r1, [r3, #4]
 8009d66:	6863      	ldr	r3, [r4, #4]
 8009d68:	bf08      	it	eq
 8009d6a:	6031      	streq	r1, [r6, #0]
 8009d6c:	5162      	str	r2, [r4, r5]
 8009d6e:	604b      	str	r3, [r1, #4]
 8009d70:	4638      	mov	r0, r7
 8009d72:	f104 060b 	add.w	r6, r4, #11
 8009d76:	f000 fe39 	bl	800a9ec <__malloc_unlock>
 8009d7a:	f026 0607 	bic.w	r6, r6, #7
 8009d7e:	1d23      	adds	r3, r4, #4
 8009d80:	1af2      	subs	r2, r6, r3
 8009d82:	d0b6      	beq.n	8009cf2 <_malloc_r+0x22>
 8009d84:	1b9b      	subs	r3, r3, r6
 8009d86:	50a3      	str	r3, [r4, r2]
 8009d88:	e7b3      	b.n	8009cf2 <_malloc_r+0x22>
 8009d8a:	6862      	ldr	r2, [r4, #4]
 8009d8c:	42a3      	cmp	r3, r4
 8009d8e:	bf0c      	ite	eq
 8009d90:	6032      	streq	r2, [r6, #0]
 8009d92:	605a      	strne	r2, [r3, #4]
 8009d94:	e7ec      	b.n	8009d70 <_malloc_r+0xa0>
 8009d96:	4623      	mov	r3, r4
 8009d98:	6864      	ldr	r4, [r4, #4]
 8009d9a:	e7b2      	b.n	8009d02 <_malloc_r+0x32>
 8009d9c:	4634      	mov	r4, r6
 8009d9e:	6876      	ldr	r6, [r6, #4]
 8009da0:	e7b9      	b.n	8009d16 <_malloc_r+0x46>
 8009da2:	230c      	movs	r3, #12
 8009da4:	603b      	str	r3, [r7, #0]
 8009da6:	4638      	mov	r0, r7
 8009da8:	f000 fe20 	bl	800a9ec <__malloc_unlock>
 8009dac:	e7a1      	b.n	8009cf2 <_malloc_r+0x22>
 8009dae:	6025      	str	r5, [r4, #0]
 8009db0:	e7de      	b.n	8009d70 <_malloc_r+0xa0>
 8009db2:	bf00      	nop
 8009db4:	2001dd74 	.word	0x2001dd74

08009db8 <__sfputc_r>:
 8009db8:	6893      	ldr	r3, [r2, #8]
 8009dba:	3b01      	subs	r3, #1
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	b410      	push	{r4}
 8009dc0:	6093      	str	r3, [r2, #8]
 8009dc2:	da08      	bge.n	8009dd6 <__sfputc_r+0x1e>
 8009dc4:	6994      	ldr	r4, [r2, #24]
 8009dc6:	42a3      	cmp	r3, r4
 8009dc8:	db01      	blt.n	8009dce <__sfputc_r+0x16>
 8009dca:	290a      	cmp	r1, #10
 8009dcc:	d103      	bne.n	8009dd6 <__sfputc_r+0x1e>
 8009dce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009dd2:	f000 bb1d 	b.w	800a410 <__swbuf_r>
 8009dd6:	6813      	ldr	r3, [r2, #0]
 8009dd8:	1c58      	adds	r0, r3, #1
 8009dda:	6010      	str	r0, [r2, #0]
 8009ddc:	7019      	strb	r1, [r3, #0]
 8009dde:	4608      	mov	r0, r1
 8009de0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009de4:	4770      	bx	lr

08009de6 <__sfputs_r>:
 8009de6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009de8:	4606      	mov	r6, r0
 8009dea:	460f      	mov	r7, r1
 8009dec:	4614      	mov	r4, r2
 8009dee:	18d5      	adds	r5, r2, r3
 8009df0:	42ac      	cmp	r4, r5
 8009df2:	d101      	bne.n	8009df8 <__sfputs_r+0x12>
 8009df4:	2000      	movs	r0, #0
 8009df6:	e007      	b.n	8009e08 <__sfputs_r+0x22>
 8009df8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dfc:	463a      	mov	r2, r7
 8009dfe:	4630      	mov	r0, r6
 8009e00:	f7ff ffda 	bl	8009db8 <__sfputc_r>
 8009e04:	1c43      	adds	r3, r0, #1
 8009e06:	d1f3      	bne.n	8009df0 <__sfputs_r+0xa>
 8009e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009e0c <_vfiprintf_r>:
 8009e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e10:	460d      	mov	r5, r1
 8009e12:	b09d      	sub	sp, #116	; 0x74
 8009e14:	4614      	mov	r4, r2
 8009e16:	4698      	mov	r8, r3
 8009e18:	4606      	mov	r6, r0
 8009e1a:	b118      	cbz	r0, 8009e24 <_vfiprintf_r+0x18>
 8009e1c:	6983      	ldr	r3, [r0, #24]
 8009e1e:	b90b      	cbnz	r3, 8009e24 <_vfiprintf_r+0x18>
 8009e20:	f000 fcd8 	bl	800a7d4 <__sinit>
 8009e24:	4b89      	ldr	r3, [pc, #548]	; (800a04c <_vfiprintf_r+0x240>)
 8009e26:	429d      	cmp	r5, r3
 8009e28:	d11b      	bne.n	8009e62 <_vfiprintf_r+0x56>
 8009e2a:	6875      	ldr	r5, [r6, #4]
 8009e2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e2e:	07d9      	lsls	r1, r3, #31
 8009e30:	d405      	bmi.n	8009e3e <_vfiprintf_r+0x32>
 8009e32:	89ab      	ldrh	r3, [r5, #12]
 8009e34:	059a      	lsls	r2, r3, #22
 8009e36:	d402      	bmi.n	8009e3e <_vfiprintf_r+0x32>
 8009e38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e3a:	f000 fd69 	bl	800a910 <__retarget_lock_acquire_recursive>
 8009e3e:	89ab      	ldrh	r3, [r5, #12]
 8009e40:	071b      	lsls	r3, r3, #28
 8009e42:	d501      	bpl.n	8009e48 <_vfiprintf_r+0x3c>
 8009e44:	692b      	ldr	r3, [r5, #16]
 8009e46:	b9eb      	cbnz	r3, 8009e84 <_vfiprintf_r+0x78>
 8009e48:	4629      	mov	r1, r5
 8009e4a:	4630      	mov	r0, r6
 8009e4c:	f000 fb32 	bl	800a4b4 <__swsetup_r>
 8009e50:	b1c0      	cbz	r0, 8009e84 <_vfiprintf_r+0x78>
 8009e52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e54:	07dc      	lsls	r4, r3, #31
 8009e56:	d50e      	bpl.n	8009e76 <_vfiprintf_r+0x6a>
 8009e58:	f04f 30ff 	mov.w	r0, #4294967295
 8009e5c:	b01d      	add	sp, #116	; 0x74
 8009e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e62:	4b7b      	ldr	r3, [pc, #492]	; (800a050 <_vfiprintf_r+0x244>)
 8009e64:	429d      	cmp	r5, r3
 8009e66:	d101      	bne.n	8009e6c <_vfiprintf_r+0x60>
 8009e68:	68b5      	ldr	r5, [r6, #8]
 8009e6a:	e7df      	b.n	8009e2c <_vfiprintf_r+0x20>
 8009e6c:	4b79      	ldr	r3, [pc, #484]	; (800a054 <_vfiprintf_r+0x248>)
 8009e6e:	429d      	cmp	r5, r3
 8009e70:	bf08      	it	eq
 8009e72:	68f5      	ldreq	r5, [r6, #12]
 8009e74:	e7da      	b.n	8009e2c <_vfiprintf_r+0x20>
 8009e76:	89ab      	ldrh	r3, [r5, #12]
 8009e78:	0598      	lsls	r0, r3, #22
 8009e7a:	d4ed      	bmi.n	8009e58 <_vfiprintf_r+0x4c>
 8009e7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e7e:	f000 fd48 	bl	800a912 <__retarget_lock_release_recursive>
 8009e82:	e7e9      	b.n	8009e58 <_vfiprintf_r+0x4c>
 8009e84:	2300      	movs	r3, #0
 8009e86:	9309      	str	r3, [sp, #36]	; 0x24
 8009e88:	2320      	movs	r3, #32
 8009e8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e92:	2330      	movs	r3, #48	; 0x30
 8009e94:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a058 <_vfiprintf_r+0x24c>
 8009e98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e9c:	f04f 0901 	mov.w	r9, #1
 8009ea0:	4623      	mov	r3, r4
 8009ea2:	469a      	mov	sl, r3
 8009ea4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ea8:	b10a      	cbz	r2, 8009eae <_vfiprintf_r+0xa2>
 8009eaa:	2a25      	cmp	r2, #37	; 0x25
 8009eac:	d1f9      	bne.n	8009ea2 <_vfiprintf_r+0x96>
 8009eae:	ebba 0b04 	subs.w	fp, sl, r4
 8009eb2:	d00b      	beq.n	8009ecc <_vfiprintf_r+0xc0>
 8009eb4:	465b      	mov	r3, fp
 8009eb6:	4622      	mov	r2, r4
 8009eb8:	4629      	mov	r1, r5
 8009eba:	4630      	mov	r0, r6
 8009ebc:	f7ff ff93 	bl	8009de6 <__sfputs_r>
 8009ec0:	3001      	adds	r0, #1
 8009ec2:	f000 80aa 	beq.w	800a01a <_vfiprintf_r+0x20e>
 8009ec6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ec8:	445a      	add	r2, fp
 8009eca:	9209      	str	r2, [sp, #36]	; 0x24
 8009ecc:	f89a 3000 	ldrb.w	r3, [sl]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	f000 80a2 	beq.w	800a01a <_vfiprintf_r+0x20e>
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8009edc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ee0:	f10a 0a01 	add.w	sl, sl, #1
 8009ee4:	9304      	str	r3, [sp, #16]
 8009ee6:	9307      	str	r3, [sp, #28]
 8009ee8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009eec:	931a      	str	r3, [sp, #104]	; 0x68
 8009eee:	4654      	mov	r4, sl
 8009ef0:	2205      	movs	r2, #5
 8009ef2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ef6:	4858      	ldr	r0, [pc, #352]	; (800a058 <_vfiprintf_r+0x24c>)
 8009ef8:	f7f6 f97a 	bl	80001f0 <memchr>
 8009efc:	9a04      	ldr	r2, [sp, #16]
 8009efe:	b9d8      	cbnz	r0, 8009f38 <_vfiprintf_r+0x12c>
 8009f00:	06d1      	lsls	r1, r2, #27
 8009f02:	bf44      	itt	mi
 8009f04:	2320      	movmi	r3, #32
 8009f06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f0a:	0713      	lsls	r3, r2, #28
 8009f0c:	bf44      	itt	mi
 8009f0e:	232b      	movmi	r3, #43	; 0x2b
 8009f10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f14:	f89a 3000 	ldrb.w	r3, [sl]
 8009f18:	2b2a      	cmp	r3, #42	; 0x2a
 8009f1a:	d015      	beq.n	8009f48 <_vfiprintf_r+0x13c>
 8009f1c:	9a07      	ldr	r2, [sp, #28]
 8009f1e:	4654      	mov	r4, sl
 8009f20:	2000      	movs	r0, #0
 8009f22:	f04f 0c0a 	mov.w	ip, #10
 8009f26:	4621      	mov	r1, r4
 8009f28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f2c:	3b30      	subs	r3, #48	; 0x30
 8009f2e:	2b09      	cmp	r3, #9
 8009f30:	d94e      	bls.n	8009fd0 <_vfiprintf_r+0x1c4>
 8009f32:	b1b0      	cbz	r0, 8009f62 <_vfiprintf_r+0x156>
 8009f34:	9207      	str	r2, [sp, #28]
 8009f36:	e014      	b.n	8009f62 <_vfiprintf_r+0x156>
 8009f38:	eba0 0308 	sub.w	r3, r0, r8
 8009f3c:	fa09 f303 	lsl.w	r3, r9, r3
 8009f40:	4313      	orrs	r3, r2
 8009f42:	9304      	str	r3, [sp, #16]
 8009f44:	46a2      	mov	sl, r4
 8009f46:	e7d2      	b.n	8009eee <_vfiprintf_r+0xe2>
 8009f48:	9b03      	ldr	r3, [sp, #12]
 8009f4a:	1d19      	adds	r1, r3, #4
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	9103      	str	r1, [sp, #12]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	bfbb      	ittet	lt
 8009f54:	425b      	neglt	r3, r3
 8009f56:	f042 0202 	orrlt.w	r2, r2, #2
 8009f5a:	9307      	strge	r3, [sp, #28]
 8009f5c:	9307      	strlt	r3, [sp, #28]
 8009f5e:	bfb8      	it	lt
 8009f60:	9204      	strlt	r2, [sp, #16]
 8009f62:	7823      	ldrb	r3, [r4, #0]
 8009f64:	2b2e      	cmp	r3, #46	; 0x2e
 8009f66:	d10c      	bne.n	8009f82 <_vfiprintf_r+0x176>
 8009f68:	7863      	ldrb	r3, [r4, #1]
 8009f6a:	2b2a      	cmp	r3, #42	; 0x2a
 8009f6c:	d135      	bne.n	8009fda <_vfiprintf_r+0x1ce>
 8009f6e:	9b03      	ldr	r3, [sp, #12]
 8009f70:	1d1a      	adds	r2, r3, #4
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	9203      	str	r2, [sp, #12]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	bfb8      	it	lt
 8009f7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f7e:	3402      	adds	r4, #2
 8009f80:	9305      	str	r3, [sp, #20]
 8009f82:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a068 <_vfiprintf_r+0x25c>
 8009f86:	7821      	ldrb	r1, [r4, #0]
 8009f88:	2203      	movs	r2, #3
 8009f8a:	4650      	mov	r0, sl
 8009f8c:	f7f6 f930 	bl	80001f0 <memchr>
 8009f90:	b140      	cbz	r0, 8009fa4 <_vfiprintf_r+0x198>
 8009f92:	2340      	movs	r3, #64	; 0x40
 8009f94:	eba0 000a 	sub.w	r0, r0, sl
 8009f98:	fa03 f000 	lsl.w	r0, r3, r0
 8009f9c:	9b04      	ldr	r3, [sp, #16]
 8009f9e:	4303      	orrs	r3, r0
 8009fa0:	3401      	adds	r4, #1
 8009fa2:	9304      	str	r3, [sp, #16]
 8009fa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fa8:	482c      	ldr	r0, [pc, #176]	; (800a05c <_vfiprintf_r+0x250>)
 8009faa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009fae:	2206      	movs	r2, #6
 8009fb0:	f7f6 f91e 	bl	80001f0 <memchr>
 8009fb4:	2800      	cmp	r0, #0
 8009fb6:	d03f      	beq.n	800a038 <_vfiprintf_r+0x22c>
 8009fb8:	4b29      	ldr	r3, [pc, #164]	; (800a060 <_vfiprintf_r+0x254>)
 8009fba:	bb1b      	cbnz	r3, 800a004 <_vfiprintf_r+0x1f8>
 8009fbc:	9b03      	ldr	r3, [sp, #12]
 8009fbe:	3307      	adds	r3, #7
 8009fc0:	f023 0307 	bic.w	r3, r3, #7
 8009fc4:	3308      	adds	r3, #8
 8009fc6:	9303      	str	r3, [sp, #12]
 8009fc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fca:	443b      	add	r3, r7
 8009fcc:	9309      	str	r3, [sp, #36]	; 0x24
 8009fce:	e767      	b.n	8009ea0 <_vfiprintf_r+0x94>
 8009fd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8009fd4:	460c      	mov	r4, r1
 8009fd6:	2001      	movs	r0, #1
 8009fd8:	e7a5      	b.n	8009f26 <_vfiprintf_r+0x11a>
 8009fda:	2300      	movs	r3, #0
 8009fdc:	3401      	adds	r4, #1
 8009fde:	9305      	str	r3, [sp, #20]
 8009fe0:	4619      	mov	r1, r3
 8009fe2:	f04f 0c0a 	mov.w	ip, #10
 8009fe6:	4620      	mov	r0, r4
 8009fe8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009fec:	3a30      	subs	r2, #48	; 0x30
 8009fee:	2a09      	cmp	r2, #9
 8009ff0:	d903      	bls.n	8009ffa <_vfiprintf_r+0x1ee>
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d0c5      	beq.n	8009f82 <_vfiprintf_r+0x176>
 8009ff6:	9105      	str	r1, [sp, #20]
 8009ff8:	e7c3      	b.n	8009f82 <_vfiprintf_r+0x176>
 8009ffa:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ffe:	4604      	mov	r4, r0
 800a000:	2301      	movs	r3, #1
 800a002:	e7f0      	b.n	8009fe6 <_vfiprintf_r+0x1da>
 800a004:	ab03      	add	r3, sp, #12
 800a006:	9300      	str	r3, [sp, #0]
 800a008:	462a      	mov	r2, r5
 800a00a:	4b16      	ldr	r3, [pc, #88]	; (800a064 <_vfiprintf_r+0x258>)
 800a00c:	a904      	add	r1, sp, #16
 800a00e:	4630      	mov	r0, r6
 800a010:	f3af 8000 	nop.w
 800a014:	4607      	mov	r7, r0
 800a016:	1c78      	adds	r0, r7, #1
 800a018:	d1d6      	bne.n	8009fc8 <_vfiprintf_r+0x1bc>
 800a01a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a01c:	07d9      	lsls	r1, r3, #31
 800a01e:	d405      	bmi.n	800a02c <_vfiprintf_r+0x220>
 800a020:	89ab      	ldrh	r3, [r5, #12]
 800a022:	059a      	lsls	r2, r3, #22
 800a024:	d402      	bmi.n	800a02c <_vfiprintf_r+0x220>
 800a026:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a028:	f000 fc73 	bl	800a912 <__retarget_lock_release_recursive>
 800a02c:	89ab      	ldrh	r3, [r5, #12]
 800a02e:	065b      	lsls	r3, r3, #25
 800a030:	f53f af12 	bmi.w	8009e58 <_vfiprintf_r+0x4c>
 800a034:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a036:	e711      	b.n	8009e5c <_vfiprintf_r+0x50>
 800a038:	ab03      	add	r3, sp, #12
 800a03a:	9300      	str	r3, [sp, #0]
 800a03c:	462a      	mov	r2, r5
 800a03e:	4b09      	ldr	r3, [pc, #36]	; (800a064 <_vfiprintf_r+0x258>)
 800a040:	a904      	add	r1, sp, #16
 800a042:	4630      	mov	r0, r6
 800a044:	f000 f880 	bl	800a148 <_printf_i>
 800a048:	e7e4      	b.n	800a014 <_vfiprintf_r+0x208>
 800a04a:	bf00      	nop
 800a04c:	0800af74 	.word	0x0800af74
 800a050:	0800af94 	.word	0x0800af94
 800a054:	0800af54 	.word	0x0800af54
 800a058:	0800af20 	.word	0x0800af20
 800a05c:	0800af2a 	.word	0x0800af2a
 800a060:	00000000 	.word	0x00000000
 800a064:	08009de7 	.word	0x08009de7
 800a068:	0800af26 	.word	0x0800af26

0800a06c <_printf_common>:
 800a06c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a070:	4616      	mov	r6, r2
 800a072:	4699      	mov	r9, r3
 800a074:	688a      	ldr	r2, [r1, #8]
 800a076:	690b      	ldr	r3, [r1, #16]
 800a078:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a07c:	4293      	cmp	r3, r2
 800a07e:	bfb8      	it	lt
 800a080:	4613      	movlt	r3, r2
 800a082:	6033      	str	r3, [r6, #0]
 800a084:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a088:	4607      	mov	r7, r0
 800a08a:	460c      	mov	r4, r1
 800a08c:	b10a      	cbz	r2, 800a092 <_printf_common+0x26>
 800a08e:	3301      	adds	r3, #1
 800a090:	6033      	str	r3, [r6, #0]
 800a092:	6823      	ldr	r3, [r4, #0]
 800a094:	0699      	lsls	r1, r3, #26
 800a096:	bf42      	ittt	mi
 800a098:	6833      	ldrmi	r3, [r6, #0]
 800a09a:	3302      	addmi	r3, #2
 800a09c:	6033      	strmi	r3, [r6, #0]
 800a09e:	6825      	ldr	r5, [r4, #0]
 800a0a0:	f015 0506 	ands.w	r5, r5, #6
 800a0a4:	d106      	bne.n	800a0b4 <_printf_common+0x48>
 800a0a6:	f104 0a19 	add.w	sl, r4, #25
 800a0aa:	68e3      	ldr	r3, [r4, #12]
 800a0ac:	6832      	ldr	r2, [r6, #0]
 800a0ae:	1a9b      	subs	r3, r3, r2
 800a0b0:	42ab      	cmp	r3, r5
 800a0b2:	dc26      	bgt.n	800a102 <_printf_common+0x96>
 800a0b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a0b8:	1e13      	subs	r3, r2, #0
 800a0ba:	6822      	ldr	r2, [r4, #0]
 800a0bc:	bf18      	it	ne
 800a0be:	2301      	movne	r3, #1
 800a0c0:	0692      	lsls	r2, r2, #26
 800a0c2:	d42b      	bmi.n	800a11c <_printf_common+0xb0>
 800a0c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a0c8:	4649      	mov	r1, r9
 800a0ca:	4638      	mov	r0, r7
 800a0cc:	47c0      	blx	r8
 800a0ce:	3001      	adds	r0, #1
 800a0d0:	d01e      	beq.n	800a110 <_printf_common+0xa4>
 800a0d2:	6823      	ldr	r3, [r4, #0]
 800a0d4:	68e5      	ldr	r5, [r4, #12]
 800a0d6:	6832      	ldr	r2, [r6, #0]
 800a0d8:	f003 0306 	and.w	r3, r3, #6
 800a0dc:	2b04      	cmp	r3, #4
 800a0de:	bf08      	it	eq
 800a0e0:	1aad      	subeq	r5, r5, r2
 800a0e2:	68a3      	ldr	r3, [r4, #8]
 800a0e4:	6922      	ldr	r2, [r4, #16]
 800a0e6:	bf0c      	ite	eq
 800a0e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a0ec:	2500      	movne	r5, #0
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	bfc4      	itt	gt
 800a0f2:	1a9b      	subgt	r3, r3, r2
 800a0f4:	18ed      	addgt	r5, r5, r3
 800a0f6:	2600      	movs	r6, #0
 800a0f8:	341a      	adds	r4, #26
 800a0fa:	42b5      	cmp	r5, r6
 800a0fc:	d11a      	bne.n	800a134 <_printf_common+0xc8>
 800a0fe:	2000      	movs	r0, #0
 800a100:	e008      	b.n	800a114 <_printf_common+0xa8>
 800a102:	2301      	movs	r3, #1
 800a104:	4652      	mov	r2, sl
 800a106:	4649      	mov	r1, r9
 800a108:	4638      	mov	r0, r7
 800a10a:	47c0      	blx	r8
 800a10c:	3001      	adds	r0, #1
 800a10e:	d103      	bne.n	800a118 <_printf_common+0xac>
 800a110:	f04f 30ff 	mov.w	r0, #4294967295
 800a114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a118:	3501      	adds	r5, #1
 800a11a:	e7c6      	b.n	800a0aa <_printf_common+0x3e>
 800a11c:	18e1      	adds	r1, r4, r3
 800a11e:	1c5a      	adds	r2, r3, #1
 800a120:	2030      	movs	r0, #48	; 0x30
 800a122:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a126:	4422      	add	r2, r4
 800a128:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a12c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a130:	3302      	adds	r3, #2
 800a132:	e7c7      	b.n	800a0c4 <_printf_common+0x58>
 800a134:	2301      	movs	r3, #1
 800a136:	4622      	mov	r2, r4
 800a138:	4649      	mov	r1, r9
 800a13a:	4638      	mov	r0, r7
 800a13c:	47c0      	blx	r8
 800a13e:	3001      	adds	r0, #1
 800a140:	d0e6      	beq.n	800a110 <_printf_common+0xa4>
 800a142:	3601      	adds	r6, #1
 800a144:	e7d9      	b.n	800a0fa <_printf_common+0x8e>
	...

0800a148 <_printf_i>:
 800a148:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a14c:	7e0f      	ldrb	r7, [r1, #24]
 800a14e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a150:	2f78      	cmp	r7, #120	; 0x78
 800a152:	4691      	mov	r9, r2
 800a154:	4680      	mov	r8, r0
 800a156:	460c      	mov	r4, r1
 800a158:	469a      	mov	sl, r3
 800a15a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a15e:	d807      	bhi.n	800a170 <_printf_i+0x28>
 800a160:	2f62      	cmp	r7, #98	; 0x62
 800a162:	d80a      	bhi.n	800a17a <_printf_i+0x32>
 800a164:	2f00      	cmp	r7, #0
 800a166:	f000 80d8 	beq.w	800a31a <_printf_i+0x1d2>
 800a16a:	2f58      	cmp	r7, #88	; 0x58
 800a16c:	f000 80a3 	beq.w	800a2b6 <_printf_i+0x16e>
 800a170:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a174:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a178:	e03a      	b.n	800a1f0 <_printf_i+0xa8>
 800a17a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a17e:	2b15      	cmp	r3, #21
 800a180:	d8f6      	bhi.n	800a170 <_printf_i+0x28>
 800a182:	a101      	add	r1, pc, #4	; (adr r1, 800a188 <_printf_i+0x40>)
 800a184:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a188:	0800a1e1 	.word	0x0800a1e1
 800a18c:	0800a1f5 	.word	0x0800a1f5
 800a190:	0800a171 	.word	0x0800a171
 800a194:	0800a171 	.word	0x0800a171
 800a198:	0800a171 	.word	0x0800a171
 800a19c:	0800a171 	.word	0x0800a171
 800a1a0:	0800a1f5 	.word	0x0800a1f5
 800a1a4:	0800a171 	.word	0x0800a171
 800a1a8:	0800a171 	.word	0x0800a171
 800a1ac:	0800a171 	.word	0x0800a171
 800a1b0:	0800a171 	.word	0x0800a171
 800a1b4:	0800a301 	.word	0x0800a301
 800a1b8:	0800a225 	.word	0x0800a225
 800a1bc:	0800a2e3 	.word	0x0800a2e3
 800a1c0:	0800a171 	.word	0x0800a171
 800a1c4:	0800a171 	.word	0x0800a171
 800a1c8:	0800a323 	.word	0x0800a323
 800a1cc:	0800a171 	.word	0x0800a171
 800a1d0:	0800a225 	.word	0x0800a225
 800a1d4:	0800a171 	.word	0x0800a171
 800a1d8:	0800a171 	.word	0x0800a171
 800a1dc:	0800a2eb 	.word	0x0800a2eb
 800a1e0:	682b      	ldr	r3, [r5, #0]
 800a1e2:	1d1a      	adds	r2, r3, #4
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	602a      	str	r2, [r5, #0]
 800a1e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a1ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	e0a3      	b.n	800a33c <_printf_i+0x1f4>
 800a1f4:	6820      	ldr	r0, [r4, #0]
 800a1f6:	6829      	ldr	r1, [r5, #0]
 800a1f8:	0606      	lsls	r6, r0, #24
 800a1fa:	f101 0304 	add.w	r3, r1, #4
 800a1fe:	d50a      	bpl.n	800a216 <_printf_i+0xce>
 800a200:	680e      	ldr	r6, [r1, #0]
 800a202:	602b      	str	r3, [r5, #0]
 800a204:	2e00      	cmp	r6, #0
 800a206:	da03      	bge.n	800a210 <_printf_i+0xc8>
 800a208:	232d      	movs	r3, #45	; 0x2d
 800a20a:	4276      	negs	r6, r6
 800a20c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a210:	485e      	ldr	r0, [pc, #376]	; (800a38c <_printf_i+0x244>)
 800a212:	230a      	movs	r3, #10
 800a214:	e019      	b.n	800a24a <_printf_i+0x102>
 800a216:	680e      	ldr	r6, [r1, #0]
 800a218:	602b      	str	r3, [r5, #0]
 800a21a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a21e:	bf18      	it	ne
 800a220:	b236      	sxthne	r6, r6
 800a222:	e7ef      	b.n	800a204 <_printf_i+0xbc>
 800a224:	682b      	ldr	r3, [r5, #0]
 800a226:	6820      	ldr	r0, [r4, #0]
 800a228:	1d19      	adds	r1, r3, #4
 800a22a:	6029      	str	r1, [r5, #0]
 800a22c:	0601      	lsls	r1, r0, #24
 800a22e:	d501      	bpl.n	800a234 <_printf_i+0xec>
 800a230:	681e      	ldr	r6, [r3, #0]
 800a232:	e002      	b.n	800a23a <_printf_i+0xf2>
 800a234:	0646      	lsls	r6, r0, #25
 800a236:	d5fb      	bpl.n	800a230 <_printf_i+0xe8>
 800a238:	881e      	ldrh	r6, [r3, #0]
 800a23a:	4854      	ldr	r0, [pc, #336]	; (800a38c <_printf_i+0x244>)
 800a23c:	2f6f      	cmp	r7, #111	; 0x6f
 800a23e:	bf0c      	ite	eq
 800a240:	2308      	moveq	r3, #8
 800a242:	230a      	movne	r3, #10
 800a244:	2100      	movs	r1, #0
 800a246:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a24a:	6865      	ldr	r5, [r4, #4]
 800a24c:	60a5      	str	r5, [r4, #8]
 800a24e:	2d00      	cmp	r5, #0
 800a250:	bfa2      	ittt	ge
 800a252:	6821      	ldrge	r1, [r4, #0]
 800a254:	f021 0104 	bicge.w	r1, r1, #4
 800a258:	6021      	strge	r1, [r4, #0]
 800a25a:	b90e      	cbnz	r6, 800a260 <_printf_i+0x118>
 800a25c:	2d00      	cmp	r5, #0
 800a25e:	d04d      	beq.n	800a2fc <_printf_i+0x1b4>
 800a260:	4615      	mov	r5, r2
 800a262:	fbb6 f1f3 	udiv	r1, r6, r3
 800a266:	fb03 6711 	mls	r7, r3, r1, r6
 800a26a:	5dc7      	ldrb	r7, [r0, r7]
 800a26c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a270:	4637      	mov	r7, r6
 800a272:	42bb      	cmp	r3, r7
 800a274:	460e      	mov	r6, r1
 800a276:	d9f4      	bls.n	800a262 <_printf_i+0x11a>
 800a278:	2b08      	cmp	r3, #8
 800a27a:	d10b      	bne.n	800a294 <_printf_i+0x14c>
 800a27c:	6823      	ldr	r3, [r4, #0]
 800a27e:	07de      	lsls	r6, r3, #31
 800a280:	d508      	bpl.n	800a294 <_printf_i+0x14c>
 800a282:	6923      	ldr	r3, [r4, #16]
 800a284:	6861      	ldr	r1, [r4, #4]
 800a286:	4299      	cmp	r1, r3
 800a288:	bfde      	ittt	le
 800a28a:	2330      	movle	r3, #48	; 0x30
 800a28c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a290:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a294:	1b52      	subs	r2, r2, r5
 800a296:	6122      	str	r2, [r4, #16]
 800a298:	f8cd a000 	str.w	sl, [sp]
 800a29c:	464b      	mov	r3, r9
 800a29e:	aa03      	add	r2, sp, #12
 800a2a0:	4621      	mov	r1, r4
 800a2a2:	4640      	mov	r0, r8
 800a2a4:	f7ff fee2 	bl	800a06c <_printf_common>
 800a2a8:	3001      	adds	r0, #1
 800a2aa:	d14c      	bne.n	800a346 <_printf_i+0x1fe>
 800a2ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a2b0:	b004      	add	sp, #16
 800a2b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2b6:	4835      	ldr	r0, [pc, #212]	; (800a38c <_printf_i+0x244>)
 800a2b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a2bc:	6829      	ldr	r1, [r5, #0]
 800a2be:	6823      	ldr	r3, [r4, #0]
 800a2c0:	f851 6b04 	ldr.w	r6, [r1], #4
 800a2c4:	6029      	str	r1, [r5, #0]
 800a2c6:	061d      	lsls	r5, r3, #24
 800a2c8:	d514      	bpl.n	800a2f4 <_printf_i+0x1ac>
 800a2ca:	07df      	lsls	r7, r3, #31
 800a2cc:	bf44      	itt	mi
 800a2ce:	f043 0320 	orrmi.w	r3, r3, #32
 800a2d2:	6023      	strmi	r3, [r4, #0]
 800a2d4:	b91e      	cbnz	r6, 800a2de <_printf_i+0x196>
 800a2d6:	6823      	ldr	r3, [r4, #0]
 800a2d8:	f023 0320 	bic.w	r3, r3, #32
 800a2dc:	6023      	str	r3, [r4, #0]
 800a2de:	2310      	movs	r3, #16
 800a2e0:	e7b0      	b.n	800a244 <_printf_i+0xfc>
 800a2e2:	6823      	ldr	r3, [r4, #0]
 800a2e4:	f043 0320 	orr.w	r3, r3, #32
 800a2e8:	6023      	str	r3, [r4, #0]
 800a2ea:	2378      	movs	r3, #120	; 0x78
 800a2ec:	4828      	ldr	r0, [pc, #160]	; (800a390 <_printf_i+0x248>)
 800a2ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a2f2:	e7e3      	b.n	800a2bc <_printf_i+0x174>
 800a2f4:	0659      	lsls	r1, r3, #25
 800a2f6:	bf48      	it	mi
 800a2f8:	b2b6      	uxthmi	r6, r6
 800a2fa:	e7e6      	b.n	800a2ca <_printf_i+0x182>
 800a2fc:	4615      	mov	r5, r2
 800a2fe:	e7bb      	b.n	800a278 <_printf_i+0x130>
 800a300:	682b      	ldr	r3, [r5, #0]
 800a302:	6826      	ldr	r6, [r4, #0]
 800a304:	6961      	ldr	r1, [r4, #20]
 800a306:	1d18      	adds	r0, r3, #4
 800a308:	6028      	str	r0, [r5, #0]
 800a30a:	0635      	lsls	r5, r6, #24
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	d501      	bpl.n	800a314 <_printf_i+0x1cc>
 800a310:	6019      	str	r1, [r3, #0]
 800a312:	e002      	b.n	800a31a <_printf_i+0x1d2>
 800a314:	0670      	lsls	r0, r6, #25
 800a316:	d5fb      	bpl.n	800a310 <_printf_i+0x1c8>
 800a318:	8019      	strh	r1, [r3, #0]
 800a31a:	2300      	movs	r3, #0
 800a31c:	6123      	str	r3, [r4, #16]
 800a31e:	4615      	mov	r5, r2
 800a320:	e7ba      	b.n	800a298 <_printf_i+0x150>
 800a322:	682b      	ldr	r3, [r5, #0]
 800a324:	1d1a      	adds	r2, r3, #4
 800a326:	602a      	str	r2, [r5, #0]
 800a328:	681d      	ldr	r5, [r3, #0]
 800a32a:	6862      	ldr	r2, [r4, #4]
 800a32c:	2100      	movs	r1, #0
 800a32e:	4628      	mov	r0, r5
 800a330:	f7f5 ff5e 	bl	80001f0 <memchr>
 800a334:	b108      	cbz	r0, 800a33a <_printf_i+0x1f2>
 800a336:	1b40      	subs	r0, r0, r5
 800a338:	6060      	str	r0, [r4, #4]
 800a33a:	6863      	ldr	r3, [r4, #4]
 800a33c:	6123      	str	r3, [r4, #16]
 800a33e:	2300      	movs	r3, #0
 800a340:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a344:	e7a8      	b.n	800a298 <_printf_i+0x150>
 800a346:	6923      	ldr	r3, [r4, #16]
 800a348:	462a      	mov	r2, r5
 800a34a:	4649      	mov	r1, r9
 800a34c:	4640      	mov	r0, r8
 800a34e:	47d0      	blx	sl
 800a350:	3001      	adds	r0, #1
 800a352:	d0ab      	beq.n	800a2ac <_printf_i+0x164>
 800a354:	6823      	ldr	r3, [r4, #0]
 800a356:	079b      	lsls	r3, r3, #30
 800a358:	d413      	bmi.n	800a382 <_printf_i+0x23a>
 800a35a:	68e0      	ldr	r0, [r4, #12]
 800a35c:	9b03      	ldr	r3, [sp, #12]
 800a35e:	4298      	cmp	r0, r3
 800a360:	bfb8      	it	lt
 800a362:	4618      	movlt	r0, r3
 800a364:	e7a4      	b.n	800a2b0 <_printf_i+0x168>
 800a366:	2301      	movs	r3, #1
 800a368:	4632      	mov	r2, r6
 800a36a:	4649      	mov	r1, r9
 800a36c:	4640      	mov	r0, r8
 800a36e:	47d0      	blx	sl
 800a370:	3001      	adds	r0, #1
 800a372:	d09b      	beq.n	800a2ac <_printf_i+0x164>
 800a374:	3501      	adds	r5, #1
 800a376:	68e3      	ldr	r3, [r4, #12]
 800a378:	9903      	ldr	r1, [sp, #12]
 800a37a:	1a5b      	subs	r3, r3, r1
 800a37c:	42ab      	cmp	r3, r5
 800a37e:	dcf2      	bgt.n	800a366 <_printf_i+0x21e>
 800a380:	e7eb      	b.n	800a35a <_printf_i+0x212>
 800a382:	2500      	movs	r5, #0
 800a384:	f104 0619 	add.w	r6, r4, #25
 800a388:	e7f5      	b.n	800a376 <_printf_i+0x22e>
 800a38a:	bf00      	nop
 800a38c:	0800af31 	.word	0x0800af31
 800a390:	0800af42 	.word	0x0800af42

0800a394 <iprintf>:
 800a394:	b40f      	push	{r0, r1, r2, r3}
 800a396:	4b0a      	ldr	r3, [pc, #40]	; (800a3c0 <iprintf+0x2c>)
 800a398:	b513      	push	{r0, r1, r4, lr}
 800a39a:	681c      	ldr	r4, [r3, #0]
 800a39c:	b124      	cbz	r4, 800a3a8 <iprintf+0x14>
 800a39e:	69a3      	ldr	r3, [r4, #24]
 800a3a0:	b913      	cbnz	r3, 800a3a8 <iprintf+0x14>
 800a3a2:	4620      	mov	r0, r4
 800a3a4:	f000 fa16 	bl	800a7d4 <__sinit>
 800a3a8:	ab05      	add	r3, sp, #20
 800a3aa:	9a04      	ldr	r2, [sp, #16]
 800a3ac:	68a1      	ldr	r1, [r4, #8]
 800a3ae:	9301      	str	r3, [sp, #4]
 800a3b0:	4620      	mov	r0, r4
 800a3b2:	f7ff fd2b 	bl	8009e0c <_vfiprintf_r>
 800a3b6:	b002      	add	sp, #8
 800a3b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3bc:	b004      	add	sp, #16
 800a3be:	4770      	bx	lr
 800a3c0:	200001d8 	.word	0x200001d8

0800a3c4 <putchar>:
 800a3c4:	4b09      	ldr	r3, [pc, #36]	; (800a3ec <putchar+0x28>)
 800a3c6:	b513      	push	{r0, r1, r4, lr}
 800a3c8:	681c      	ldr	r4, [r3, #0]
 800a3ca:	4601      	mov	r1, r0
 800a3cc:	b134      	cbz	r4, 800a3dc <putchar+0x18>
 800a3ce:	69a3      	ldr	r3, [r4, #24]
 800a3d0:	b923      	cbnz	r3, 800a3dc <putchar+0x18>
 800a3d2:	9001      	str	r0, [sp, #4]
 800a3d4:	4620      	mov	r0, r4
 800a3d6:	f000 f9fd 	bl	800a7d4 <__sinit>
 800a3da:	9901      	ldr	r1, [sp, #4]
 800a3dc:	68a2      	ldr	r2, [r4, #8]
 800a3de:	4620      	mov	r0, r4
 800a3e0:	b002      	add	sp, #8
 800a3e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3e6:	f000 bb07 	b.w	800a9f8 <_putc_r>
 800a3ea:	bf00      	nop
 800a3ec:	200001d8 	.word	0x200001d8

0800a3f0 <_sbrk_r>:
 800a3f0:	b538      	push	{r3, r4, r5, lr}
 800a3f2:	4d06      	ldr	r5, [pc, #24]	; (800a40c <_sbrk_r+0x1c>)
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	4604      	mov	r4, r0
 800a3f8:	4608      	mov	r0, r1
 800a3fa:	602b      	str	r3, [r5, #0]
 800a3fc:	f000 fc6c 	bl	800acd8 <_sbrk>
 800a400:	1c43      	adds	r3, r0, #1
 800a402:	d102      	bne.n	800a40a <_sbrk_r+0x1a>
 800a404:	682b      	ldr	r3, [r5, #0]
 800a406:	b103      	cbz	r3, 800a40a <_sbrk_r+0x1a>
 800a408:	6023      	str	r3, [r4, #0]
 800a40a:	bd38      	pop	{r3, r4, r5, pc}
 800a40c:	2001dd80 	.word	0x2001dd80

0800a410 <__swbuf_r>:
 800a410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a412:	460e      	mov	r6, r1
 800a414:	4614      	mov	r4, r2
 800a416:	4605      	mov	r5, r0
 800a418:	b118      	cbz	r0, 800a422 <__swbuf_r+0x12>
 800a41a:	6983      	ldr	r3, [r0, #24]
 800a41c:	b90b      	cbnz	r3, 800a422 <__swbuf_r+0x12>
 800a41e:	f000 f9d9 	bl	800a7d4 <__sinit>
 800a422:	4b21      	ldr	r3, [pc, #132]	; (800a4a8 <__swbuf_r+0x98>)
 800a424:	429c      	cmp	r4, r3
 800a426:	d12b      	bne.n	800a480 <__swbuf_r+0x70>
 800a428:	686c      	ldr	r4, [r5, #4]
 800a42a:	69a3      	ldr	r3, [r4, #24]
 800a42c:	60a3      	str	r3, [r4, #8]
 800a42e:	89a3      	ldrh	r3, [r4, #12]
 800a430:	071a      	lsls	r2, r3, #28
 800a432:	d52f      	bpl.n	800a494 <__swbuf_r+0x84>
 800a434:	6923      	ldr	r3, [r4, #16]
 800a436:	b36b      	cbz	r3, 800a494 <__swbuf_r+0x84>
 800a438:	6923      	ldr	r3, [r4, #16]
 800a43a:	6820      	ldr	r0, [r4, #0]
 800a43c:	1ac0      	subs	r0, r0, r3
 800a43e:	6963      	ldr	r3, [r4, #20]
 800a440:	b2f6      	uxtb	r6, r6
 800a442:	4283      	cmp	r3, r0
 800a444:	4637      	mov	r7, r6
 800a446:	dc04      	bgt.n	800a452 <__swbuf_r+0x42>
 800a448:	4621      	mov	r1, r4
 800a44a:	4628      	mov	r0, r5
 800a44c:	f000 f92e 	bl	800a6ac <_fflush_r>
 800a450:	bb30      	cbnz	r0, 800a4a0 <__swbuf_r+0x90>
 800a452:	68a3      	ldr	r3, [r4, #8]
 800a454:	3b01      	subs	r3, #1
 800a456:	60a3      	str	r3, [r4, #8]
 800a458:	6823      	ldr	r3, [r4, #0]
 800a45a:	1c5a      	adds	r2, r3, #1
 800a45c:	6022      	str	r2, [r4, #0]
 800a45e:	701e      	strb	r6, [r3, #0]
 800a460:	6963      	ldr	r3, [r4, #20]
 800a462:	3001      	adds	r0, #1
 800a464:	4283      	cmp	r3, r0
 800a466:	d004      	beq.n	800a472 <__swbuf_r+0x62>
 800a468:	89a3      	ldrh	r3, [r4, #12]
 800a46a:	07db      	lsls	r3, r3, #31
 800a46c:	d506      	bpl.n	800a47c <__swbuf_r+0x6c>
 800a46e:	2e0a      	cmp	r6, #10
 800a470:	d104      	bne.n	800a47c <__swbuf_r+0x6c>
 800a472:	4621      	mov	r1, r4
 800a474:	4628      	mov	r0, r5
 800a476:	f000 f919 	bl	800a6ac <_fflush_r>
 800a47a:	b988      	cbnz	r0, 800a4a0 <__swbuf_r+0x90>
 800a47c:	4638      	mov	r0, r7
 800a47e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a480:	4b0a      	ldr	r3, [pc, #40]	; (800a4ac <__swbuf_r+0x9c>)
 800a482:	429c      	cmp	r4, r3
 800a484:	d101      	bne.n	800a48a <__swbuf_r+0x7a>
 800a486:	68ac      	ldr	r4, [r5, #8]
 800a488:	e7cf      	b.n	800a42a <__swbuf_r+0x1a>
 800a48a:	4b09      	ldr	r3, [pc, #36]	; (800a4b0 <__swbuf_r+0xa0>)
 800a48c:	429c      	cmp	r4, r3
 800a48e:	bf08      	it	eq
 800a490:	68ec      	ldreq	r4, [r5, #12]
 800a492:	e7ca      	b.n	800a42a <__swbuf_r+0x1a>
 800a494:	4621      	mov	r1, r4
 800a496:	4628      	mov	r0, r5
 800a498:	f000 f80c 	bl	800a4b4 <__swsetup_r>
 800a49c:	2800      	cmp	r0, #0
 800a49e:	d0cb      	beq.n	800a438 <__swbuf_r+0x28>
 800a4a0:	f04f 37ff 	mov.w	r7, #4294967295
 800a4a4:	e7ea      	b.n	800a47c <__swbuf_r+0x6c>
 800a4a6:	bf00      	nop
 800a4a8:	0800af74 	.word	0x0800af74
 800a4ac:	0800af94 	.word	0x0800af94
 800a4b0:	0800af54 	.word	0x0800af54

0800a4b4 <__swsetup_r>:
 800a4b4:	4b32      	ldr	r3, [pc, #200]	; (800a580 <__swsetup_r+0xcc>)
 800a4b6:	b570      	push	{r4, r5, r6, lr}
 800a4b8:	681d      	ldr	r5, [r3, #0]
 800a4ba:	4606      	mov	r6, r0
 800a4bc:	460c      	mov	r4, r1
 800a4be:	b125      	cbz	r5, 800a4ca <__swsetup_r+0x16>
 800a4c0:	69ab      	ldr	r3, [r5, #24]
 800a4c2:	b913      	cbnz	r3, 800a4ca <__swsetup_r+0x16>
 800a4c4:	4628      	mov	r0, r5
 800a4c6:	f000 f985 	bl	800a7d4 <__sinit>
 800a4ca:	4b2e      	ldr	r3, [pc, #184]	; (800a584 <__swsetup_r+0xd0>)
 800a4cc:	429c      	cmp	r4, r3
 800a4ce:	d10f      	bne.n	800a4f0 <__swsetup_r+0x3c>
 800a4d0:	686c      	ldr	r4, [r5, #4]
 800a4d2:	89a3      	ldrh	r3, [r4, #12]
 800a4d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a4d8:	0719      	lsls	r1, r3, #28
 800a4da:	d42c      	bmi.n	800a536 <__swsetup_r+0x82>
 800a4dc:	06dd      	lsls	r5, r3, #27
 800a4de:	d411      	bmi.n	800a504 <__swsetup_r+0x50>
 800a4e0:	2309      	movs	r3, #9
 800a4e2:	6033      	str	r3, [r6, #0]
 800a4e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a4e8:	81a3      	strh	r3, [r4, #12]
 800a4ea:	f04f 30ff 	mov.w	r0, #4294967295
 800a4ee:	e03e      	b.n	800a56e <__swsetup_r+0xba>
 800a4f0:	4b25      	ldr	r3, [pc, #148]	; (800a588 <__swsetup_r+0xd4>)
 800a4f2:	429c      	cmp	r4, r3
 800a4f4:	d101      	bne.n	800a4fa <__swsetup_r+0x46>
 800a4f6:	68ac      	ldr	r4, [r5, #8]
 800a4f8:	e7eb      	b.n	800a4d2 <__swsetup_r+0x1e>
 800a4fa:	4b24      	ldr	r3, [pc, #144]	; (800a58c <__swsetup_r+0xd8>)
 800a4fc:	429c      	cmp	r4, r3
 800a4fe:	bf08      	it	eq
 800a500:	68ec      	ldreq	r4, [r5, #12]
 800a502:	e7e6      	b.n	800a4d2 <__swsetup_r+0x1e>
 800a504:	0758      	lsls	r0, r3, #29
 800a506:	d512      	bpl.n	800a52e <__swsetup_r+0x7a>
 800a508:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a50a:	b141      	cbz	r1, 800a51e <__swsetup_r+0x6a>
 800a50c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a510:	4299      	cmp	r1, r3
 800a512:	d002      	beq.n	800a51a <__swsetup_r+0x66>
 800a514:	4630      	mov	r0, r6
 800a516:	f7ff fb6f 	bl	8009bf8 <_free_r>
 800a51a:	2300      	movs	r3, #0
 800a51c:	6363      	str	r3, [r4, #52]	; 0x34
 800a51e:	89a3      	ldrh	r3, [r4, #12]
 800a520:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a524:	81a3      	strh	r3, [r4, #12]
 800a526:	2300      	movs	r3, #0
 800a528:	6063      	str	r3, [r4, #4]
 800a52a:	6923      	ldr	r3, [r4, #16]
 800a52c:	6023      	str	r3, [r4, #0]
 800a52e:	89a3      	ldrh	r3, [r4, #12]
 800a530:	f043 0308 	orr.w	r3, r3, #8
 800a534:	81a3      	strh	r3, [r4, #12]
 800a536:	6923      	ldr	r3, [r4, #16]
 800a538:	b94b      	cbnz	r3, 800a54e <__swsetup_r+0x9a>
 800a53a:	89a3      	ldrh	r3, [r4, #12]
 800a53c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a540:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a544:	d003      	beq.n	800a54e <__swsetup_r+0x9a>
 800a546:	4621      	mov	r1, r4
 800a548:	4630      	mov	r0, r6
 800a54a:	f000 fa09 	bl	800a960 <__smakebuf_r>
 800a54e:	89a0      	ldrh	r0, [r4, #12]
 800a550:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a554:	f010 0301 	ands.w	r3, r0, #1
 800a558:	d00a      	beq.n	800a570 <__swsetup_r+0xbc>
 800a55a:	2300      	movs	r3, #0
 800a55c:	60a3      	str	r3, [r4, #8]
 800a55e:	6963      	ldr	r3, [r4, #20]
 800a560:	425b      	negs	r3, r3
 800a562:	61a3      	str	r3, [r4, #24]
 800a564:	6923      	ldr	r3, [r4, #16]
 800a566:	b943      	cbnz	r3, 800a57a <__swsetup_r+0xc6>
 800a568:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a56c:	d1ba      	bne.n	800a4e4 <__swsetup_r+0x30>
 800a56e:	bd70      	pop	{r4, r5, r6, pc}
 800a570:	0781      	lsls	r1, r0, #30
 800a572:	bf58      	it	pl
 800a574:	6963      	ldrpl	r3, [r4, #20]
 800a576:	60a3      	str	r3, [r4, #8]
 800a578:	e7f4      	b.n	800a564 <__swsetup_r+0xb0>
 800a57a:	2000      	movs	r0, #0
 800a57c:	e7f7      	b.n	800a56e <__swsetup_r+0xba>
 800a57e:	bf00      	nop
 800a580:	200001d8 	.word	0x200001d8
 800a584:	0800af74 	.word	0x0800af74
 800a588:	0800af94 	.word	0x0800af94
 800a58c:	0800af54 	.word	0x0800af54

0800a590 <abort>:
 800a590:	b508      	push	{r3, lr}
 800a592:	2006      	movs	r0, #6
 800a594:	f000 faa0 	bl	800aad8 <raise>
 800a598:	2001      	movs	r0, #1
 800a59a:	f000 fbb3 	bl	800ad04 <_exit>
	...

0800a5a0 <__sflush_r>:
 800a5a0:	898a      	ldrh	r2, [r1, #12]
 800a5a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5a6:	4605      	mov	r5, r0
 800a5a8:	0710      	lsls	r0, r2, #28
 800a5aa:	460c      	mov	r4, r1
 800a5ac:	d458      	bmi.n	800a660 <__sflush_r+0xc0>
 800a5ae:	684b      	ldr	r3, [r1, #4]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	dc05      	bgt.n	800a5c0 <__sflush_r+0x20>
 800a5b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	dc02      	bgt.n	800a5c0 <__sflush_r+0x20>
 800a5ba:	2000      	movs	r0, #0
 800a5bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a5c2:	2e00      	cmp	r6, #0
 800a5c4:	d0f9      	beq.n	800a5ba <__sflush_r+0x1a>
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a5cc:	682f      	ldr	r7, [r5, #0]
 800a5ce:	602b      	str	r3, [r5, #0]
 800a5d0:	d032      	beq.n	800a638 <__sflush_r+0x98>
 800a5d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a5d4:	89a3      	ldrh	r3, [r4, #12]
 800a5d6:	075a      	lsls	r2, r3, #29
 800a5d8:	d505      	bpl.n	800a5e6 <__sflush_r+0x46>
 800a5da:	6863      	ldr	r3, [r4, #4]
 800a5dc:	1ac0      	subs	r0, r0, r3
 800a5de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a5e0:	b10b      	cbz	r3, 800a5e6 <__sflush_r+0x46>
 800a5e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a5e4:	1ac0      	subs	r0, r0, r3
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	4602      	mov	r2, r0
 800a5ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a5ec:	6a21      	ldr	r1, [r4, #32]
 800a5ee:	4628      	mov	r0, r5
 800a5f0:	47b0      	blx	r6
 800a5f2:	1c43      	adds	r3, r0, #1
 800a5f4:	89a3      	ldrh	r3, [r4, #12]
 800a5f6:	d106      	bne.n	800a606 <__sflush_r+0x66>
 800a5f8:	6829      	ldr	r1, [r5, #0]
 800a5fa:	291d      	cmp	r1, #29
 800a5fc:	d82c      	bhi.n	800a658 <__sflush_r+0xb8>
 800a5fe:	4a2a      	ldr	r2, [pc, #168]	; (800a6a8 <__sflush_r+0x108>)
 800a600:	40ca      	lsrs	r2, r1
 800a602:	07d6      	lsls	r6, r2, #31
 800a604:	d528      	bpl.n	800a658 <__sflush_r+0xb8>
 800a606:	2200      	movs	r2, #0
 800a608:	6062      	str	r2, [r4, #4]
 800a60a:	04d9      	lsls	r1, r3, #19
 800a60c:	6922      	ldr	r2, [r4, #16]
 800a60e:	6022      	str	r2, [r4, #0]
 800a610:	d504      	bpl.n	800a61c <__sflush_r+0x7c>
 800a612:	1c42      	adds	r2, r0, #1
 800a614:	d101      	bne.n	800a61a <__sflush_r+0x7a>
 800a616:	682b      	ldr	r3, [r5, #0]
 800a618:	b903      	cbnz	r3, 800a61c <__sflush_r+0x7c>
 800a61a:	6560      	str	r0, [r4, #84]	; 0x54
 800a61c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a61e:	602f      	str	r7, [r5, #0]
 800a620:	2900      	cmp	r1, #0
 800a622:	d0ca      	beq.n	800a5ba <__sflush_r+0x1a>
 800a624:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a628:	4299      	cmp	r1, r3
 800a62a:	d002      	beq.n	800a632 <__sflush_r+0x92>
 800a62c:	4628      	mov	r0, r5
 800a62e:	f7ff fae3 	bl	8009bf8 <_free_r>
 800a632:	2000      	movs	r0, #0
 800a634:	6360      	str	r0, [r4, #52]	; 0x34
 800a636:	e7c1      	b.n	800a5bc <__sflush_r+0x1c>
 800a638:	6a21      	ldr	r1, [r4, #32]
 800a63a:	2301      	movs	r3, #1
 800a63c:	4628      	mov	r0, r5
 800a63e:	47b0      	blx	r6
 800a640:	1c41      	adds	r1, r0, #1
 800a642:	d1c7      	bne.n	800a5d4 <__sflush_r+0x34>
 800a644:	682b      	ldr	r3, [r5, #0]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d0c4      	beq.n	800a5d4 <__sflush_r+0x34>
 800a64a:	2b1d      	cmp	r3, #29
 800a64c:	d001      	beq.n	800a652 <__sflush_r+0xb2>
 800a64e:	2b16      	cmp	r3, #22
 800a650:	d101      	bne.n	800a656 <__sflush_r+0xb6>
 800a652:	602f      	str	r7, [r5, #0]
 800a654:	e7b1      	b.n	800a5ba <__sflush_r+0x1a>
 800a656:	89a3      	ldrh	r3, [r4, #12]
 800a658:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a65c:	81a3      	strh	r3, [r4, #12]
 800a65e:	e7ad      	b.n	800a5bc <__sflush_r+0x1c>
 800a660:	690f      	ldr	r7, [r1, #16]
 800a662:	2f00      	cmp	r7, #0
 800a664:	d0a9      	beq.n	800a5ba <__sflush_r+0x1a>
 800a666:	0793      	lsls	r3, r2, #30
 800a668:	680e      	ldr	r6, [r1, #0]
 800a66a:	bf08      	it	eq
 800a66c:	694b      	ldreq	r3, [r1, #20]
 800a66e:	600f      	str	r7, [r1, #0]
 800a670:	bf18      	it	ne
 800a672:	2300      	movne	r3, #0
 800a674:	eba6 0807 	sub.w	r8, r6, r7
 800a678:	608b      	str	r3, [r1, #8]
 800a67a:	f1b8 0f00 	cmp.w	r8, #0
 800a67e:	dd9c      	ble.n	800a5ba <__sflush_r+0x1a>
 800a680:	6a21      	ldr	r1, [r4, #32]
 800a682:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a684:	4643      	mov	r3, r8
 800a686:	463a      	mov	r2, r7
 800a688:	4628      	mov	r0, r5
 800a68a:	47b0      	blx	r6
 800a68c:	2800      	cmp	r0, #0
 800a68e:	dc06      	bgt.n	800a69e <__sflush_r+0xfe>
 800a690:	89a3      	ldrh	r3, [r4, #12]
 800a692:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a696:	81a3      	strh	r3, [r4, #12]
 800a698:	f04f 30ff 	mov.w	r0, #4294967295
 800a69c:	e78e      	b.n	800a5bc <__sflush_r+0x1c>
 800a69e:	4407      	add	r7, r0
 800a6a0:	eba8 0800 	sub.w	r8, r8, r0
 800a6a4:	e7e9      	b.n	800a67a <__sflush_r+0xda>
 800a6a6:	bf00      	nop
 800a6a8:	20400001 	.word	0x20400001

0800a6ac <_fflush_r>:
 800a6ac:	b538      	push	{r3, r4, r5, lr}
 800a6ae:	690b      	ldr	r3, [r1, #16]
 800a6b0:	4605      	mov	r5, r0
 800a6b2:	460c      	mov	r4, r1
 800a6b4:	b913      	cbnz	r3, 800a6bc <_fflush_r+0x10>
 800a6b6:	2500      	movs	r5, #0
 800a6b8:	4628      	mov	r0, r5
 800a6ba:	bd38      	pop	{r3, r4, r5, pc}
 800a6bc:	b118      	cbz	r0, 800a6c6 <_fflush_r+0x1a>
 800a6be:	6983      	ldr	r3, [r0, #24]
 800a6c0:	b90b      	cbnz	r3, 800a6c6 <_fflush_r+0x1a>
 800a6c2:	f000 f887 	bl	800a7d4 <__sinit>
 800a6c6:	4b14      	ldr	r3, [pc, #80]	; (800a718 <_fflush_r+0x6c>)
 800a6c8:	429c      	cmp	r4, r3
 800a6ca:	d11b      	bne.n	800a704 <_fflush_r+0x58>
 800a6cc:	686c      	ldr	r4, [r5, #4]
 800a6ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d0ef      	beq.n	800a6b6 <_fflush_r+0xa>
 800a6d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a6d8:	07d0      	lsls	r0, r2, #31
 800a6da:	d404      	bmi.n	800a6e6 <_fflush_r+0x3a>
 800a6dc:	0599      	lsls	r1, r3, #22
 800a6de:	d402      	bmi.n	800a6e6 <_fflush_r+0x3a>
 800a6e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6e2:	f000 f915 	bl	800a910 <__retarget_lock_acquire_recursive>
 800a6e6:	4628      	mov	r0, r5
 800a6e8:	4621      	mov	r1, r4
 800a6ea:	f7ff ff59 	bl	800a5a0 <__sflush_r>
 800a6ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a6f0:	07da      	lsls	r2, r3, #31
 800a6f2:	4605      	mov	r5, r0
 800a6f4:	d4e0      	bmi.n	800a6b8 <_fflush_r+0xc>
 800a6f6:	89a3      	ldrh	r3, [r4, #12]
 800a6f8:	059b      	lsls	r3, r3, #22
 800a6fa:	d4dd      	bmi.n	800a6b8 <_fflush_r+0xc>
 800a6fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6fe:	f000 f908 	bl	800a912 <__retarget_lock_release_recursive>
 800a702:	e7d9      	b.n	800a6b8 <_fflush_r+0xc>
 800a704:	4b05      	ldr	r3, [pc, #20]	; (800a71c <_fflush_r+0x70>)
 800a706:	429c      	cmp	r4, r3
 800a708:	d101      	bne.n	800a70e <_fflush_r+0x62>
 800a70a:	68ac      	ldr	r4, [r5, #8]
 800a70c:	e7df      	b.n	800a6ce <_fflush_r+0x22>
 800a70e:	4b04      	ldr	r3, [pc, #16]	; (800a720 <_fflush_r+0x74>)
 800a710:	429c      	cmp	r4, r3
 800a712:	bf08      	it	eq
 800a714:	68ec      	ldreq	r4, [r5, #12]
 800a716:	e7da      	b.n	800a6ce <_fflush_r+0x22>
 800a718:	0800af74 	.word	0x0800af74
 800a71c:	0800af94 	.word	0x0800af94
 800a720:	0800af54 	.word	0x0800af54

0800a724 <std>:
 800a724:	2300      	movs	r3, #0
 800a726:	b510      	push	{r4, lr}
 800a728:	4604      	mov	r4, r0
 800a72a:	e9c0 3300 	strd	r3, r3, [r0]
 800a72e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a732:	6083      	str	r3, [r0, #8]
 800a734:	8181      	strh	r1, [r0, #12]
 800a736:	6643      	str	r3, [r0, #100]	; 0x64
 800a738:	81c2      	strh	r2, [r0, #14]
 800a73a:	6183      	str	r3, [r0, #24]
 800a73c:	4619      	mov	r1, r3
 800a73e:	2208      	movs	r2, #8
 800a740:	305c      	adds	r0, #92	; 0x5c
 800a742:	f7ff fa51 	bl	8009be8 <memset>
 800a746:	4b05      	ldr	r3, [pc, #20]	; (800a75c <std+0x38>)
 800a748:	6263      	str	r3, [r4, #36]	; 0x24
 800a74a:	4b05      	ldr	r3, [pc, #20]	; (800a760 <std+0x3c>)
 800a74c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a74e:	4b05      	ldr	r3, [pc, #20]	; (800a764 <std+0x40>)
 800a750:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a752:	4b05      	ldr	r3, [pc, #20]	; (800a768 <std+0x44>)
 800a754:	6224      	str	r4, [r4, #32]
 800a756:	6323      	str	r3, [r4, #48]	; 0x30
 800a758:	bd10      	pop	{r4, pc}
 800a75a:	bf00      	nop
 800a75c:	0800ab11 	.word	0x0800ab11
 800a760:	0800ab33 	.word	0x0800ab33
 800a764:	0800ab6b 	.word	0x0800ab6b
 800a768:	0800ab8f 	.word	0x0800ab8f

0800a76c <_cleanup_r>:
 800a76c:	4901      	ldr	r1, [pc, #4]	; (800a774 <_cleanup_r+0x8>)
 800a76e:	f000 b8af 	b.w	800a8d0 <_fwalk_reent>
 800a772:	bf00      	nop
 800a774:	0800a6ad 	.word	0x0800a6ad

0800a778 <__sfmoreglue>:
 800a778:	b570      	push	{r4, r5, r6, lr}
 800a77a:	2268      	movs	r2, #104	; 0x68
 800a77c:	1e4d      	subs	r5, r1, #1
 800a77e:	4355      	muls	r5, r2
 800a780:	460e      	mov	r6, r1
 800a782:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a786:	f7ff faa3 	bl	8009cd0 <_malloc_r>
 800a78a:	4604      	mov	r4, r0
 800a78c:	b140      	cbz	r0, 800a7a0 <__sfmoreglue+0x28>
 800a78e:	2100      	movs	r1, #0
 800a790:	e9c0 1600 	strd	r1, r6, [r0]
 800a794:	300c      	adds	r0, #12
 800a796:	60a0      	str	r0, [r4, #8]
 800a798:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a79c:	f7ff fa24 	bl	8009be8 <memset>
 800a7a0:	4620      	mov	r0, r4
 800a7a2:	bd70      	pop	{r4, r5, r6, pc}

0800a7a4 <__sfp_lock_acquire>:
 800a7a4:	4801      	ldr	r0, [pc, #4]	; (800a7ac <__sfp_lock_acquire+0x8>)
 800a7a6:	f000 b8b3 	b.w	800a910 <__retarget_lock_acquire_recursive>
 800a7aa:	bf00      	nop
 800a7ac:	2001dd7d 	.word	0x2001dd7d

0800a7b0 <__sfp_lock_release>:
 800a7b0:	4801      	ldr	r0, [pc, #4]	; (800a7b8 <__sfp_lock_release+0x8>)
 800a7b2:	f000 b8ae 	b.w	800a912 <__retarget_lock_release_recursive>
 800a7b6:	bf00      	nop
 800a7b8:	2001dd7d 	.word	0x2001dd7d

0800a7bc <__sinit_lock_acquire>:
 800a7bc:	4801      	ldr	r0, [pc, #4]	; (800a7c4 <__sinit_lock_acquire+0x8>)
 800a7be:	f000 b8a7 	b.w	800a910 <__retarget_lock_acquire_recursive>
 800a7c2:	bf00      	nop
 800a7c4:	2001dd7e 	.word	0x2001dd7e

0800a7c8 <__sinit_lock_release>:
 800a7c8:	4801      	ldr	r0, [pc, #4]	; (800a7d0 <__sinit_lock_release+0x8>)
 800a7ca:	f000 b8a2 	b.w	800a912 <__retarget_lock_release_recursive>
 800a7ce:	bf00      	nop
 800a7d0:	2001dd7e 	.word	0x2001dd7e

0800a7d4 <__sinit>:
 800a7d4:	b510      	push	{r4, lr}
 800a7d6:	4604      	mov	r4, r0
 800a7d8:	f7ff fff0 	bl	800a7bc <__sinit_lock_acquire>
 800a7dc:	69a3      	ldr	r3, [r4, #24]
 800a7de:	b11b      	cbz	r3, 800a7e8 <__sinit+0x14>
 800a7e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7e4:	f7ff bff0 	b.w	800a7c8 <__sinit_lock_release>
 800a7e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a7ec:	6523      	str	r3, [r4, #80]	; 0x50
 800a7ee:	4b13      	ldr	r3, [pc, #76]	; (800a83c <__sinit+0x68>)
 800a7f0:	4a13      	ldr	r2, [pc, #76]	; (800a840 <__sinit+0x6c>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	62a2      	str	r2, [r4, #40]	; 0x28
 800a7f6:	42a3      	cmp	r3, r4
 800a7f8:	bf04      	itt	eq
 800a7fa:	2301      	moveq	r3, #1
 800a7fc:	61a3      	streq	r3, [r4, #24]
 800a7fe:	4620      	mov	r0, r4
 800a800:	f000 f820 	bl	800a844 <__sfp>
 800a804:	6060      	str	r0, [r4, #4]
 800a806:	4620      	mov	r0, r4
 800a808:	f000 f81c 	bl	800a844 <__sfp>
 800a80c:	60a0      	str	r0, [r4, #8]
 800a80e:	4620      	mov	r0, r4
 800a810:	f000 f818 	bl	800a844 <__sfp>
 800a814:	2200      	movs	r2, #0
 800a816:	60e0      	str	r0, [r4, #12]
 800a818:	2104      	movs	r1, #4
 800a81a:	6860      	ldr	r0, [r4, #4]
 800a81c:	f7ff ff82 	bl	800a724 <std>
 800a820:	68a0      	ldr	r0, [r4, #8]
 800a822:	2201      	movs	r2, #1
 800a824:	2109      	movs	r1, #9
 800a826:	f7ff ff7d 	bl	800a724 <std>
 800a82a:	68e0      	ldr	r0, [r4, #12]
 800a82c:	2202      	movs	r2, #2
 800a82e:	2112      	movs	r1, #18
 800a830:	f7ff ff78 	bl	800a724 <std>
 800a834:	2301      	movs	r3, #1
 800a836:	61a3      	str	r3, [r4, #24]
 800a838:	e7d2      	b.n	800a7e0 <__sinit+0xc>
 800a83a:	bf00      	nop
 800a83c:	0800af1c 	.word	0x0800af1c
 800a840:	0800a76d 	.word	0x0800a76d

0800a844 <__sfp>:
 800a844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a846:	4607      	mov	r7, r0
 800a848:	f7ff ffac 	bl	800a7a4 <__sfp_lock_acquire>
 800a84c:	4b1e      	ldr	r3, [pc, #120]	; (800a8c8 <__sfp+0x84>)
 800a84e:	681e      	ldr	r6, [r3, #0]
 800a850:	69b3      	ldr	r3, [r6, #24]
 800a852:	b913      	cbnz	r3, 800a85a <__sfp+0x16>
 800a854:	4630      	mov	r0, r6
 800a856:	f7ff ffbd 	bl	800a7d4 <__sinit>
 800a85a:	3648      	adds	r6, #72	; 0x48
 800a85c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a860:	3b01      	subs	r3, #1
 800a862:	d503      	bpl.n	800a86c <__sfp+0x28>
 800a864:	6833      	ldr	r3, [r6, #0]
 800a866:	b30b      	cbz	r3, 800a8ac <__sfp+0x68>
 800a868:	6836      	ldr	r6, [r6, #0]
 800a86a:	e7f7      	b.n	800a85c <__sfp+0x18>
 800a86c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a870:	b9d5      	cbnz	r5, 800a8a8 <__sfp+0x64>
 800a872:	4b16      	ldr	r3, [pc, #88]	; (800a8cc <__sfp+0x88>)
 800a874:	60e3      	str	r3, [r4, #12]
 800a876:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a87a:	6665      	str	r5, [r4, #100]	; 0x64
 800a87c:	f000 f847 	bl	800a90e <__retarget_lock_init_recursive>
 800a880:	f7ff ff96 	bl	800a7b0 <__sfp_lock_release>
 800a884:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a888:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a88c:	6025      	str	r5, [r4, #0]
 800a88e:	61a5      	str	r5, [r4, #24]
 800a890:	2208      	movs	r2, #8
 800a892:	4629      	mov	r1, r5
 800a894:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a898:	f7ff f9a6 	bl	8009be8 <memset>
 800a89c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a8a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a8a4:	4620      	mov	r0, r4
 800a8a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8a8:	3468      	adds	r4, #104	; 0x68
 800a8aa:	e7d9      	b.n	800a860 <__sfp+0x1c>
 800a8ac:	2104      	movs	r1, #4
 800a8ae:	4638      	mov	r0, r7
 800a8b0:	f7ff ff62 	bl	800a778 <__sfmoreglue>
 800a8b4:	4604      	mov	r4, r0
 800a8b6:	6030      	str	r0, [r6, #0]
 800a8b8:	2800      	cmp	r0, #0
 800a8ba:	d1d5      	bne.n	800a868 <__sfp+0x24>
 800a8bc:	f7ff ff78 	bl	800a7b0 <__sfp_lock_release>
 800a8c0:	230c      	movs	r3, #12
 800a8c2:	603b      	str	r3, [r7, #0]
 800a8c4:	e7ee      	b.n	800a8a4 <__sfp+0x60>
 800a8c6:	bf00      	nop
 800a8c8:	0800af1c 	.word	0x0800af1c
 800a8cc:	ffff0001 	.word	0xffff0001

0800a8d0 <_fwalk_reent>:
 800a8d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8d4:	4606      	mov	r6, r0
 800a8d6:	4688      	mov	r8, r1
 800a8d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a8dc:	2700      	movs	r7, #0
 800a8de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a8e2:	f1b9 0901 	subs.w	r9, r9, #1
 800a8e6:	d505      	bpl.n	800a8f4 <_fwalk_reent+0x24>
 800a8e8:	6824      	ldr	r4, [r4, #0]
 800a8ea:	2c00      	cmp	r4, #0
 800a8ec:	d1f7      	bne.n	800a8de <_fwalk_reent+0xe>
 800a8ee:	4638      	mov	r0, r7
 800a8f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8f4:	89ab      	ldrh	r3, [r5, #12]
 800a8f6:	2b01      	cmp	r3, #1
 800a8f8:	d907      	bls.n	800a90a <_fwalk_reent+0x3a>
 800a8fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a8fe:	3301      	adds	r3, #1
 800a900:	d003      	beq.n	800a90a <_fwalk_reent+0x3a>
 800a902:	4629      	mov	r1, r5
 800a904:	4630      	mov	r0, r6
 800a906:	47c0      	blx	r8
 800a908:	4307      	orrs	r7, r0
 800a90a:	3568      	adds	r5, #104	; 0x68
 800a90c:	e7e9      	b.n	800a8e2 <_fwalk_reent+0x12>

0800a90e <__retarget_lock_init_recursive>:
 800a90e:	4770      	bx	lr

0800a910 <__retarget_lock_acquire_recursive>:
 800a910:	4770      	bx	lr

0800a912 <__retarget_lock_release_recursive>:
 800a912:	4770      	bx	lr

0800a914 <__swhatbuf_r>:
 800a914:	b570      	push	{r4, r5, r6, lr}
 800a916:	460e      	mov	r6, r1
 800a918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a91c:	2900      	cmp	r1, #0
 800a91e:	b096      	sub	sp, #88	; 0x58
 800a920:	4614      	mov	r4, r2
 800a922:	461d      	mov	r5, r3
 800a924:	da08      	bge.n	800a938 <__swhatbuf_r+0x24>
 800a926:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a92a:	2200      	movs	r2, #0
 800a92c:	602a      	str	r2, [r5, #0]
 800a92e:	061a      	lsls	r2, r3, #24
 800a930:	d410      	bmi.n	800a954 <__swhatbuf_r+0x40>
 800a932:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a936:	e00e      	b.n	800a956 <__swhatbuf_r+0x42>
 800a938:	466a      	mov	r2, sp
 800a93a:	f000 f94f 	bl	800abdc <_fstat_r>
 800a93e:	2800      	cmp	r0, #0
 800a940:	dbf1      	blt.n	800a926 <__swhatbuf_r+0x12>
 800a942:	9a01      	ldr	r2, [sp, #4]
 800a944:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a948:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a94c:	425a      	negs	r2, r3
 800a94e:	415a      	adcs	r2, r3
 800a950:	602a      	str	r2, [r5, #0]
 800a952:	e7ee      	b.n	800a932 <__swhatbuf_r+0x1e>
 800a954:	2340      	movs	r3, #64	; 0x40
 800a956:	2000      	movs	r0, #0
 800a958:	6023      	str	r3, [r4, #0]
 800a95a:	b016      	add	sp, #88	; 0x58
 800a95c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a960 <__smakebuf_r>:
 800a960:	898b      	ldrh	r3, [r1, #12]
 800a962:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a964:	079d      	lsls	r5, r3, #30
 800a966:	4606      	mov	r6, r0
 800a968:	460c      	mov	r4, r1
 800a96a:	d507      	bpl.n	800a97c <__smakebuf_r+0x1c>
 800a96c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a970:	6023      	str	r3, [r4, #0]
 800a972:	6123      	str	r3, [r4, #16]
 800a974:	2301      	movs	r3, #1
 800a976:	6163      	str	r3, [r4, #20]
 800a978:	b002      	add	sp, #8
 800a97a:	bd70      	pop	{r4, r5, r6, pc}
 800a97c:	ab01      	add	r3, sp, #4
 800a97e:	466a      	mov	r2, sp
 800a980:	f7ff ffc8 	bl	800a914 <__swhatbuf_r>
 800a984:	9900      	ldr	r1, [sp, #0]
 800a986:	4605      	mov	r5, r0
 800a988:	4630      	mov	r0, r6
 800a98a:	f7ff f9a1 	bl	8009cd0 <_malloc_r>
 800a98e:	b948      	cbnz	r0, 800a9a4 <__smakebuf_r+0x44>
 800a990:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a994:	059a      	lsls	r2, r3, #22
 800a996:	d4ef      	bmi.n	800a978 <__smakebuf_r+0x18>
 800a998:	f023 0303 	bic.w	r3, r3, #3
 800a99c:	f043 0302 	orr.w	r3, r3, #2
 800a9a0:	81a3      	strh	r3, [r4, #12]
 800a9a2:	e7e3      	b.n	800a96c <__smakebuf_r+0xc>
 800a9a4:	4b0d      	ldr	r3, [pc, #52]	; (800a9dc <__smakebuf_r+0x7c>)
 800a9a6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a9a8:	89a3      	ldrh	r3, [r4, #12]
 800a9aa:	6020      	str	r0, [r4, #0]
 800a9ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9b0:	81a3      	strh	r3, [r4, #12]
 800a9b2:	9b00      	ldr	r3, [sp, #0]
 800a9b4:	6163      	str	r3, [r4, #20]
 800a9b6:	9b01      	ldr	r3, [sp, #4]
 800a9b8:	6120      	str	r0, [r4, #16]
 800a9ba:	b15b      	cbz	r3, 800a9d4 <__smakebuf_r+0x74>
 800a9bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9c0:	4630      	mov	r0, r6
 800a9c2:	f000 f91d 	bl	800ac00 <_isatty_r>
 800a9c6:	b128      	cbz	r0, 800a9d4 <__smakebuf_r+0x74>
 800a9c8:	89a3      	ldrh	r3, [r4, #12]
 800a9ca:	f023 0303 	bic.w	r3, r3, #3
 800a9ce:	f043 0301 	orr.w	r3, r3, #1
 800a9d2:	81a3      	strh	r3, [r4, #12]
 800a9d4:	89a0      	ldrh	r0, [r4, #12]
 800a9d6:	4305      	orrs	r5, r0
 800a9d8:	81a5      	strh	r5, [r4, #12]
 800a9da:	e7cd      	b.n	800a978 <__smakebuf_r+0x18>
 800a9dc:	0800a76d 	.word	0x0800a76d

0800a9e0 <__malloc_lock>:
 800a9e0:	4801      	ldr	r0, [pc, #4]	; (800a9e8 <__malloc_lock+0x8>)
 800a9e2:	f7ff bf95 	b.w	800a910 <__retarget_lock_acquire_recursive>
 800a9e6:	bf00      	nop
 800a9e8:	2001dd7c 	.word	0x2001dd7c

0800a9ec <__malloc_unlock>:
 800a9ec:	4801      	ldr	r0, [pc, #4]	; (800a9f4 <__malloc_unlock+0x8>)
 800a9ee:	f7ff bf90 	b.w	800a912 <__retarget_lock_release_recursive>
 800a9f2:	bf00      	nop
 800a9f4:	2001dd7c 	.word	0x2001dd7c

0800a9f8 <_putc_r>:
 800a9f8:	b570      	push	{r4, r5, r6, lr}
 800a9fa:	460d      	mov	r5, r1
 800a9fc:	4614      	mov	r4, r2
 800a9fe:	4606      	mov	r6, r0
 800aa00:	b118      	cbz	r0, 800aa0a <_putc_r+0x12>
 800aa02:	6983      	ldr	r3, [r0, #24]
 800aa04:	b90b      	cbnz	r3, 800aa0a <_putc_r+0x12>
 800aa06:	f7ff fee5 	bl	800a7d4 <__sinit>
 800aa0a:	4b1c      	ldr	r3, [pc, #112]	; (800aa7c <_putc_r+0x84>)
 800aa0c:	429c      	cmp	r4, r3
 800aa0e:	d124      	bne.n	800aa5a <_putc_r+0x62>
 800aa10:	6874      	ldr	r4, [r6, #4]
 800aa12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa14:	07d8      	lsls	r0, r3, #31
 800aa16:	d405      	bmi.n	800aa24 <_putc_r+0x2c>
 800aa18:	89a3      	ldrh	r3, [r4, #12]
 800aa1a:	0599      	lsls	r1, r3, #22
 800aa1c:	d402      	bmi.n	800aa24 <_putc_r+0x2c>
 800aa1e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa20:	f7ff ff76 	bl	800a910 <__retarget_lock_acquire_recursive>
 800aa24:	68a3      	ldr	r3, [r4, #8]
 800aa26:	3b01      	subs	r3, #1
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	60a3      	str	r3, [r4, #8]
 800aa2c:	da05      	bge.n	800aa3a <_putc_r+0x42>
 800aa2e:	69a2      	ldr	r2, [r4, #24]
 800aa30:	4293      	cmp	r3, r2
 800aa32:	db1c      	blt.n	800aa6e <_putc_r+0x76>
 800aa34:	b2eb      	uxtb	r3, r5
 800aa36:	2b0a      	cmp	r3, #10
 800aa38:	d019      	beq.n	800aa6e <_putc_r+0x76>
 800aa3a:	6823      	ldr	r3, [r4, #0]
 800aa3c:	1c5a      	adds	r2, r3, #1
 800aa3e:	6022      	str	r2, [r4, #0]
 800aa40:	701d      	strb	r5, [r3, #0]
 800aa42:	b2ed      	uxtb	r5, r5
 800aa44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa46:	07da      	lsls	r2, r3, #31
 800aa48:	d405      	bmi.n	800aa56 <_putc_r+0x5e>
 800aa4a:	89a3      	ldrh	r3, [r4, #12]
 800aa4c:	059b      	lsls	r3, r3, #22
 800aa4e:	d402      	bmi.n	800aa56 <_putc_r+0x5e>
 800aa50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa52:	f7ff ff5e 	bl	800a912 <__retarget_lock_release_recursive>
 800aa56:	4628      	mov	r0, r5
 800aa58:	bd70      	pop	{r4, r5, r6, pc}
 800aa5a:	4b09      	ldr	r3, [pc, #36]	; (800aa80 <_putc_r+0x88>)
 800aa5c:	429c      	cmp	r4, r3
 800aa5e:	d101      	bne.n	800aa64 <_putc_r+0x6c>
 800aa60:	68b4      	ldr	r4, [r6, #8]
 800aa62:	e7d6      	b.n	800aa12 <_putc_r+0x1a>
 800aa64:	4b07      	ldr	r3, [pc, #28]	; (800aa84 <_putc_r+0x8c>)
 800aa66:	429c      	cmp	r4, r3
 800aa68:	bf08      	it	eq
 800aa6a:	68f4      	ldreq	r4, [r6, #12]
 800aa6c:	e7d1      	b.n	800aa12 <_putc_r+0x1a>
 800aa6e:	4629      	mov	r1, r5
 800aa70:	4622      	mov	r2, r4
 800aa72:	4630      	mov	r0, r6
 800aa74:	f7ff fccc 	bl	800a410 <__swbuf_r>
 800aa78:	4605      	mov	r5, r0
 800aa7a:	e7e3      	b.n	800aa44 <_putc_r+0x4c>
 800aa7c:	0800af74 	.word	0x0800af74
 800aa80:	0800af94 	.word	0x0800af94
 800aa84:	0800af54 	.word	0x0800af54

0800aa88 <_raise_r>:
 800aa88:	291f      	cmp	r1, #31
 800aa8a:	b538      	push	{r3, r4, r5, lr}
 800aa8c:	4604      	mov	r4, r0
 800aa8e:	460d      	mov	r5, r1
 800aa90:	d904      	bls.n	800aa9c <_raise_r+0x14>
 800aa92:	2316      	movs	r3, #22
 800aa94:	6003      	str	r3, [r0, #0]
 800aa96:	f04f 30ff 	mov.w	r0, #4294967295
 800aa9a:	bd38      	pop	{r3, r4, r5, pc}
 800aa9c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aa9e:	b112      	cbz	r2, 800aaa6 <_raise_r+0x1e>
 800aaa0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aaa4:	b94b      	cbnz	r3, 800aaba <_raise_r+0x32>
 800aaa6:	4620      	mov	r0, r4
 800aaa8:	f000 f830 	bl	800ab0c <_getpid_r>
 800aaac:	462a      	mov	r2, r5
 800aaae:	4601      	mov	r1, r0
 800aab0:	4620      	mov	r0, r4
 800aab2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aab6:	f000 b817 	b.w	800aae8 <_kill_r>
 800aaba:	2b01      	cmp	r3, #1
 800aabc:	d00a      	beq.n	800aad4 <_raise_r+0x4c>
 800aabe:	1c59      	adds	r1, r3, #1
 800aac0:	d103      	bne.n	800aaca <_raise_r+0x42>
 800aac2:	2316      	movs	r3, #22
 800aac4:	6003      	str	r3, [r0, #0]
 800aac6:	2001      	movs	r0, #1
 800aac8:	e7e7      	b.n	800aa9a <_raise_r+0x12>
 800aaca:	2400      	movs	r4, #0
 800aacc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aad0:	4628      	mov	r0, r5
 800aad2:	4798      	blx	r3
 800aad4:	2000      	movs	r0, #0
 800aad6:	e7e0      	b.n	800aa9a <_raise_r+0x12>

0800aad8 <raise>:
 800aad8:	4b02      	ldr	r3, [pc, #8]	; (800aae4 <raise+0xc>)
 800aada:	4601      	mov	r1, r0
 800aadc:	6818      	ldr	r0, [r3, #0]
 800aade:	f7ff bfd3 	b.w	800aa88 <_raise_r>
 800aae2:	bf00      	nop
 800aae4:	200001d8 	.word	0x200001d8

0800aae8 <_kill_r>:
 800aae8:	b538      	push	{r3, r4, r5, lr}
 800aaea:	4d07      	ldr	r5, [pc, #28]	; (800ab08 <_kill_r+0x20>)
 800aaec:	2300      	movs	r3, #0
 800aaee:	4604      	mov	r4, r0
 800aaf0:	4608      	mov	r0, r1
 800aaf2:	4611      	mov	r1, r2
 800aaf4:	602b      	str	r3, [r5, #0]
 800aaf6:	f000 f8d7 	bl	800aca8 <_kill>
 800aafa:	1c43      	adds	r3, r0, #1
 800aafc:	d102      	bne.n	800ab04 <_kill_r+0x1c>
 800aafe:	682b      	ldr	r3, [r5, #0]
 800ab00:	b103      	cbz	r3, 800ab04 <_kill_r+0x1c>
 800ab02:	6023      	str	r3, [r4, #0]
 800ab04:	bd38      	pop	{r3, r4, r5, pc}
 800ab06:	bf00      	nop
 800ab08:	2001dd80 	.word	0x2001dd80

0800ab0c <_getpid_r>:
 800ab0c:	f000 b8bc 	b.w	800ac88 <_getpid>

0800ab10 <__sread>:
 800ab10:	b510      	push	{r4, lr}
 800ab12:	460c      	mov	r4, r1
 800ab14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab18:	f000 f894 	bl	800ac44 <_read_r>
 800ab1c:	2800      	cmp	r0, #0
 800ab1e:	bfab      	itete	ge
 800ab20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ab22:	89a3      	ldrhlt	r3, [r4, #12]
 800ab24:	181b      	addge	r3, r3, r0
 800ab26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ab2a:	bfac      	ite	ge
 800ab2c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ab2e:	81a3      	strhlt	r3, [r4, #12]
 800ab30:	bd10      	pop	{r4, pc}

0800ab32 <__swrite>:
 800ab32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab36:	461f      	mov	r7, r3
 800ab38:	898b      	ldrh	r3, [r1, #12]
 800ab3a:	05db      	lsls	r3, r3, #23
 800ab3c:	4605      	mov	r5, r0
 800ab3e:	460c      	mov	r4, r1
 800ab40:	4616      	mov	r6, r2
 800ab42:	d505      	bpl.n	800ab50 <__swrite+0x1e>
 800ab44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab48:	2302      	movs	r3, #2
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	f000 f868 	bl	800ac20 <_lseek_r>
 800ab50:	89a3      	ldrh	r3, [r4, #12]
 800ab52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab5a:	81a3      	strh	r3, [r4, #12]
 800ab5c:	4632      	mov	r2, r6
 800ab5e:	463b      	mov	r3, r7
 800ab60:	4628      	mov	r0, r5
 800ab62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab66:	f000 b817 	b.w	800ab98 <_write_r>

0800ab6a <__sseek>:
 800ab6a:	b510      	push	{r4, lr}
 800ab6c:	460c      	mov	r4, r1
 800ab6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab72:	f000 f855 	bl	800ac20 <_lseek_r>
 800ab76:	1c43      	adds	r3, r0, #1
 800ab78:	89a3      	ldrh	r3, [r4, #12]
 800ab7a:	bf15      	itete	ne
 800ab7c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ab7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ab82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ab86:	81a3      	strheq	r3, [r4, #12]
 800ab88:	bf18      	it	ne
 800ab8a:	81a3      	strhne	r3, [r4, #12]
 800ab8c:	bd10      	pop	{r4, pc}

0800ab8e <__sclose>:
 800ab8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab92:	f000 b813 	b.w	800abbc <_close_r>
	...

0800ab98 <_write_r>:
 800ab98:	b538      	push	{r3, r4, r5, lr}
 800ab9a:	4d07      	ldr	r5, [pc, #28]	; (800abb8 <_write_r+0x20>)
 800ab9c:	4604      	mov	r4, r0
 800ab9e:	4608      	mov	r0, r1
 800aba0:	4611      	mov	r1, r2
 800aba2:	2200      	movs	r2, #0
 800aba4:	602a      	str	r2, [r5, #0]
 800aba6:	461a      	mov	r2, r3
 800aba8:	f000 f8a4 	bl	800acf4 <_write>
 800abac:	1c43      	adds	r3, r0, #1
 800abae:	d102      	bne.n	800abb6 <_write_r+0x1e>
 800abb0:	682b      	ldr	r3, [r5, #0]
 800abb2:	b103      	cbz	r3, 800abb6 <_write_r+0x1e>
 800abb4:	6023      	str	r3, [r4, #0]
 800abb6:	bd38      	pop	{r3, r4, r5, pc}
 800abb8:	2001dd80 	.word	0x2001dd80

0800abbc <_close_r>:
 800abbc:	b538      	push	{r3, r4, r5, lr}
 800abbe:	4d06      	ldr	r5, [pc, #24]	; (800abd8 <_close_r+0x1c>)
 800abc0:	2300      	movs	r3, #0
 800abc2:	4604      	mov	r4, r0
 800abc4:	4608      	mov	r0, r1
 800abc6:	602b      	str	r3, [r5, #0]
 800abc8:	f000 f84e 	bl	800ac68 <_close>
 800abcc:	1c43      	adds	r3, r0, #1
 800abce:	d102      	bne.n	800abd6 <_close_r+0x1a>
 800abd0:	682b      	ldr	r3, [r5, #0]
 800abd2:	b103      	cbz	r3, 800abd6 <_close_r+0x1a>
 800abd4:	6023      	str	r3, [r4, #0]
 800abd6:	bd38      	pop	{r3, r4, r5, pc}
 800abd8:	2001dd80 	.word	0x2001dd80

0800abdc <_fstat_r>:
 800abdc:	b538      	push	{r3, r4, r5, lr}
 800abde:	4d07      	ldr	r5, [pc, #28]	; (800abfc <_fstat_r+0x20>)
 800abe0:	2300      	movs	r3, #0
 800abe2:	4604      	mov	r4, r0
 800abe4:	4608      	mov	r0, r1
 800abe6:	4611      	mov	r1, r2
 800abe8:	602b      	str	r3, [r5, #0]
 800abea:	f000 f845 	bl	800ac78 <_fstat>
 800abee:	1c43      	adds	r3, r0, #1
 800abf0:	d102      	bne.n	800abf8 <_fstat_r+0x1c>
 800abf2:	682b      	ldr	r3, [r5, #0]
 800abf4:	b103      	cbz	r3, 800abf8 <_fstat_r+0x1c>
 800abf6:	6023      	str	r3, [r4, #0]
 800abf8:	bd38      	pop	{r3, r4, r5, pc}
 800abfa:	bf00      	nop
 800abfc:	2001dd80 	.word	0x2001dd80

0800ac00 <_isatty_r>:
 800ac00:	b538      	push	{r3, r4, r5, lr}
 800ac02:	4d06      	ldr	r5, [pc, #24]	; (800ac1c <_isatty_r+0x1c>)
 800ac04:	2300      	movs	r3, #0
 800ac06:	4604      	mov	r4, r0
 800ac08:	4608      	mov	r0, r1
 800ac0a:	602b      	str	r3, [r5, #0]
 800ac0c:	f000 f844 	bl	800ac98 <_isatty>
 800ac10:	1c43      	adds	r3, r0, #1
 800ac12:	d102      	bne.n	800ac1a <_isatty_r+0x1a>
 800ac14:	682b      	ldr	r3, [r5, #0]
 800ac16:	b103      	cbz	r3, 800ac1a <_isatty_r+0x1a>
 800ac18:	6023      	str	r3, [r4, #0]
 800ac1a:	bd38      	pop	{r3, r4, r5, pc}
 800ac1c:	2001dd80 	.word	0x2001dd80

0800ac20 <_lseek_r>:
 800ac20:	b538      	push	{r3, r4, r5, lr}
 800ac22:	4d07      	ldr	r5, [pc, #28]	; (800ac40 <_lseek_r+0x20>)
 800ac24:	4604      	mov	r4, r0
 800ac26:	4608      	mov	r0, r1
 800ac28:	4611      	mov	r1, r2
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	602a      	str	r2, [r5, #0]
 800ac2e:	461a      	mov	r2, r3
 800ac30:	f000 f842 	bl	800acb8 <_lseek>
 800ac34:	1c43      	adds	r3, r0, #1
 800ac36:	d102      	bne.n	800ac3e <_lseek_r+0x1e>
 800ac38:	682b      	ldr	r3, [r5, #0]
 800ac3a:	b103      	cbz	r3, 800ac3e <_lseek_r+0x1e>
 800ac3c:	6023      	str	r3, [r4, #0]
 800ac3e:	bd38      	pop	{r3, r4, r5, pc}
 800ac40:	2001dd80 	.word	0x2001dd80

0800ac44 <_read_r>:
 800ac44:	b538      	push	{r3, r4, r5, lr}
 800ac46:	4d07      	ldr	r5, [pc, #28]	; (800ac64 <_read_r+0x20>)
 800ac48:	4604      	mov	r4, r0
 800ac4a:	4608      	mov	r0, r1
 800ac4c:	4611      	mov	r1, r2
 800ac4e:	2200      	movs	r2, #0
 800ac50:	602a      	str	r2, [r5, #0]
 800ac52:	461a      	mov	r2, r3
 800ac54:	f000 f838 	bl	800acc8 <_read>
 800ac58:	1c43      	adds	r3, r0, #1
 800ac5a:	d102      	bne.n	800ac62 <_read_r+0x1e>
 800ac5c:	682b      	ldr	r3, [r5, #0]
 800ac5e:	b103      	cbz	r3, 800ac62 <_read_r+0x1e>
 800ac60:	6023      	str	r3, [r4, #0]
 800ac62:	bd38      	pop	{r3, r4, r5, pc}
 800ac64:	2001dd80 	.word	0x2001dd80

0800ac68 <_close>:
 800ac68:	4b02      	ldr	r3, [pc, #8]	; (800ac74 <_close+0xc>)
 800ac6a:	2258      	movs	r2, #88	; 0x58
 800ac6c:	601a      	str	r2, [r3, #0]
 800ac6e:	f04f 30ff 	mov.w	r0, #4294967295
 800ac72:	4770      	bx	lr
 800ac74:	2001dd80 	.word	0x2001dd80

0800ac78 <_fstat>:
 800ac78:	4b02      	ldr	r3, [pc, #8]	; (800ac84 <_fstat+0xc>)
 800ac7a:	2258      	movs	r2, #88	; 0x58
 800ac7c:	601a      	str	r2, [r3, #0]
 800ac7e:	f04f 30ff 	mov.w	r0, #4294967295
 800ac82:	4770      	bx	lr
 800ac84:	2001dd80 	.word	0x2001dd80

0800ac88 <_getpid>:
 800ac88:	4b02      	ldr	r3, [pc, #8]	; (800ac94 <_getpid+0xc>)
 800ac8a:	2258      	movs	r2, #88	; 0x58
 800ac8c:	601a      	str	r2, [r3, #0]
 800ac8e:	f04f 30ff 	mov.w	r0, #4294967295
 800ac92:	4770      	bx	lr
 800ac94:	2001dd80 	.word	0x2001dd80

0800ac98 <_isatty>:
 800ac98:	4b02      	ldr	r3, [pc, #8]	; (800aca4 <_isatty+0xc>)
 800ac9a:	2258      	movs	r2, #88	; 0x58
 800ac9c:	601a      	str	r2, [r3, #0]
 800ac9e:	2000      	movs	r0, #0
 800aca0:	4770      	bx	lr
 800aca2:	bf00      	nop
 800aca4:	2001dd80 	.word	0x2001dd80

0800aca8 <_kill>:
 800aca8:	4b02      	ldr	r3, [pc, #8]	; (800acb4 <_kill+0xc>)
 800acaa:	2258      	movs	r2, #88	; 0x58
 800acac:	601a      	str	r2, [r3, #0]
 800acae:	f04f 30ff 	mov.w	r0, #4294967295
 800acb2:	4770      	bx	lr
 800acb4:	2001dd80 	.word	0x2001dd80

0800acb8 <_lseek>:
 800acb8:	4b02      	ldr	r3, [pc, #8]	; (800acc4 <_lseek+0xc>)
 800acba:	2258      	movs	r2, #88	; 0x58
 800acbc:	601a      	str	r2, [r3, #0]
 800acbe:	f04f 30ff 	mov.w	r0, #4294967295
 800acc2:	4770      	bx	lr
 800acc4:	2001dd80 	.word	0x2001dd80

0800acc8 <_read>:
 800acc8:	4b02      	ldr	r3, [pc, #8]	; (800acd4 <_read+0xc>)
 800acca:	2258      	movs	r2, #88	; 0x58
 800accc:	601a      	str	r2, [r3, #0]
 800acce:	f04f 30ff 	mov.w	r0, #4294967295
 800acd2:	4770      	bx	lr
 800acd4:	2001dd80 	.word	0x2001dd80

0800acd8 <_sbrk>:
 800acd8:	4a04      	ldr	r2, [pc, #16]	; (800acec <_sbrk+0x14>)
 800acda:	6811      	ldr	r1, [r2, #0]
 800acdc:	4603      	mov	r3, r0
 800acde:	b909      	cbnz	r1, 800ace4 <_sbrk+0xc>
 800ace0:	4903      	ldr	r1, [pc, #12]	; (800acf0 <_sbrk+0x18>)
 800ace2:	6011      	str	r1, [r2, #0]
 800ace4:	6810      	ldr	r0, [r2, #0]
 800ace6:	4403      	add	r3, r0
 800ace8:	6013      	str	r3, [r2, #0]
 800acea:	4770      	bx	lr
 800acec:	2001dd84 	.word	0x2001dd84
 800acf0:	2001dd88 	.word	0x2001dd88

0800acf4 <_write>:
 800acf4:	4b02      	ldr	r3, [pc, #8]	; (800ad00 <_write+0xc>)
 800acf6:	2258      	movs	r2, #88	; 0x58
 800acf8:	601a      	str	r2, [r3, #0]
 800acfa:	f04f 30ff 	mov.w	r0, #4294967295
 800acfe:	4770      	bx	lr
 800ad00:	2001dd80 	.word	0x2001dd80

0800ad04 <_exit>:
 800ad04:	e7fe      	b.n	800ad04 <_exit>
	...

0800ad08 <_init>:
 800ad08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad0a:	bf00      	nop
 800ad0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad0e:	bc08      	pop	{r3}
 800ad10:	469e      	mov	lr, r3
 800ad12:	4770      	bx	lr

0800ad14 <_fini>:
 800ad14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad16:	bf00      	nop
 800ad18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad1a:	bc08      	pop	{r3}
 800ad1c:	469e      	mov	lr, r3
 800ad1e:	4770      	bx	lr
